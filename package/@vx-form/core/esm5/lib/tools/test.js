/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as moment_ from "moment";
import * as i0 from "@angular/core";
/** @type {?} */
var moment = moment_;
var TestBaseUtils = /** @class */ (function () {
    function TestBaseUtils() {
        this.base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-*/!";
        this.base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    TestBaseUtils.prototype.baseEncode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var out;
        /** @type {?} */
        var i;
        /** @type {?} */
        var len;
        /** @type {?} */
        var c1;
        /** @type {?} */
        var c2;
        /** @type {?} */
        var c3;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
            c1 = str.charCodeAt(i++) & 0xff;
            if (i == len) {
                out += this.base64EncodeChars.charAt(c1 >> 2);
                out += this.base64EncodeChars.charAt((c1 & 0x3) << 4);
                out += "==";
                break;
            }
            c2 = str.charCodeAt(i++);
            if (i == len) {
                out += this.base64EncodeChars.charAt(c1 >> 2);
                out += this.base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
                out += this.base64EncodeChars.charAt((c2 & 0xF) << 2);
                out += "=";
                break;
            }
            c3 = str.charCodeAt(i++);
            out += this.base64EncodeChars.charAt(c1 >> 2);
            out += this.base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));
            out += this.base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
            out += this.base64EncodeChars.charAt(c3 & 0x3F);
        }
        return out;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    TestBaseUtils.prototype.baseDecode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var c1;
        /** @type {?} */
        var c2;
        /** @type {?} */
        var c3;
        /** @type {?} */
        var c4;
        /** @type {?} */
        var i;
        /** @type {?} */
        var len;
        /** @type {?} */
        var out;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
            /* c1 */
            do {
                c1 = this.base64DecodeChars[str.charCodeAt(i++) & 0xff];
            } while (i < len && c1 == -1);
            if (c1 == -1)
                break;
            /* c2 */
            do {
                c2 = this.base64DecodeChars[str.charCodeAt(i++) & 0xff];
            } while (i < len && c2 == -1);
            if (c2 == -1)
                break;
            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));
            /* c3 */
            do {
                c3 = str.charCodeAt(i++) & 0xff;
                if (c3 == 61)
                    return out;
                c3 = this.base64DecodeChars[c3];
            } while (i < len && c3 == -1);
            if (c3 == -1)
                break;
            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));
            /* c4 */
            do {
                c4 = str.charCodeAt(i++) & 0xff;
                if (c4 == 61)
                    return out;
                c4 = this.base64DecodeChars[c4];
            } while (i < len && c4 == -1);
            if (c4 == -1)
                break;
            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
        }
        return out;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    TestBaseUtils.prototype.t1 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var result = false;
        debugger;
        try {
            str = this.baseDecode(str);
            if (str != undefined && str != null && str != "") {
                /** @type {?} */
                var arr = str.split(";");
                if (arr != null && arr.length == 2) {
                    /** @type {?} */
                    var str1 = arr[0];
                    /** @type {?} */
                    var str2 = arr[1];
                    if (str1.length == parseInt(str2)) {
                        /** @type {?} */
                        var begintime = moment().toDate();
                        /** @type {?} */
                        var endtime = moment(str1).toDate();
                        console.log('[][][]');
                        console.log(moment(endtime).diff(begintime, 'day'));
                        if (moment(endtime).diff(begintime, 'day') > 0) {
                            result = true;
                        }
                    }
                }
            }
        }
        catch (ex) {
        }
        return result;
    };
    TestBaseUtils.decorators = [
        { type: Injectable, args: [{ providedIn: "root" },] }
    ];
    /** @nocollapse */ TestBaseUtils.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TestBaseUtils_Factory() { return new TestBaseUtils(); }, token: TestBaseUtils, providedIn: "root" });
    return TestBaseUtils;
}());
export { TestBaseUtils };
if (false) {
    /** @type {?} */
    TestBaseUtils.prototype.base64EncodeChars;
    /** @type {?} */
    TestBaseUtils.prototype.base64DecodeChars;
}
//# sourceMappingURL=data:application/json;base64,