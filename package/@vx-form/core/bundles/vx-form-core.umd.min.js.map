{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@vx-form/core/lib/utils.ts","ng://@vx-form/core/lib/services/vxform.config.ts","ng://@vx-form/core/lib/services/vxform.builder.ts","ng://@vx-form/core/lib/tools/test.ts","ng://@vx-form/core/lib/components/vxform.ts","ng://@vx-form/core/lib/components/vxform.field.ts","ng://@vx-form/core/lib/components/vxform.attributes.ts","ng://@vx-form/core/lib/templates/field.type.ts","ng://@vx-form/core/lib/extensions/field-form/utils.ts","ng://@vx-form/core/lib/templates/field-array.type.ts","ng://@vx-form/core/lib/templates/field.wrapper.ts","ng://@vx-form/core/lib/templates/vxform.group.ts","ng://@vx-form/core/lib/templates/vxform.validation-message.ts","ng://@vx-form/core/lib/templates/field-template.type.ts","ng://@vx-form/core/lib/extensions/field-expression/utils.ts","ng://@vx-form/core/lib/extensions/field-expression/field-expression.ts","ng://@vx-form/core/lib/extensions/field-validation/field-validation.ts","ng://@vx-form/core/lib/extensions/field-form/field-form.ts","ng://@vx-form/core/lib/guid.ts","ng://@vx-form/core/lib/extensions/core/core.ts","ng://@vx-form/core/lib/tools/common.ts","ng://@vx-form/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","VXFORM_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","__values","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","reduce","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","currentValue","firstChange","set","previousValue","VXFORM_CONFIG","InjectionToken","VXFormConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","createComponent","instance","resolver","injector","cf","_componentFactory","hostView","destroyed","_componentFactoryResolver","getFieldInjector","component","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","setAPPConfig","appConfig","extendedType","_injector","Injectable","providedIn","VXFormBuilder","vxFormConfig","componentFactoryResolver","buildForm","fieldGroup","core","_buildForm","_setOptions","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","moment","moment_","TestBaseUtils","base64EncodeChars","base64DecodeChars","baseEncode","str","out","len","c1","c2","c3","charCodeAt","charAt","baseDecode","c4","String","fromCharCode","t1","result","arr","str1","str2","parseInt","begintime","toDate","endtime","console","log","diff","ex","VXForm","vxFormBuilder","immutable","parentFormGroup","modelChange","EventEmitter","status","modelChangeSubs","gogo","enableCheckExprDebounce","checkExpressionChange$","pipe","debounceTime","subscribe","checkExpressionChange","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","form","FormGroup","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","unsubscribe","changeModel","event","emit","resetModel","initialModel","k","control","resetForm","reset","_a","emitModelChange","_checkField","rootKey","control_1","valueChanges","modelOptions","updateOn","debounce","default","_onChange","patchValue","emitEvent","parsers","parserFn","tslib_1.__spread","join","sub","checkFieldShow","Component","selector","template","host","[class]","providers","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","static","VXFormField","hideDeprecation","className","warnDeprecation","warn","rownumber","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","clear","wps_1","cfr","ref_1","attachComponentRef","detectChanges","insert","hooks","lifecycle","[style.display]","read","ViewContainerRef","VXFormAttributes","renderer","elementRef","_document","uiAttributesCache","uiAttributes","document","templateOptions","attr","setAttribute","to","attributes","removeAttribute","attachAttrElement","fieldAttrElements","element","focusElement","detachAttrElement","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","findIndex","splice","Directive","(focus)","(blur)","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","Inject","DOCUMENT","FieldType","id","editor","placeholder","value_1","item","label","values","tips","attachment","limit","Field","_super","tslib_1.__extends","unregisterControl","FormArray","controls","removeAt","setParent","removeControl","registerControl","disabled","disable","enable","registerOnDisabledChange","FormControl","setControl","FieldArrayType","builder","fieldArray","add","remove","FieldWrapper","VXFormGroup","VXFormValidationMessage","fieldForm","errors","errorPath","asyncValidators","VXFormTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","Observable","subscription_1","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","sort","toggleFormControl","expressionValue","JSON","stringify","setDisabledState","hideExpressionResult","hidden","filter","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","asyncValidator","VALIDATORS","opt","updateValueAndValidity","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","handleResult","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","setValidators","_updateTreeValidity","controlOptions","createControl","updateValidity","_validators","_asyncValidators","enabled","onlySelf","setAsyncValidators","Guid","guid","EMPTY","isGuid","toString","gen","createEmpty","parse","raw","count","Math","random","substring","equals","other","isEmpty","toJSON","RegExp","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","initFieldWrappers","fieldTemplateManipulators","el","a","VXFormCommonService","initFormFieldProperty","deleteFieldProperty","initFormFieldConfig","fieldPropertys","setFieldProperty","initFormFieldModel","typeold","checkFieldDefaultValue","initSurveyFormFieldConfig","surveyInfo","queTotal","pages","page","setFieldNumber","questions","readonly","items","queno","defaultVXFormConfig","VXFormModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","forConfig","localStorage","getItem","removeItem","setItem","NgModule","declarations","entryComponents","exports","imports","HttpModule","HttpClientModule","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { VXFormFieldConfig } from \"./core\";\r\nimport { isObservable } from \"rxjs\";\r\nimport { AbstractControl } from \"@angular/forms\";\r\nimport { VXFormFieldConfigCache } from \"./components/vxform.field.config\";\r\n\r\nexport function getFieldId(\r\n  formId: string,\r\n  field: VXFormFieldConfig,\r\n  index: string | number\r\n) {\r\n  if (field.id) return field.id;\r\n  let type = field.type;\r\n  if (!type && field.template) type = \"template\";\r\n  return [formId, type, field.key, index].join(\"_\");\r\n}\r\n\r\nexport function getKeyPath(field: VXFormFieldConfigCache): string[] {\r\n  if (!field.key) {\r\n    return [];\r\n  }\r\n\r\n  if (!field._keyPath || field._keyPath.key !== field.key) {\r\n    const key =\r\n      field.key.indexOf(\"[\") === -1\r\n        ? field.key\r\n        : field.key.replace(/\\[(\\w+)\\]/g, \".$1\");\r\n\r\n    field._keyPath = {\r\n      key: field.key,\r\n      path: key.indexOf(\".\") !== -1 ? key.split(\".\") : [key]\r\n    };\r\n  }\r\n\r\n  return field._keyPath.path.slice(0);\r\n}\r\n\r\nexport const VXFORM_VALIDATORS = [\r\n  \"required\",\r\n  \"pattern\",\r\n  \"minLength\",\r\n  \"maxLength\",\r\n  \"min\",\r\n  \"max\"\r\n];\r\n\r\nexport function assignModelValue(model: any, paths: string[], value: any) {\r\n  for (let i = 0; i < paths.length - 1; i++) {\r\n    const path = paths[i];\r\n    if (!model[path] || !isObject(model[path])) {\r\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\r\n    }\r\n\r\n    model = model[path];\r\n  }\r\n\r\n  model[paths[paths.length - 1]] = clone(value);\r\n}\r\n\r\nexport function getFieldValue(field: VXFormFieldConfig): any {\r\n  let model = field.parent.model;\r\n  for (const path of getKeyPath(field)) {\r\n    if (!model) {\r\n      return model;\r\n    }\r\n    model = model[path];\r\n  }\r\n\r\n  return model;\r\n}\r\n\r\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\r\n  args.forEach(src => {\r\n    for (let srcArg in src) {\r\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\r\n        dest[srcArg] = clone(src[srcArg]);\r\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\r\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\r\n      }\r\n    }\r\n  });\r\n  return dest;\r\n}\r\n\r\nexport function isNullOrUndefined(value: any) {\r\n  return value === undefined || value === null;\r\n}\r\n\r\nexport function isUndefined(value: any) {\r\n  return value === undefined;\r\n}\r\n\r\nexport function isBlankString(value: any) {\r\n  return value === \"\";\r\n}\r\n\r\nexport function isFunction(value: any) {\r\n  return typeof value === \"function\";\r\n}\r\n\r\nexport function objAndSameType(obj1: any, obj2: any) {\r\n  return (\r\n    isObject(obj1) &&\r\n    isObject(obj2) &&\r\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\r\n    !(Array.isArray(obj1) || Array.isArray(obj2))\r\n  );\r\n}\r\n\r\nexport function isObject(x: any) {\r\n  return x != null && typeof x === \"object\";\r\n}\r\n\r\nexport function isPromise(obj: any): obj is Promise<any> {\r\n  return !!obj && typeof obj.then === \"function\";\r\n}\r\n\r\nexport function clone(value: any): any {\r\n  if (\r\n    !isObject(value) ||\r\n    isObservable(value) ||\r\n    value.changingThisBreaksApplicationSecurity ||\r\n    [\"RegExp\", \"FileList\", \"File\", \"Blob\"].indexOf(value.constructor.name) !==\r\n      -1\r\n  ) {\r\n    return value;\r\n  }\r\n\r\n  if (value._isAMomentObject && isFunction(value.clone)) {\r\n    return value.clone();\r\n  }\r\n\r\n  if (value instanceof AbstractControl) {\r\n    return null;\r\n  }\r\n\r\n  if (value instanceof Date) {\r\n    return new Date(value.getTime());\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.slice(0).map(v => clone(v));\r\n  }\r\n\r\n  const proto = Object.getPrototypeOf(value);\r\n  let c = Object.create(proto);\r\n  c = Object.setPrototypeOf(c, proto);\r\n  return Object.keys(value).reduce((newVal, prop) => {\r\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\r\n    if (propDesc.get) {\r\n      Object.defineProperty(newVal, prop, propDesc);\r\n    } else {\r\n      newVal[prop] = clone(value[prop]);\r\n    }\r\n\r\n    return newVal;\r\n  }, c);\r\n}\r\n\r\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\r\n  Object.defineProperty(field, prop, {\r\n    enumerable: false,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n  field[prop] = defaultValue;\r\n}\r\n\r\nexport function wrapProperty<T = any>(\r\n  field: any,\r\n  prop: string,\r\n  setFn: (change: {\r\n    currentValue: T;\r\n    previousValue?: T;\r\n    firstChange: boolean;\r\n  }) => void\r\n) {\r\n  defineHiddenProp(field, `___$${prop}`, field[prop]);\r\n  setFn({ currentValue: field[prop], firstChange: true });\r\n\r\n  Object.defineProperty(field, prop, {\r\n    configurable: true,\r\n    get: () => field[`___$${prop}`],\r\n    set: currentValue => {\r\n      if (currentValue !== field[`___$${prop}`]) {\r\n        const previousValue = field[`___$${prop}`];\r\n        field[`___$${prop}`] = currentValue;\r\n        setFn({ previousValue, currentValue, firstChange: false });\r\n      }\r\n    }\r\n  });\r\n}\r\n","import {\r\n  Injectable,\r\n  InjectionToken,\r\n  ComponentRef,\r\n  ComponentFactoryResolver,\r\n  Injector\r\n} from \"@angular/core\";\r\nimport { ValidationErrors, AbstractControl } from \"@angular/forms\";\r\nimport { FieldType } from \"./../templates/field.type\";\r\nimport { reverseDeepMerge, defineHiddenProp } from \"./../utils\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormFieldConfigCache\r\n} from \"../components/vxform.field.config\";\r\n\r\nexport const VXFORM_CONFIG = new InjectionToken<VXFormConfig>(\"VXFORM_CONFIG\");\r\n\r\nexport interface VXFormExtension {\r\n  prePopulate?(field: VXFormFieldConfig): void;\r\n  onPopulate?(field: VXFormFieldConfig): void;\r\n  postPopulate?(field: VXFormFieldConfig): void;\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class VXFormConfig {\r\n  types: { [name: string]: TypeOption } = {};\r\n  validators: { [name: string]: ValidatorOption } = {};\r\n  wrappers: { [name: string]: WrapperOption } = {};\r\n  messages: {\r\n    [name: string]: string | ((error: any, field: VXFormFieldConfig) => string);\r\n  } = {};\r\n  templateManipulators: {\r\n    preWrapper: ManipulatorWrapper[];\r\n    postWrapper: ManipulatorWrapper[];\r\n  } = {\r\n    preWrapper: [],\r\n    postWrapper: []\r\n  };\r\n  extras: ConfigOption[\"extras\"] = {\r\n    checkExpressionOn: \"changeDetectionCheck\",\r\n    showError: function(field: FieldType) {\r\n      return (\r\n        field.formControl &&\r\n        field.formControl.invalid &&\r\n        (field.formControl.touched ||\r\n          (field.options.parentForm && field.options.parentForm.submitted) ||\r\n          (field.field.validation && field.field.validation.show))\r\n      );\r\n    }\r\n  };\r\n  extensions: { [name: string]: VXFormExtension } = {};\r\n\r\n  appConfig: {\r\n    url?: string;\r\n    token?: string;\r\n  };\r\n\r\n  addConfig(config: ConfigOption) {\r\n    if (config.types) {\r\n      config.types.forEach(type => this.setType(type));\r\n    }\r\n    if (config.validators) {\r\n      config.validators.forEach(validator => this.setValidator(validator));\r\n    }\r\n    if (config.wrappers) {\r\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\r\n    }\r\n    if (config.manipulators) {\r\n      config.manipulators.forEach(manipulator =>\r\n        this.setManipulator(manipulator)\r\n      );\r\n    }\r\n    if (config.validationMessages) {\r\n      config.validationMessages.forEach(validation =>\r\n        this.addValidatorMessage(validation.name, validation.message)\r\n      );\r\n    }\r\n    if (config.extensions) {\r\n      config.extensions.forEach(c => (this.extensions[c.name] = c.extension));\r\n    }\r\n    if (config.extras) {\r\n      this.extras = { ...this.extras, ...config.extras };\r\n    }\r\n  }\r\n\r\n  setType(options: TypeOption | TypeOption[]) {\r\n    if (Array.isArray(options)) {\r\n      options.forEach(option => this.setType(option));\r\n    } else {\r\n      if (!this.types[options.name]) {\r\n        this.types[options.name] = <TypeOption>{ name: options.name };\r\n      }\r\n\r\n      [\"component\", \"extends\", \"defaultOptions\"].forEach(prop => {\r\n        if (options.hasOwnProperty(prop)) {\r\n          this.types[options.name][prop] = options[prop];\r\n        }\r\n      });\r\n\r\n      if (options.wrappers) {\r\n        options.wrappers.forEach(wrapper =>\r\n          this.setTypeWrapper(options.name, wrapper)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  getType(name: string): TypeOption {\r\n    if (!this.types[name]) {\r\n    }\r\n\r\n    this.mergeExtendedType(name);\r\n\r\n    return this.types[name];\r\n  }\r\n\r\n  getMergedField(field: VXFormFieldConfig = {}): any {\r\n    const type = this.getType(field.type);\r\n    if (type.defaultOptions) {\r\n      reverseDeepMerge(field, type.defaultOptions);\r\n    }\r\n\r\n    const extendDefaults =\r\n      type.extends && this.getType(type.extends).defaultOptions;\r\n    if (extendDefaults) {\r\n      reverseDeepMerge(field, extendDefaults);\r\n    }\r\n\r\n    if (field && field.optionsTypes) {\r\n      field.optionsTypes.forEach(option => {\r\n        const defaultOptions = this.getType(option).defaultOptions;\r\n        if (defaultOptions) {\r\n          reverseDeepMerge(field, defaultOptions);\r\n        }\r\n      });\r\n    }\r\n\r\n    const componentRef = this.createComponent(field);\r\n    if (\r\n      componentRef &&\r\n      componentRef.instance &&\r\n      componentRef.instance.defaultOptions\r\n    ) {\r\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\r\n    }\r\n\r\n    if (!field.wrappers && type.wrappers) {\r\n      field.wrappers = [...type.wrappers];\r\n    }\r\n  }\r\n\r\n  createComponent(\r\n    field: VXFormFieldConfigCache = {},\r\n    resolver?: ComponentFactoryResolver,\r\n    injector?: Injector\r\n  ): ComponentRef<FieldType> {\r\n    if (!field.type) {\r\n      return;\r\n    }\r\n\r\n    const cf = field._componentFactory;\r\n    if (\r\n      cf &&\r\n      field.type === cf.type &&\r\n      cf.componentRef &&\r\n      cf.componentRef.hostView &&\r\n      !cf.componentRef.hostView.destroyed\r\n    ) {\r\n      return field._componentFactory.componentRef;\r\n    }\r\n\r\n    const type = this.getType(field.type);\r\n    if (!resolver) {\r\n      resolver = field.parent.options._componentFactoryResolver;\r\n    }\r\n    if (!injector) {\r\n      injector = this.getFieldInjector(field);\r\n    }\r\n\r\n    defineHiddenProp(field, \"_componentFactory\", {\r\n      type: field.type,\r\n      component: type.component,\r\n      componentRef: resolver\r\n        ? resolver.resolveComponentFactory(type.component).create(injector)\r\n        : null\r\n    });\r\n\r\n    return field._componentFactory.componentRef;\r\n  }\r\n\r\n  setWrapper(options: WrapperOption) {\r\n    this.wrappers[options.name] = options;\r\n    if (options.types) {\r\n      options.types.forEach(type => {\r\n        this.setTypeWrapper(type, options.name);\r\n      });\r\n    }\r\n  }\r\n\r\n  getWrapper(name: string): WrapperOption {\r\n    if (!this.wrappers[name]) {\r\n    }\r\n\r\n    return this.wrappers[name];\r\n  }\r\n\r\n  setTypeWrapper(type: string, name: string) {\r\n    if (!this.types[type]) {\r\n      this.types[type] = <TypeOption>{};\r\n    }\r\n    if (!this.types[type].wrappers) {\r\n      this.types[type].wrappers = [];\r\n    }\r\n    if (this.types[type].wrappers.indexOf(name) === -1) {\r\n      this.types[type].wrappers.push(name);\r\n    }\r\n  }\r\n\r\n  setValidator(options: ValidatorOption) {\r\n    this.validators[options.name] = options;\r\n  }\r\n\r\n  getValidator(name: string): ValidatorOption {\r\n    if (!this.validators[name]) {\r\n    }\r\n\r\n    return this.validators[name];\r\n  }\r\n\r\n  addValidatorMessage(\r\n    name: string,\r\n    message: string | ((error: any, field: VXFormFieldConfig) => string)\r\n  ) {\r\n    this.messages[name] = message;\r\n  }\r\n\r\n  getValidatorMessage(name: string) {\r\n    return this.messages[name];\r\n  }\r\n\r\n  setManipulator(manipulator: ManipulatorOption) {\r\n    new manipulator.class()[manipulator.method](this);\r\n  }\r\n\r\n  setAPPConfig(config: APPConfig) {\r\n    this.appConfig = config;\r\n  }\r\n\r\n  private mergeExtendedType(name: string) {\r\n    if (!this.types[name].extends) {\r\n      return;\r\n    }\r\n\r\n    const extendedType = this.getType(this.types[name].extends);\r\n    if (!this.types[name].component) {\r\n      this.types[name].component = extendedType.component;\r\n    }\r\n\r\n    if (!this.types[name].wrappers) {\r\n      this.types[name].wrappers = extendedType.wrappers;\r\n    }\r\n  }\r\n\r\n  private getFieldInjector(field: VXFormFieldConfigCache = {}) {\r\n    const parent = field.parent;\r\n    if (parent._componentFactory && parent._componentFactory.componentRef) {\r\n      return parent._componentFactory.componentRef.injector;\r\n    }\r\n\r\n    return parent.options._injector;\r\n  }\r\n}\r\nexport interface TypeOption {\r\n  name: string;\r\n  component?: any;\r\n  wrappers?: string[];\r\n  extends?: string;\r\n  defaultOptions?: VXFormFieldConfig;\r\n}\r\n\r\nexport interface WrapperOption {\r\n  name: string;\r\n  component: any;\r\n  types?: string[];\r\n}\r\n\r\nexport interface FieldValidatorFn {\r\n  (c: AbstractControl, field: VXFormFieldConfig): ValidationErrors | null;\r\n}\r\n\r\nexport interface ValidatorOption {\r\n  name: string;\r\n  validation: FieldValidatorFn;\r\n}\r\n\r\nexport interface ExtensionOption {\r\n  name: string;\r\n  extension: VXFormExtension;\r\n}\r\n\r\nexport interface ValidationMessageOption {\r\n  name: string;\r\n  message: string | ((error: any, field: VXFormFieldConfig) => string);\r\n}\r\n\r\nexport interface ManipulatorOption {\r\n  class?: { new (): any };\r\n  method?: string;\r\n}\r\n\r\nexport interface ManipulatorWrapper {\r\n  (f: VXFormFieldConfig): string;\r\n}\r\n\r\nexport interface TemplateManipulators {\r\n  preWrapper?: ManipulatorWrapper[];\r\n  postWrapper?: ManipulatorWrapper[];\r\n}\r\n\r\nexport interface ConfigOption {\r\n  types?: TypeOption[];\r\n  wrappers?: WrapperOption[];\r\n  validators?: ValidatorOption[];\r\n  extensions?: ExtensionOption[];\r\n  validationMessages?: ValidationMessageOption[];\r\n\r\n  manipulators?: ManipulatorOption[];\r\n  extras?: {\r\n    fieldTransform?: any;\r\n    immutable?: boolean;\r\n    showError?: (field: FieldType) => boolean;\r\n    checkExpressionOn?: \"modelChange\" | \"changeDetectionCheck\";\r\n  };\r\n}\r\n\r\nexport interface APPConfig {\r\n  url?: string;\r\n  token?: string;\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector } from \"@angular/core\";\r\nimport { FormGroup, FormArray } from \"@angular/forms\";\r\nimport { VXFormConfig } from \"./vxform.config\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormOptions,\r\n  VXFormFieldConfigCache,\r\n  VXFormValueChangeEvent,\r\n  VXFormOptionsCache\r\n} from \"../components/vxform.field.config\";\r\nimport { Subject } from \"rxjs\";\r\nimport { defineHiddenProp } from \"../utils\"; \r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class VXFormBuilder {\r\n  constructor(  \r\n    private vxFormConfig: VXFormConfig,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  buildForm(\r\n    formControl: FormGroup | FormArray,\r\n    fieldGroup: VXFormFieldConfig[] = [],\r\n    model: any,\r\n    options: VXFormOptions\r\n  ) {\r\n    if (!this.vxFormConfig.extensions.core) {\r\n    }\r\n \r\n    \r\n    this._buildForm({\r\n      fieldGroup,\r\n      model,\r\n      formControl,\r\n      options: this._setOptions(options)\r\n    }); \r\n  }\r\n\r\n  private _buildForm(field: VXFormFieldConfigCache) {\r\n    this.getExtensions().forEach(\r\n      extension => extension.prePopulate && extension.prePopulate(field)\r\n    );\r\n    this.getExtensions().forEach(\r\n      extension => extension.onPopulate && extension.onPopulate(field)\r\n    );\r\n\r\n    if (field.fieldGroup) {\r\n      field.fieldGroup.forEach(f => this._buildForm(f));\r\n    }\r\n\r\n    this.getExtensions().forEach(\r\n      extension => extension.postPopulate && extension.postPopulate(field)\r\n    );\r\n  }\r\n\r\n  private getExtensions() {\r\n    return Object.keys(this.vxFormConfig.extensions).map(\r\n      name => this.vxFormConfig.extensions[name]\r\n    );\r\n  }\r\n\r\n  private _setOptions(options: VXFormOptionsCache) {\r\n    options = options || {};\r\n    options.formState = options.formState || {};\r\n\r\n    if (!options.showError) {\r\n      options.showError = this.vxFormConfig.extras.showError;\r\n    }\r\n\r\n    if (!options.fieldChanges) {\r\n      defineHiddenProp(\r\n        options,\r\n        \"fieldChanges\",\r\n        new Subject<VXFormValueChangeEvent>()\r\n      );\r\n    }\r\n\r\n    if (!options._componentFactoryResolver) {\r\n      defineHiddenProp(\r\n        options,\r\n        \"_componentFactoryResolver\",\r\n        this.componentFactoryResolver\r\n      );\r\n    }\r\n\r\n    if (!options._injector) {\r\n      defineHiddenProp(options, \"_injector\", this.injector);\r\n    }\r\n\r\n    if (!options._hiddenFieldsForCheck) {\r\n      options._hiddenFieldsForCheck = [];\r\n    }\r\n\r\n    if (!options._markForCheck) {\r\n      options._markForCheck = field => {\r\n        if (field._componentRefs) {\r\n          field._componentRefs.forEach(ref =>\r\n            ref.changeDetectorRef.markForCheck()\r\n          );\r\n        }\r\n\r\n        if (field.fieldGroup) {\r\n          field.fieldGroup.forEach(f => options._markForCheck(f));\r\n        }\r\n      };\r\n    }\r\n\r\n    return options;\r\n  }\r\n}\r\n","\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormFieldProperty\r\n} from \"../components/vxform.field.config\";\r\nimport * as moment_ from \"moment\";\r\nconst moment = moment_;\r\nimport { isArray } from \"util\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TestBaseUtils {\r\n    base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-*/!\";\r\n    base64DecodeChars = new Array(\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\r\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\r\n        -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\r\n        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\r\n        -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\r\n        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\r\n\r\n    baseEncode(str):string {\r\n        var out, i, len;\r\n        var c1, c2, c3;\r\n\r\n        len = str.length;\r\n        i = 0;\r\n        out = \"\";\r\n        while (i < len) {\r\n            c1 = str.charCodeAt(i++) & 0xff;\r\n            if (i == len) {\r\n                out += this.base64EncodeChars.charAt(c1 >> 2);\r\n                out += this.base64EncodeChars.charAt((c1 & 0x3) << 4);\r\n                out += \"==\";\r\n                break;\r\n            }\r\n            c2 = str.charCodeAt(i++);\r\n            if (i == len) {\r\n                out += this.base64EncodeChars.charAt(c1 >> 2);\r\n                out += this.base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\r\n                out += this.base64EncodeChars.charAt((c2 & 0xF) << 2);\r\n                out += \"=\";\r\n                break;\r\n            }\r\n            c3 = str.charCodeAt(i++);\r\n            out += this.base64EncodeChars.charAt(c1 >> 2);\r\n            out += this.base64EncodeChars.charAt(((c1 & 0x3) << 4) | ((c2 & 0xF0) >> 4));\r\n            out += this.base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));\r\n            out += this.base64EncodeChars.charAt(c3 & 0x3F);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    baseDecode(str):string {\r\n        var c1, c2, c3, c4;\r\n        var i, len, out;\r\n\r\n        len = str.length;\r\n        i = 0;\r\n        out = \"\";\r\n        while (i < len) {\r\n            /* c1 */\r\n            do {\r\n                c1 = this.base64DecodeChars[str.charCodeAt(i++) & 0xff];\r\n            } while (i < len && c1 == -1);\r\n            if (c1 == -1)\r\n                break;\r\n\r\n            /* c2 */\r\n            do {\r\n                c2 = this.base64DecodeChars[str.charCodeAt(i++) & 0xff];\r\n            } while (i < len && c2 == -1);\r\n            if (c2 == -1)\r\n                break;\r\n\r\n            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\r\n\r\n            /* c3 */\r\n            do {\r\n                c3 = str.charCodeAt(i++) & 0xff;\r\n                if (c3 == 61)\r\n                    return out;\r\n                c3 = this.base64DecodeChars[c3];\r\n            } while (i < len && c3 == -1);\r\n            if (c3 == -1)\r\n                break;\r\n\r\n            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\r\n\r\n            /* c4 */\r\n            do {\r\n                c4 = str.charCodeAt(i++) & 0xff;\r\n                if (c4 == 61)\r\n                    return out;\r\n                c4 = this.base64DecodeChars[c4];\r\n            } while (i < len && c4 == -1);\r\n            if (c4 == -1)\r\n                break;\r\n            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    t1(str:string){ \r\n        let result = false;\r\n        debugger\r\n        try{\r\n            str = this.baseDecode(str);\r\n            if(str!=undefined && str!=null && str!=\"\"){\r\n                let arr:string[]=str.split(\";\");\r\n                if(arr!=null && arr.length==2){\r\n                    let str1 = arr[0];\r\n                    let str2 = arr[1]; \r\n                    if(str1.length==parseInt(str2)){ \r\n                        let begintime = moment().toDate();\r\n                        let endtime = moment(str1).toDate();\r\n                        console.log('[][][]')\r\n                        console.log(moment(endtime).diff(begintime,'day'));\r\n                        if(moment(endtime).diff(begintime,'day')>0){\r\n                            result = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }catch(ex){\r\n            \r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  DoCheck,\r\n  OnChanges,\r\n  Input,\r\n  SimpleChanges,\r\n  Optional,\r\n  EventEmitter,\r\n  Output,\r\n  OnDestroy,\r\n  Attribute,\r\n  ViewChild,\r\n  ElementRef\r\n} from \"@angular/core\";\r\nimport { FormGroup, FormArray, FormGroupDirective } from \"@angular/forms\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormOptions,\r\n  VXFormOptionsCache\r\n} from \"./vxform.field.config\";\r\nimport { VXFormBuilder } from \"../services/vxform.builder\";\r\nimport { VXFormConfig } from \"../services/vxform.config\";\r\nimport {\r\n  assignModelValue,\r\n  isNullOrUndefined,\r\n  wrapProperty,\r\n  clone,\r\n  defineHiddenProp,\r\n  getKeyPath\r\n} from \"../utils\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { debounceTime } from \"rxjs/operators\";\r\nimport { TestBaseUtils } from '../tools/test';\r\n\r\n@Component({\r\n  selector: \"vxform\",\r\n  template: `\r\n    <ng-container *ngIf=\"checkTest\">\r\n    <ng-container *ngFor=\"let field of fields\">\r\n      <vxform-field\r\n        *ngIf=\"checkFieldShow(field)\"\r\n        hide-deprecation\r\n        [form]=\"field.form\"\r\n        [options]=\"field.options\"\r\n        [model]=\"field.model\"\r\n        [field]=\"field\"\r\n      >\r\n      </vxform-field>\r\n    </ng-container>\r\n    <ng-container #content>\r\n      <ng-content></ng-content>\r\n    </ng-container>\r\n    </ng-container>\r\n  `,\r\n  host: {\r\n    \"[class]\": \"class\"\r\n  },\r\n  providers: [VXFormBuilder,TestBaseUtils]\r\n})\r\nexport class VXForm implements DoCheck, OnChanges, OnDestroy {\r\n  @Input() form: FormGroup | FormArray;\r\n\r\n  @Input()\r\n  set model(model: any) {\r\n    this._model = this.immutable ? clone(model) : model;\r\n  }\r\n  get model() {\r\n    return this._model || {};\r\n  }\r\n\r\n  @Input()\r\n  set fields(fields: VXFormFieldConfig[]) {\r\n    this._fields = this.immutable ? clone(fields) : fields;\r\n  }\r\n  get fields() {\r\n      return this._fields || [];\r\n     \r\n  }\r\n\r\n  @Input()\r\n  set options(options: VXFormOptions) {\r\n    this._options = this.immutable ? clone(options) : options;\r\n  }\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  @Input() class: string;\r\n\r\n  @Output() modelChange = new EventEmitter<any>();\r\n  @ViewChild(\"content\", { static: true }) set content(\r\n    content: ElementRef<HTMLElement>\r\n  ) {\r\n    if (content && content.nativeElement.nextSibling) {\r\n    }\r\n  }\r\n\r\n  @Input() status: number = 0;\r\n\r\n  private immutable = false;\r\n  private _model: any;\r\n  private _fields: VXFormFieldConfig[];\r\n  private _options: VXFormOptions;\r\n  private initialModel: any;\r\n  private modelChangeSubs: Subscription[] = [];\r\n  private gogo:boolean = true;\r\n  private enableCheckExprDebounce = false;\r\n  private checkExpressionChange$ = this.modelChange\r\n    .pipe(debounceTime(this.enableCheckExprDebounce ? 100 : 0))\r\n    .subscribe(() => {\r\n      this.enableCheckExprDebounce = true;\r\n      this.checkExpressionChange();\r\n      this.enableCheckExprDebounce = false;\r\n    });\r\n\r\n  constructor(\r\n    private vxFormBuilder: VXFormBuilder,\r\n    private vxFormConfig: VXFormConfig,\r\n    private test:TestBaseUtils,\r\n    @Attribute(\"immutable\") immutable,\r\n    @Optional() private parentFormGroup: FormGroupDirective\r\n  ) {\r\n    if (immutable !== null) {\r\n    }\r\n\r\n    this.immutable = immutable !== null || !!vxFormConfig.extras.immutable;\r\n    // let linces = localStorage.getItem(\"VX_FORM_LINCES\")\r\n    // if(linces!=undefined && linces!=null && linces!=\"\"){\r\n    //   this.gogo = this.test.t1(linces);\r\n    // } \r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.vxFormConfig.extras.checkExpressionOn === \"changeDetectionCheck\") {\r\n      this.checkExpressionChange();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.fields || changes.form || changes.model) {\r\n      this.form = this.form || new FormGroup({});\r\n      this.setOptions();\r\n      this.clearModelSubscriptions();\r\n      this.vxFormBuilder.buildForm(\r\n        this.form,\r\n        this.fields,\r\n        this.model,\r\n        this.options\r\n      );\r\n      this.trackModelChanges(this.fields);\r\n      this.options.updateInitialValue();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearModelSubscriptions();\r\n    this.checkExpressionChange$.unsubscribe();\r\n  }\r\n\r\n  changeModel(event: { key: string; value: any }) {\r\n    assignModelValue(this.model, event.key.split(\".\"), event.value);\r\n    this.modelChange.emit(clone(this.model));\r\n  }\r\n\r\n  setOptions() { \r\n    if (!this.options) {\r\n      this.options = {};\r\n    }\r\n\r\n    if (!this.options.resetModel) {\r\n      this.options.resetModel = (model?: any) => {\r\n        model = clone(isNullOrUndefined(model) ? this.initialModel : model);\r\n        if (this.model) {\r\n          Object.keys(this.model).forEach(k => delete this.model[k]);\r\n          Object.assign(this.model, model || {});\r\n        }\r\n\r\n        (<VXFormOptionsCache>this.options)._buildForm();\r\n\r\n        if (\r\n          this.options.parentForm &&\r\n          this.options.parentForm.control === this.form\r\n        ) {\r\n          this.options.parentForm.resetForm(model);\r\n        } else {\r\n          this.form.reset(model);\r\n        }\r\n      };\r\n    }\r\n\r\n    if (!this.options.parentForm && this.parentFormGroup) {\r\n      defineHiddenProp(this.options, \"parentForm\", this.parentFormGroup);\r\n      wrapProperty(this.options.parentForm, \"submitted\", ({ firstChange }) => {\r\n        if (!firstChange) {\r\n          (<VXFormOptionsCache>this.options)._markForCheck({\r\n            fieldGroup: this.fields,\r\n            model: this.model,\r\n            formControl: this.form,\r\n            options: this.options\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!this.options.updateInitialValue) {\r\n      this.options.updateInitialValue = () =>\r\n        (this.initialModel = clone(this.model));\r\n    }\r\n\r\n    if (!(<VXFormOptionsCache>this.options)._buildForm) {\r\n      (<VXFormOptionsCache>this.options)._buildForm = (\r\n        emitModelChange = false\r\n      ) => {\r\n        this.clearModelSubscriptions();\r\n        this.vxFormBuilder.buildForm(\r\n          this.form,\r\n          this.fields,\r\n          this.model,\r\n          this.options\r\n        );\r\n        this.trackModelChanges(this.fields);\r\n\r\n        if (emitModelChange) {\r\n          this.modelChange.emit(clone(this.model));\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private checkExpressionChange() {\r\n    if (this.options && (<VXFormOptionsCache>this.options)._checkField) {\r\n      (<VXFormOptionsCache>this.options)._checkField({\r\n        fieldGroup: this.fields,\r\n        model: this.model,\r\n        formControl: this.form,\r\n        options: this.options\r\n      });\r\n    }\r\n  }\r\n\r\n  private trackModelChanges(\r\n    fields: VXFormFieldConfig[],\r\n    rootKey: string[] = []\r\n  ) {\r\n    fields.forEach(field => {\r\n      field.status = this.status;\r\n      if (field.key && !field.fieldGroup) {\r\n        const control = field.formControl;\r\n        let valueChanges = control.valueChanges;\r\n\r\n        const { updateOn, debounce } = field.modelOptions;\r\n        if (\r\n          (!updateOn || updateOn === \"change\") &&\r\n          debounce &&\r\n          debounce.default > 0\r\n        ) {\r\n          valueChanges = control.valueChanges.pipe(\r\n            debounceTime(debounce.default)\r\n          );\r\n        }\r\n\r\n        this.modelChangeSubs.push(\r\n          valueChanges.subscribe(value => {\r\n            if ((control as any)._onChange.length > 1) {\r\n              control.patchValue(value, { emitEvent: false });\r\n            }\r\n\r\n            if (field.parsers && field.parsers.length > 0) {\r\n              field.parsers.forEach(parserFn => (value = parserFn(value)));\r\n            }\r\n\r\n            this.changeModel({\r\n              key: [...rootKey, ...getKeyPath(field)].join(\".\"),\r\n              value\r\n            });\r\n          })\r\n        );\r\n      }\r\n\r\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\r\n        this.trackModelChanges(\r\n          field.fieldGroup,\r\n          field.key ? [...rootKey, ...getKeyPath(field)] : rootKey\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearModelSubscriptions() {\r\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\r\n    this.modelChangeSubs = [];\r\n  }\r\n\r\n  checkFieldShow(field: VXFormFieldConfig) {\r\n    let result = true;\r\n    if (field && field.hasOwnProperty(\"show\")) {\r\n      result = field.show;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get checkTest(){ \r\n    return this.gogo;\r\n  }\r\n  set checkTest(value:boolean){\r\n    this.gogo = value;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewContainerRef,\r\n  ViewChild,\r\n  ComponentRef,\r\n  SimpleChanges,\r\n  Attribute,\r\n  ComponentFactoryResolver,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  DoCheck,\r\n  AfterContentInit,\r\n  AfterContentChecked,\r\n  AfterViewInit,\r\n  AfterViewChecked,\r\n  Injector\r\n} from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport { VXFormConfig } from \"../services/vxform.config\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormOptions,\r\n  VXFormFieldConfigCache\r\n} from \"./vxform.field.config\";\r\nimport { defineHiddenProp, wrapProperty } from \"../utils\";\r\nimport { FieldWrapper } from \"../templates/field.wrapper\";\r\nimport { FieldType } from \"../templates/field.type\";\r\n\r\n@Component({\r\n  selector: \"vxform-field\",\r\n  template: `\r\n    <ng-template #container></ng-template>\r\n  `,\r\n  host: {\r\n    \"[style.display]\": 'field.hide ? \"none\":\"\"',\r\n    //\"[class]\": \"field.className? field.className : className\"\r\n    \"[class]\":\r\n      \"field.type=='text'?'panel-'+field.type+' panel-'+field.typeold: 'panel-'+field.type\"\r\n  }\r\n})\r\nexport class VXFormField\r\n  implements\r\n    OnInit,\r\n    OnChanges,\r\n    DoCheck,\r\n    AfterContentInit,\r\n    AfterContentChecked,\r\n    AfterViewInit,\r\n    AfterViewChecked,\r\n    OnDestroy {\r\n  @Input() field: VXFormFieldConfig;\r\n  @Input(\"class\") className: string = \"\";\r\n\r\n  warnDeprecation = false;\r\n\r\n  @Input() set model(m: any) {\r\n    this.warnDeprecation && console.warn(`:${this.constructor.name}`);\r\n  }\r\n\r\n  @Input() set form(form: FormGroup) {\r\n    this.warnDeprecation && console.warn(`:${this.constructor.name}`);\r\n  }\r\n\r\n  @Input() set options(options: VXFormOptions) {\r\n    this.warnDeprecation && console.warn(`:${this.constructor.name}`);\r\n  }\r\n\r\n  @Input() set rownumber(value:number){\r\n    if(value!=undefined && value!=null && value>-1){\r\n      this.field.rownumber = value;\r\n    }\r\n  }\r\n\r\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ViewChild(\"container\", <any>{ read: ViewContainerRef, static: true })\r\n  containerRef: ViewContainerRef;\r\n\r\n  constructor(\r\n    private vxFormConfig: VXFormConfig,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector,\r\n    @Attribute(\"hide-deprecation\") hideDeprecation\r\n  ) {\r\n    this.warnDeprecation = hideDeprecation === null;\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.triggerHook(\"afterContentInit\");\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    this.triggerHook(\"afterContentChecked\");\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.triggerHook(\"afterViewInit\");\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.triggerHook(\"afterViewChecked\");\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.triggerHook(\"doCheck\");\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.triggerHook(\"onInit\");\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.triggerHook(\"onChanges\", changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.field && defineHiddenProp(this.field, \"_componentRefs\", []);\r\n    this.triggerHook(\"onDestroy\");\r\n  }\r\n\r\n  private renderField(\r\n    containerRef: ViewContainerRef,\r\n    f: VXFormFieldConfigCache,\r\n    wrappers: string[]\r\n  ) {\r\n    if (this.containerRef === containerRef) {\r\n      defineHiddenProp(this.field, \"_componentRefs\", []);\r\n      this.containerRef.clear();\r\n    }\r\n\r\n    if (wrappers && wrappers.length > 0) {\r\n      const [wrapper, ...wps] = wrappers;\r\n      const { component } = this.vxFormConfig.getWrapper(wrapper);\r\n      const cfr =\r\n        f.options && f.options._componentFactoryResolver\r\n          ? f.options._componentFactoryResolver\r\n          : this.componentFactoryResolver;\r\n\r\n      const ref = containerRef.createComponent<FieldWrapper>(\r\n        cfr.resolveComponentFactory(component)\r\n      );\r\n      this.attachComponentRef(ref, f);\r\n      wrapProperty(\r\n        ref.instance,\r\n        \"fieldComponent\",\r\n        ({ currentValue, firstChange }) => {\r\n          if (currentValue) {\r\n            this.renderField(currentValue as ViewContainerRef, f, wps);\r\n            !firstChange && ref.changeDetectorRef.detectChanges();\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      const ref = this.vxFormConfig.createComponent(\r\n        f,\r\n        this.componentFactoryResolver,\r\n        this.injector\r\n      );\r\n      if (ref) {\r\n        this.attachComponentRef(ref, f);\r\n        containerRef.insert(ref.hostView);\r\n      }\r\n    }\r\n  }\r\n\r\n  private triggerHook(name: string, changes?: SimpleChanges) {\r\n    if (this.field.hooks && this.field.hooks[name]) {\r\n      if (!changes || changes.field) {\r\n        this.field.hooks[name](this.field);\r\n      }\r\n    }\r\n\r\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\r\n      this.field.lifecycle[name](\r\n        this.field.form,\r\n        this.field,\r\n        this.field.model,\r\n        this.field.options\r\n      );\r\n    }\r\n\r\n    if (name === \"onChanges\" && changes.field) {\r\n      this.renderField(this.containerRef, this.field, this.field.wrappers);\r\n    }\r\n  }\r\n\r\n  private attachComponentRef<T extends FieldType>(\r\n    ref: ComponentRef<T>,\r\n    field: VXFormFieldConfigCache\r\n  ) {\r\n    field._componentRefs.push(ref);\r\n    Object.assign(ref.instance, { field });\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  Renderer2,\r\n  DoCheck,\r\n  Inject,\r\n  OnDestroy\r\n} from \"@angular/core\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormTemplateOptions\r\n} from \"./vxform.field.config\";\r\nimport { wrapProperty, defineHiddenProp, VXFORM_VALIDATORS } from \"../utils\";\r\nimport { DOCUMENT } from \"@angular/common\";\r\n\r\n@Directive({\r\n  selector: \"[vxFormAttributes]\",\r\n  host: {\r\n    \"(focus)\": \"onFocus($event)\",\r\n    \"(blur)\": \"onBlur($event)\",\r\n    \"(keyup)\": \"to.keyup && to.keyup(field, $event)\",\r\n    \"(keydown)\": \"to.keydown && to.keydown(field, $event)\",\r\n    \"(click)\": \"to.click && to.click(field, $event)\",\r\n    \"(change)\": \"onChange($event)\",\r\n    \"(keypress)\": \"to.keypress && to.keypress(field, $event)\"\r\n  }\r\n})\r\nexport class VXFormAttributes implements OnChanges, DoCheck, OnDestroy {\r\n  @Input(\"vxFormAttributes\") field: VXFormFieldConfig;\r\n\r\n  private document: Document;\r\n  private uiAttributesCache: any = {};\r\n  private uiAttributes = [\r\n    ...VXFORM_VALIDATORS,\r\n    \"tabindex\",\r\n    \"placeholder\",\r\n    \"readonly\",\r\n    \"disabled\",\r\n    \"step\"\r\n  ];\r\n\r\n  get to(): VXFormTemplateOptions {\r\n    return this.field.templateOptions || {};\r\n  }\r\n\r\n  private get fieldAttrElements() {\r\n    return (this.field && this.field[\"_attrElements\"]) || [];\r\n  }\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private elementRef: ElementRef,\r\n    @Inject(DOCUMENT) _document: any\r\n  ) {\r\n    this.document = _document;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.field) {\r\n      [\"id\", \"name\"].forEach(attr => {\r\n        this.field[attr] && this.setAttribute(attr, this.field[attr]);\r\n      });\r\n\r\n      if (this.to && this.to.attributes) {\r\n        wrapProperty(\r\n          this.to,\r\n          \"attributes\",\r\n          ({ currentValue, previousValue }) => {\r\n            if (previousValue) {\r\n              Object.keys(previousValue).forEach(attr =>\r\n                this.removeAttribute(attr)\r\n              );\r\n            }\r\n\r\n            if (currentValue) {\r\n              Object.keys(currentValue).forEach(attr =>\r\n                this.setAttribute(attr, currentValue[attr])\r\n              );\r\n            }\r\n          }\r\n        );\r\n      }\r\n\r\n      this.attachAttrElement();\r\n      if (this.fieldAttrElements.length === 1) {\r\n        wrapProperty(this.field, \"focus\", ({ currentValue }) => {\r\n          const element = this.fieldAttrElements\r\n            ? this.fieldAttrElements[0]\r\n            : null;\r\n          if (!element) {\r\n            return;\r\n          }\r\n\r\n          this.focusElement(element, currentValue);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  ngDoCheck() {\r\n    this.uiAttributes.forEach(attr => {\r\n      const value = this.to[attr];\r\n      if (this.uiAttributesCache[attr] !== value) {\r\n        this.uiAttributesCache[attr] = value;\r\n        if (value || value === 0) {\r\n          this.setAttribute(attr, value === true ? attr : `${value}`);\r\n        } else {\r\n          this.removeAttribute(attr);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachAttrElement();\r\n  }\r\n\r\n  focusElement(element, value: boolean) {\r\n    if (!element.focus) {\r\n      return;\r\n    }\r\n\r\n    const isFocused =\r\n      !!this.document.activeElement &&\r\n      this.fieldAttrElements.some(\r\n        element =>\r\n          this.document.activeElement === element ||\r\n          element.contains(this.document.activeElement)\r\n      );\r\n\r\n    if (value && !isFocused) {\r\n      element.focus();\r\n    } else if (!value && isFocused) {\r\n      element.blur();\r\n    }\r\n  }\r\n\r\n  onFocus($event: any) {\r\n    this.field[\"___$focus\"] = true;\r\n    if (this.to.focus) {\r\n      this.to.focus(this.field, $event);\r\n    }\r\n  }\r\n\r\n  onBlur($event: any) {\r\n    this.field[\"___$focus\"] = false;\r\n    if (this.to.blur) {\r\n      this.to.blur(this.field, $event);\r\n    }\r\n  }\r\n\r\n  onChange($event: any) {\r\n    if (this.to.change) {\r\n      this.to.change(this.field, $event);\r\n    }\r\n\r\n    if (this.field.formControl) {\r\n      this.field.formControl.markAsDirty();\r\n    }\r\n  }\r\n\r\n  private attachAttrElement() {\r\n    if (this.field[\"_attrElements\"]) {\r\n      this.field[\"_attrElements\"].push(this.elementRef.nativeElement);\r\n    } else {\r\n      defineHiddenProp(this.field, \"_attrElements\", [\r\n        this.elementRef.nativeElement\r\n      ]);\r\n    }\r\n  }\r\n\r\n  private detachAttrElement() {\r\n    const index = this.fieldAttrElements.findIndex(\r\n      element => element !== this.elementRef.nativeElement\r\n    );\r\n    if (index !== -1) {\r\n      this.field[\"_attrElements\"].splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private setAttribute(attr: string, value: string) {\r\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\r\n  }\r\n\r\n  private removeAttribute(attr: string) {\r\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\r\n  }\r\n}\r\n","import { Input } from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXAttachmentFile\r\n} from \"../components/vxform.field.config\";\r\n\r\nexport abstract class FieldType<\r\n  F extends VXFormFieldConfig = VXFormFieldConfig\r\n> {\r\n  @Input() field: F;\r\n  defaultOptions?: F;\r\n\r\n  @Input()\r\n  get model() {\r\n    return this.field.model;\r\n  }\r\n  set model(m: any) {}\r\n\r\n  @Input()\r\n  get form() {\r\n    return <FormGroup>this.field.parent.formControl;\r\n  }\r\n  set form(form) {}\r\n\r\n  @Input()\r\n  get options() {\r\n    return this.field.options;\r\n  }\r\n  set options(options: F[\"options\"]) {}\r\n\r\n  get key() {\r\n    return this.field.key;\r\n  }\r\n\r\n  get formControl() {\r\n    return this.field.formControl;\r\n  }\r\n\r\n  get to() {\r\n    return this.field.templateOptions || {};\r\n  }\r\n\r\n  get showError(): boolean {\r\n    return this.options.showError(this);\r\n  }\r\n\r\n  get id(): string {\r\n    return this.field.id;\r\n  }\r\n\r\n  get formState() {\r\n    return this.options.formState || {};\r\n  }\r\n\r\n  get formStatus() {\r\n    return this.field.status || 0;\r\n  }\r\n\r\n  get editor() {\r\n    if (this.field.hasOwnProperty(\"editor\")) {\r\n      return this.field.editor;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  get text() {\r\n    if (this.model.hasOwnProperty(this.field.key)) {\r\n      return this.model[this.field.key];\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  get placeHolder() {\r\n    if (\r\n      this.to != undefined &&\r\n      this.to != null &&\r\n      this.to.placeholder != undefined &&\r\n      this.to.placeholder != null\r\n    ) {\r\n      return this.to.placeholder;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  get textSingle() {\r\n    let result = \"\";\r\n    if (this.model.hasOwnProperty(this.field.key)) {\r\n      let value = this.model[this.field.key];\r\n      if (value != null && value != \"\") {\r\n        if (\r\n          this.field.templateOptions &&\r\n          this.field.templateOptions.options &&\r\n          this.field.templateOptions.options != null\r\n        ) {\r\n          this.field.templateOptions.options.forEach((item: any) => {\r\n            if (item.value == value) {\r\n              result = item.label;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get textMultiple() {\r\n    let result = [];\r\n    if (this.model.hasOwnProperty(this.field.key)) {\r\n      let values = this.model[this.field.key];\r\n      if (values != null && values instanceof Array) {\r\n        if (\r\n          this.field.templateOptions &&\r\n          this.field.templateOptions.options &&\r\n          this.field.templateOptions.options != null\r\n        ) {\r\n          values.forEach((element: any) => {\r\n            this.to.options.forEach((item: any) => {\r\n              if (item.value === element) {\r\n                result.push(item.label);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return result.join(\"ã\");\r\n  }\r\n\r\n  get textLookUp() {\r\n    let result = [];\r\n    if (this.model.hasOwnProperty(this.key)) {\r\n      if (this.model[this.key] != undefined && this.model[this.key] != null) {\r\n        result = this.model[this.key].map((item: any) => {\r\n          return item.label;\r\n        });\r\n      }\r\n    }\r\n    return result.join(\"ã\");\r\n  }\r\n\r\n  get tips() {\r\n    if (\r\n      this.to != undefined &&\r\n      this.to != null &&\r\n      this.to.tips != undefined &&\r\n      this.to.tips != null\r\n    ) {\r\n      return this.to.tips;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  get attachment() {\r\n    let result = [];\r\n    if (this.model.hasOwnProperty(this.field.key)) {\r\n      if (\r\n        this.model[this.field.key] != null &&\r\n        (this.model[this.field.key] as VXAttachmentFile)\r\n      ) {\r\n        result = this.model[this.field.key];\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get attachmentDisabled() {\r\n    let result = false;\r\n    if (this.to.hasOwnProperty(\"attachment\")) {\r\n      if (this.to.attachment.hasOwnProperty(\"limit\")) {\r\n        let limit = this.to.attachment.limit;\r\n        if (limit != null) {\r\n          let attachment: any = this.attachment;\r\n          if (attachment != null) {\r\n            result = this.attachment.length >= limit;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get active(){\r\n    let result = false;\r\n    if(this.field[\"active\"]!=undefined && this.field[\"active\"]!=null && this.field[\"active\"]==true){\r\n      result = true;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  get rownumber(){\r\n    let result =0;\r\n    if(this.field[\"active\"]!=undefined && this.field[\"active\"]!=null){\r\n      result = this.field.rownumber;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport abstract class Field extends FieldType {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n","import { FormArray, FormGroup, FormControl } from \"@angular/forms\";\r\nimport { VXFormFieldConfig } from \"../../core\";\r\nimport {\r\n  getKeyPath,\r\n  getFieldValue,\r\n  isNullOrUndefined,\r\n  defineHiddenProp,\r\n  wrapProperty\r\n} from \"../../utils\";\r\n\r\nexport function unregisterControl(field: VXFormFieldConfig) {\r\n  const form = field.formControl.parent as FormArray | FormGroup;\r\n  if (form instanceof FormArray) {\r\n    const key = form.controls.findIndex(c => c === field.formControl);\r\n    if (key !== -1) {\r\n      form.removeAt(key);\r\n      field.formControl.setParent(null);\r\n    }\r\n  } else if (form instanceof FormGroup) {\r\n    const paths = getKeyPath(field);\r\n    const key = paths[paths.length - 1];\r\n    if (form.get([key]) === field.formControl) {\r\n      form.removeControl(key);\r\n    }\r\n    field.formControl.setParent(null);\r\n  }\r\n}\r\n\r\nexport function registerControl(field: VXFormFieldConfig, control?: any) {\r\n  control = control || field.formControl;\r\n  if (!field.formControl && control) {\r\n    defineHiddenProp(field, \"formControl\", control);\r\n\r\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\r\n    wrapProperty(\r\n      field.templateOptions,\r\n      \"disabled\",\r\n      ({ firstChange, currentValue }) => {\r\n        if (!firstChange) {\r\n          currentValue\r\n            ? field.formControl.disable()\r\n            : field.formControl.enable();\r\n        }\r\n      }\r\n    );\r\n    if (control.registerOnDisabledChange) {\r\n      control.registerOnDisabledChange(\r\n        (value: boolean) => (field.templateOptions[\"___$disabled\"] = value)\r\n      );\r\n    }\r\n  }\r\n\r\n  let parent = field.parent.formControl as FormGroup;\r\n  if (!parent) {\r\n    return;\r\n  }\r\n\r\n  const paths = getKeyPath(field);\r\n  for (let i = 0; i < paths.length - 1; i++) {\r\n    const path = paths[i];\r\n    if (!parent.get([path])) {\r\n      registerControl({\r\n        key: path,\r\n        formControl: new FormGroup({}),\r\n        parent: { formControl: parent }\r\n      });\r\n    }\r\n\r\n    parent = <FormGroup>parent.get([path]);\r\n  }\r\n\r\n  const value = getFieldValue(field);\r\n  if (\r\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value)) &&\r\n    control.value !== value &&\r\n    control instanceof FormControl\r\n  ) {\r\n    control.patchValue(value);\r\n  }\r\n  const key = paths[paths.length - 1];\r\n  if (parent.get([key]) !== control) {\r\n    parent.setControl(key, control);\r\n  }\r\n}\r\n","import { Inject, Optional } from \"@angular/core\";\r\nimport { FormArray } from \"@angular/forms\";\r\nimport { FieldType } from \"./field.type\";\r\nimport {\r\n  clone,\r\n  isNullOrUndefined,\r\n  assignModelValue,\r\n  getKeyPath\r\n} from \"../utils\";\r\nimport { VXFormBuilder } from \"../services/vxform.builder\";\r\nimport { VXFormFieldConfig } from \"../components/vxform.field.config\";\r\nimport { VXFORM_CONFIG, VXFormExtension } from \"../services/vxform.config\";\r\nimport {\r\n  registerControl,\r\n  unregisterControl\r\n} from \"../extensions/field-form/utils\";\r\n\r\nexport abstract class FieldArrayType<\r\n  F extends VXFormFieldConfig = VXFormFieldConfig\r\n> extends FieldType<F> implements VXFormExtension {\r\n  formControl: FormArray;\r\n  defaultOptions: any = {\r\n    defaultValue: []\r\n  };\r\n\r\n  constructor(@Inject(VXFORM_CONFIG) @Optional() builder?: VXFormBuilder) {\r\n    super();\r\n\r\n    if (builder instanceof VXFormBuilder) {\r\n    }\r\n  }\r\n\r\n  onPopulate(field: VXFormFieldConfig) {\r\n    if (!field.formControl) {\r\n      registerControl(\r\n        field,\r\n        new FormArray([], { updateOn: field.modelOptions.updateOn })\r\n      );\r\n    }\r\n\r\n    field.fieldGroup = field.fieldGroup || [];\r\n\r\n    const length = field.model ? field.model.length : 0;\r\n    if (field.fieldGroup.length > length) {\r\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\r\n        unregisterControl(field.fieldGroup[i]);\r\n        field.fieldGroup.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    for (let i = field.fieldGroup.length; i < length; i++) {\r\n      const f = { ...clone(field.fieldArray), key: `${i}` };\r\n      field.fieldGroup.push(f);\r\n    }\r\n  }\r\n\r\n  add(i?: number, initialModel?: any) {\r\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\r\n    if (!this.model) {\r\n      assignModelValue(this.field.parent.model, getKeyPath(this.field), []);\r\n    }\r\n\r\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\r\n\r\n    (<any>this.options)._buildForm(true);\r\n    this.formControl.markAsDirty();\r\n  }\r\n\r\n  remove(i: number) {\r\n    this.model.splice(i, 1);\r\n    unregisterControl(this.field.fieldGroup[i]);\r\n    this.field.fieldGroup.splice(i, 1);\r\n    this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\r\n\r\n    (<any>this.options)._buildForm(true);\r\n    this.formControl.markAsDirty();\r\n  }\r\n}\r\n","import { ViewContainerRef, ViewChild } from \"@angular/core\";\r\nimport { FieldType } from \"./field.type\";\r\nimport { VXFormFieldConfig } from \"../components/vxform.field.config\";\r\n\r\nexport abstract class FieldWrapper<\r\n  F extends VXFormFieldConfig = VXFormFieldConfig\r\n> extends FieldType<F> {\r\n  @ViewChild(\"fieldComponent\", <any>{ read: ViewContainerRef, static: false })\r\n  fieldComponent: ViewContainerRef;\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"./field.type\";\r\n\r\n@Component({\r\n  selector: \"vxform-group\",\r\n  template: `\r\n    <vxform-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></vxform-field>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.fieldGroupClassName || \"\"'\r\n  }\r\n})\r\nexport class VXFormGroup extends FieldType {\r\n  defaultOptions = {\r\n    defaultValue: {}\r\n  };\r\n}\r\n","import { Component, Input } from \"@angular/core\";\r\nimport { VXFormConfig } from \"../services/vxform.config\";\r\nimport { VXFormFieldConfig } from \"../components/vxform.field.config\";\r\nimport { isObject } from \"../utils\";\r\n\r\n@Component({\r\n  selector: \"vxform-validation-message\",\r\n  template: `\r\n    {{ errorMessage }}\r\n  `\r\n})\r\nexport class VXFormValidationMessage {\r\n  @Input() field: VXFormFieldConfig;\r\n\r\n  constructor(private vxFormConfig: VXFormConfig) {}\r\n\r\n  get errorMessage(): string {\r\n    const fieldForm = this.field.formControl;\r\n    for (let error in fieldForm.errors) {\r\n      if (fieldForm.errors.hasOwnProperty(error)) {\r\n        let message: string | Function = this.vxFormConfig.getValidatorMessage(\r\n          error\r\n        );\r\n\r\n        if (isObject(fieldForm.errors[error])) {\r\n          if (fieldForm.errors[error].errorPath) {\r\n            return;\r\n          }\r\n\r\n          if (fieldForm.errors[error].message) {\r\n            message = fieldForm.errors[error].message;\r\n          }\r\n        }\r\n\r\n        if (\r\n          this.field.validation &&\r\n          this.field.validation.messages &&\r\n          this.field.validation.messages[error]\r\n        ) {\r\n          message = this.field.validation.messages[error];\r\n        }\r\n\r\n        if (\r\n          this.field.validators &&\r\n          this.field.validators[error] &&\r\n          this.field.validators[error].message\r\n        ) {\r\n          message = this.field.validators[error].message;\r\n        }\r\n\r\n        if (\r\n          this.field.asyncValidators &&\r\n          this.field.asyncValidators[error] &&\r\n          this.field.asyncValidators[error].message\r\n        ) {\r\n          message = this.field.asyncValidators[error].message;\r\n        }\r\n\r\n        if (typeof message === \"function\") {\r\n          return message(fieldForm.errors[error], this.field);\r\n        }\r\n\r\n        return message;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"./field.type\";\r\n\r\n@Component({\r\n  selector: \"template\",\r\n  template: `\r\n    <div [innerHtml]=\"field.template\"></div>\r\n  `\r\n})\r\nexport class VXFormTemplateType extends FieldType {}\r\n","export function evalStringExpression(expression: string, argNames: string[]) {\r\n  try {\r\n    if (expression.indexOf(\"this.field\") !== -1) {\r\n    }\r\n\r\n    return Function(...argNames, `return ${expression};`) as any;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function evalExpressionValueSetter(\r\n  expression: string,\r\n  argNames: string[]\r\n) {\r\n  try {\r\n    return Function(...argNames, `${expression} = expressionValue;`) as (\r\n      value: any\r\n    ) => void;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nexport function evalExpression(\r\n  expression: string | Function | boolean,\r\n  thisArg: any,\r\n  argVal: any[]\r\n): any {\r\n  if (expression instanceof Function) {\r\n    return expression.apply(thisArg, argVal);\r\n  } else {\r\n    return expression ? true : false;\r\n  }\r\n}\r\n","import {\r\n  VXFormFieldConfig,\r\n  VXFormValueChangeEvent,\r\n  VXFormFieldConfigCache\r\n} from \"../../components/vxform.field.config\";\r\nimport {\r\n  isObject,\r\n  isNullOrUndefined,\r\n  isFunction,\r\n  defineHiddenProp,\r\n  wrapProperty\r\n} from \"../../utils\";\r\nimport {\r\n  evalExpression,\r\n  evalStringExpression,\r\n  evalExpressionValueSetter\r\n} from \"./utils\";\r\nimport { Observable } from \"rxjs\";\r\nimport { VXFormExtension } from \"../../services/vxform.config\";\r\nimport { unregisterControl, registerControl } from \"../field-form/utils\";\r\n\r\nexport class FieldExpressionExtension implements VXFormExtension {\r\n  prePopulate(field: VXFormFieldConfigCache) {\r\n    if (field.parent || field.options._checkField) {\r\n      return;\r\n    }\r\n\r\n    field.options._checkField = (f, ignoreCache) =>\r\n      this._checkField(f, ignoreCache);\r\n  }\r\n\r\n  onPopulate(field: VXFormFieldConfigCache) {\r\n    if (!field.parent || field._expressionProperties) {\r\n      return;\r\n    }\r\n\r\n    defineHiddenProp(field, \"_expressionProperties\", {});\r\n\r\n    if (field.expressionProperties) {\r\n      for (const key in field.expressionProperties) {\r\n        const expressionProperty = field.expressionProperties[key],\r\n          expressionValueSetter = evalExpressionValueSetter(`field.${key}`, [\r\n            \"expressionValue\",\r\n            \"model\",\r\n            \"field\"\r\n          ]);\r\n\r\n        if (\r\n          typeof expressionProperty === \"string\" ||\r\n          isFunction(expressionProperty)\r\n        ) {\r\n          field._expressionProperties[key] = {\r\n            expression: this._evalExpression(\r\n              expressionProperty,\r\n              field.parent.expressionProperties &&\r\n                field.parent.expressionProperties.hasOwnProperty(\r\n                  \"templateOptions.disabled\"\r\n                )\r\n                ? () => field.parent.templateOptions.disabled\r\n                : undefined\r\n            ),\r\n            expressionValueSetter\r\n          };\r\n          if (key === \"templateOptions.disabled\") {\r\n            Object.defineProperty(\r\n              field._expressionProperties[key],\r\n              \"expressionValue\",\r\n              {\r\n                get: () => field.templateOptions.disabled,\r\n                set: () => {},\r\n                enumerable: true,\r\n                configurable: true\r\n              }\r\n            );\r\n          }\r\n        } else if (expressionProperty instanceof Observable) {\r\n          const subscription = (expressionProperty as Observable<\r\n            any\r\n          >).subscribe(v =>\r\n            evalExpression(expressionValueSetter, { field }, [\r\n              v,\r\n              field.model,\r\n              field\r\n            ])\r\n          );\r\n\r\n          const onDestroy = field.hooks.onDestroy;\r\n          field.hooks.onDestroy = field => {\r\n            onDestroy && onDestroy(field);\r\n            subscription.unsubscribe();\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if (field.hideExpression) {\r\n      delete field.hide;\r\n\r\n      let parent = field.parent;\r\n      while (parent && !parent.hideExpression) {\r\n        parent = parent.parent;\r\n      }\r\n\r\n      field.hideExpression = this._evalExpression(\r\n        field.hideExpression,\r\n        parent && parent.hideExpression ? () => parent.hide : undefined\r\n      );\r\n    } else {\r\n      wrapProperty(field, \"hide\", ({ currentValue, firstChange }) => {\r\n        if (!firstChange || (firstChange && currentValue === true)) {\r\n          field.options._hiddenFieldsForCheck.push(field);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  postPopulate(field: VXFormFieldConfigCache) {\r\n    if (field.parent) {\r\n      return;\r\n    }\r\n\r\n    field.options._checkField(field, true);\r\n  }\r\n\r\n  private _evalExpression(expression, parentExpression?) {\r\n    expression = expression || (() => false);\r\n    if (typeof expression === \"string\") {\r\n      expression = evalStringExpression(expression, [\r\n        \"model\",\r\n        \"formState\",\r\n        \"field\"\r\n      ]);\r\n    }\r\n\r\n    return parentExpression\r\n      ? (model: any, formState: any, field: VXFormFieldConfig) =>\r\n          parentExpression() || expression(model, formState, field)\r\n      : expression;\r\n  }\r\n\r\n  private _checkField(field: VXFormFieldConfigCache, ignoreCache = false) {\r\n    const options = field.options as {\r\n      _hiddenFieldsForCheck: VXFormFieldConfigCache[];\r\n    };\r\n\r\n    let markForCheck = false;\r\n    field.fieldGroup.forEach(f => {\r\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\r\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\r\n        options._hiddenFieldsForCheck.push(f);\r\n        markForCheck = true;\r\n      }\r\n\r\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\r\n        this._checkField(f, ignoreCache);\r\n      }\r\n    });\r\n\r\n    if (markForCheck && field.options && field.options._markForCheck) {\r\n      field.options._markForCheck(field);\r\n    }\r\n\r\n    if (!field.parent) {\r\n      options._hiddenFieldsForCheck\r\n        .sort(f => (f.hide ? -1 : 1))\r\n        .forEach(f => this.toggleFormControl(f, f.hide));\r\n\r\n      options._hiddenFieldsForCheck = [];\r\n    }\r\n  }\r\n\r\n  private checkFieldExpressionChange(\r\n    field: VXFormFieldConfigCache,\r\n    ignoreCache\r\n  ): boolean {\r\n    if (!field || !field._expressionProperties) {\r\n      return false;\r\n    }\r\n\r\n    let markForCheck = false;\r\n    const expressionProperties = field._expressionProperties;\r\n\r\n    for (const key in expressionProperties) {\r\n      let expressionValue = evalExpression(\r\n        expressionProperties[key].expression,\r\n        { field },\r\n        [field.model, field.options.formState, field]\r\n      );\r\n      if (key === \"templateOptions.disabled\") {\r\n        expressionValue = !!expressionValue;\r\n      }\r\n\r\n      if (\r\n        ignoreCache ||\r\n        (expressionProperties[key].expressionValue !== expressionValue &&\r\n          (!isObject(expressionValue) ||\r\n            JSON.stringify(expressionValue) !==\r\n              JSON.stringify(expressionProperties[key].expressionValue)))\r\n      ) {\r\n        markForCheck = true;\r\n        expressionProperties[key].expressionValue = expressionValue;\r\n        evalExpression(\r\n          expressionProperties[key].expressionValueSetter,\r\n          { field },\r\n          [expressionValue, field.model, field]\r\n        );\r\n\r\n        if (key === \"templateOptions.disabled\" && field.key) {\r\n          this.setDisabledState(field, expressionValue);\r\n        }\r\n\r\n        if (key.indexOf(\"model.\") === 0) {\r\n          const path = key.replace(/^model\\./, \"\"),\r\n            control =\r\n              field.key && key === path\r\n                ? field.formControl\r\n                : field.parent.formControl.get(path);\r\n\r\n          if (\r\n            control &&\r\n            !(\r\n              isNullOrUndefined(control.value) &&\r\n              isNullOrUndefined(expressionValue)\r\n            ) &&\r\n            control.value !== expressionValue\r\n          ) {\r\n            control.patchValue(expressionValue);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return markForCheck;\r\n  }\r\n\r\n  private checkFieldVisibilityChange(\r\n    field: VXFormFieldConfigCache,\r\n    ignoreCache\r\n  ): boolean {\r\n    if (!field || isNullOrUndefined(field.hideExpression)) {\r\n      return false;\r\n    }\r\n\r\n    const hideExpressionResult: boolean = !!evalExpression(\r\n      field.hideExpression,\r\n      { field },\r\n      [field.model, field.options.formState, field]\r\n    );\r\n    let markForCheck = false;\r\n    if (hideExpressionResult !== field.hide || ignoreCache) {\r\n      markForCheck = true;\r\n      field.hide = hideExpressionResult;\r\n      field.templateOptions.hidden = hideExpressionResult;\r\n    }\r\n\r\n    return markForCheck;\r\n  }\r\n\r\n  private setDisabledState(field: VXFormFieldConfig, value: boolean) {\r\n    if (field.fieldGroup) {\r\n      field.fieldGroup\r\n        .filter(\r\n          f =>\r\n            !f.expressionProperties ||\r\n            !f.expressionProperties.hasOwnProperty(\"templateOptions.disabled\")\r\n        )\r\n        .forEach(f => this.setDisabledState(f, value));\r\n    }\r\n\r\n    if (field.key && field.templateOptions.disabled !== value) {\r\n      field.templateOptions.disabled = value;\r\n    }\r\n  }\r\n\r\n  private toggleFormControl(field: VXFormFieldConfig, hide: boolean) {\r\n    if (field.fieldGroup) {\r\n      field.fieldGroup\r\n        .filter(f => !f.hideExpression)\r\n        .forEach(f => this.toggleFormControl(f, hide));\r\n    }\r\n\r\n    if (field.formControl && field.key) {\r\n      hide === true ? unregisterControl(field) : registerControl(field);\r\n    }\r\n\r\n    if (field.options.fieldChanges) {\r\n      field.options.fieldChanges.next(<VXFormValueChangeEvent>{\r\n        field: field,\r\n        type: \"hidden\",\r\n        value: hide\r\n      });\r\n    }\r\n  }\r\n}\r\n","import {\r\n  VXFormExtension,\r\n  FieldValidatorFn,\r\n  VXFormConfig\r\n} from \"../../services/vxform.config\";\r\nimport { VXFormFieldConfigCache } from \"../../components/vxform.field.config\";\r\nimport { AbstractControl, Validators, ValidatorFn } from \"@angular/forms\";\r\nimport {\r\n  isObject,\r\n  VXFORM_VALIDATORS,\r\n  defineHiddenProp,\r\n  isUndefined,\r\n  isPromise,\r\n  wrapProperty\r\n} from \"../../utils\";\r\n\r\nexport class FieldValidationExtension implements VXFormExtension {\r\n  constructor(private vxFormConfig: VXFormConfig) {}\r\n\r\n  onPopulate(field: VXFormFieldConfigCache) {\r\n    if (!field.parent || !field.key) {\r\n      return;\r\n    }\r\n\r\n    this.initFieldValidation(field, \"validators\");\r\n    this.initFieldValidation(field, \"asyncValidators\");\r\n  }\r\n\r\n  private initFieldValidation(\r\n    field: VXFormFieldConfigCache,\r\n    type: \"validators\" | \"asyncValidators\"\r\n  ) {\r\n    if (!isUndefined(field[\"_\" + type])) {\r\n      if (field.formControl) {\r\n        const validator =\r\n          type === \"validators\"\r\n            ? field.formControl.validator\r\n            : field.formControl.asyncValidator;\r\n        if (field[\"_\" + type] !== validator) {\r\n          field[\"_\" + type] = validator;\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const validators: ValidatorFn[] =\r\n      type === \"validators\" ? [this.getPredefinedFieldValidation(field)] : [];\r\n    if (field[type]) {\r\n      for (const validatorName in field[type]) {\r\n        if (\r\n          validatorName === \"validation\" &&\r\n          !Array.isArray(field[type].validation)\r\n        ) {\r\n          field[type].validation = [field[type].validation];\r\n        }\r\n\r\n        validatorName === \"validation\"\r\n          ? validators.push(\r\n              ...field[type].validation.map(v =>\r\n                this.wrapNgValidatorFn(field, v)\r\n              )\r\n            )\r\n          : validators.push(\r\n              this.wrapNgValidatorFn(\r\n                field,\r\n                field[type][validatorName],\r\n                validatorName\r\n              )\r\n            );\r\n      }\r\n    }\r\n\r\n    defineHiddenProp(\r\n      field,\r\n      \"_\" + type,\r\n      type === \"validators\"\r\n        ? Validators.compose(validators)\r\n        : Validators.composeAsync(validators as any)\r\n    );\r\n  }\r\n\r\n  private getPredefinedFieldValidation(\r\n    field: VXFormFieldConfigCache\r\n  ): ValidatorFn {\r\n    let VALIDATORS = [];\r\n    VXFORM_VALIDATORS.forEach(opt =>\r\n      wrapProperty(\r\n        field.templateOptions,\r\n        opt,\r\n        ({ currentValue, firstChange }) => {\r\n          VALIDATORS = VALIDATORS.filter(o => o !== opt);\r\n          if (currentValue != null && currentValue !== false) {\r\n            VALIDATORS.push(opt);\r\n          }\r\n          if (!firstChange && field.formControl) {\r\n            field.formControl.updateValueAndValidity({ emitEvent: false });\r\n          }\r\n        }\r\n      )\r\n    );\r\n\r\n    return (control: AbstractControl) => {\r\n      if (VALIDATORS.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      return Validators.compose(\r\n        VALIDATORS.map(opt => () => {\r\n          const value = field.templateOptions[opt];\r\n          switch (opt) {\r\n            case \"required\":\r\n              return Validators.required(control);\r\n            case \"pattern\":\r\n              return Validators.pattern(value)(control);\r\n            case \"minLength\":\r\n              return Validators.minLength(value)(control);\r\n            case \"maxLength\":\r\n              return Validators.maxLength(value)(control);\r\n            case \"min\":\r\n              return Validators.min(value)(control);\r\n            case \"max\":\r\n              return Validators.max(value)(control);\r\n          }\r\n        })\r\n      )(control);\r\n    };\r\n  }\r\n\r\n  private wrapNgValidatorFn(\r\n    field: VXFormFieldConfigCache,\r\n    validator: string | FieldValidatorFn,\r\n    validatorName?: string\r\n  ) {\r\n    return (control: AbstractControl) => {\r\n      let validatorFn = validator as FieldValidatorFn;\r\n      if (typeof validator === \"string\") {\r\n        validatorFn = this.vxFormConfig.getValidator(validator).validation;\r\n      }\r\n      if (isObject(validator)) {\r\n        validatorFn = (validator as any).expression;\r\n      }\r\n\r\n      const isValid = validatorFn(control, field);\r\n      if (validatorName) {\r\n        if (isPromise(isValid)) {\r\n          return isValid.then((result: boolean) => {\r\n            if (field.options && field.options._markForCheck) {\r\n              field.options._markForCheck(field);\r\n            }\r\n\r\n            return this.handleResult(field, result, {\r\n              validatorName,\r\n              validator\r\n            });\r\n          });\r\n        }\r\n\r\n        return this.handleResult(field, isValid, { validatorName, validator });\r\n      }\r\n\r\n      return isValid;\r\n    };\r\n  }\r\n\r\n  private handleResult(\r\n    field: VXFormFieldConfigCache,\r\n    isValid,\r\n    { validatorName, validator }\r\n  ) {\r\n    if (isObject(validator) && field.formControl && validator.errorPath) {\r\n      const control = field.formControl.get(validator.errorPath);\r\n      if (control) {\r\n        const controlErrors = control.errors || {};\r\n        if (!isValid) {\r\n          control.setErrors({\r\n            ...controlErrors,\r\n            [validatorName]: { message: validator.message }\r\n          });\r\n        } else {\r\n          delete controlErrors[validatorName];\r\n          control.setErrors(\r\n            Object.keys(controlErrors).length === 0 ? null : controlErrors\r\n          );\r\n        }\r\n      }\r\n\r\n      return isValid\r\n        ? null\r\n        : { [validatorName]: { errorPath: validator.errorPath } };\r\n    }\r\n\r\n    return isValid ? null : { [validatorName]: true };\r\n  }\r\n}\r\n","import { VXFormExtension } from \"../../services/vxform.config\";\r\nimport { VXFormFieldConfigCache } from \"../../components/vxform.field.config\";\r\nimport {\r\n  AbstractControl,\r\n  FormGroup,\r\n  FormControl,\r\n  AbstractControlOptions\r\n} from \"@angular/forms\";\r\nimport { getKeyPath, getFieldValue, defineHiddenProp } from \"../../utils\";\r\nimport { registerControl } from \"./utils\";\r\n\r\nexport class FieldFormExtension implements VXFormExtension {\r\n  onPopulate(field: VXFormFieldConfigCache) {\r\n    if (field.key) {\r\n      this.addFormControl(field);\r\n    }\r\n\r\n    if (field.parent && field.fieldGroup && !field.key) {\r\n      defineHiddenProp(field, \"formControl\", field.parent.formControl);\r\n    }\r\n  }\r\n\r\n  postPopulate(field: VXFormFieldConfigCache) {\r\n    if (field.parent) {\r\n      return;\r\n    }\r\n\r\n    const updateValidity = this.setValidators(field);\r\n    updateValidity &&\r\n      (field.formControl as any)._updateTreeValidity({ emitEvent: false });\r\n  }\r\n\r\n  private addFormControl(field: VXFormFieldConfigCache) {\r\n    const controlOptions: AbstractControlOptions = {\r\n      updateOn: field.modelOptions.updateOn\r\n    };\r\n    let control: AbstractControl;\r\n\r\n    const form = field.parent.formControl as FormGroup;\r\n    const value = getFieldValue(field);\r\n    const paths = getKeyPath(field);\r\n    if (\r\n      field.formControl instanceof AbstractControl ||\r\n      (form && form.get(paths))\r\n    ) {\r\n      control = field.formControl || form.get(paths);\r\n    } else if (\r\n      field._componentFactory &&\r\n      field._componentFactory.component &&\r\n      field._componentFactory.component.createControl\r\n    ) {\r\n      const component = field._componentFactory.component;\r\n\r\n      control = component.createControl(value, field);\r\n    } else if (field.fieldGroup) {\r\n      control = new FormGroup({}, controlOptions);\r\n    } else {\r\n      control = new FormControl(value, controlOptions);\r\n    }\r\n\r\n    registerControl(field, control);\r\n  }\r\n\r\n  private setValidators(field: VXFormFieldConfigCache) {\r\n    let updateValidity = false;\r\n    if (field.key) {\r\n      const {\r\n        _validators: validators,\r\n        _asyncValidators: asyncValidators,\r\n        formControl: control,\r\n        templateOptions: { disabled }\r\n      } = field;\r\n\r\n      if (disabled && control.enabled) {\r\n        control.disable({ emitEvent: false, onlySelf: true });\r\n        updateValidity = true;\r\n      }\r\n\r\n      if (validators !== control.validator) {\r\n        control.setValidators(validators);\r\n        updateValidity = true;\r\n      }\r\n      if (asyncValidators !== control.asyncValidator) {\r\n        control.setAsyncValidators(asyncValidators);\r\n        updateValidity = true;\r\n      }\r\n    }\r\n\r\n    (field.fieldGroup || []).forEach(\r\n      f => this.setValidators(f) && (updateValidity = true)\r\n    );\r\n\r\n    return updateValidity;\r\n  }\r\n}\r\n","export class Guid {\r\n    public static validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\r\n\r\n    public static EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-'));\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('emptyguid');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');\r\n    }\r\n\r\n    private static gen(count: number) {\r\n        let out: string = '';\r\n        for (let i: number = 0; i < count; i++) {\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    private value: string;\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) {\r\n        }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","import {\r\n  VXFormExtension,\r\n  VXFormConfig,\r\n  TemplateManipulators\r\n} from \"../../services/vxform.config\";\r\nimport {\r\n  VXFormFieldConfigCache,\r\n  VXFormFieldConfig\r\n} from \"../../components/vxform.field.config\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {\r\n  getFieldId,\r\n  assignModelValue,\r\n  isUndefined,\r\n  getFieldValue,\r\n  reverseDeepMerge,\r\n  getKeyPath\r\n} from \"../../utils\";\r\nimport { Guid } from \"../../guid\";\r\n\r\nexport class CoreExtension implements VXFormExtension {\r\n  private formId = 0;\r\n  constructor(private vxFormConfig: VXFormConfig) {}\r\n\r\n  prePopulate(field: VXFormFieldConfigCache) {\r\n    this.getFieldComponentInstance(field).prePopulate();\r\n    if (field.parent) {\r\n      return;\r\n    }\r\n\r\n    const fieldTransforms =\r\n      (field.options && field.options.fieldTransform) ||\r\n      this.vxFormConfig.extras.fieldTransform;\r\n    (Array.isArray(fieldTransforms)\r\n      ? fieldTransforms\r\n      : [fieldTransforms]\r\n    ).forEach(fieldTransform => {\r\n      if (fieldTransform) {\r\n        const fieldGroup = fieldTransform(\r\n          field.fieldGroup,\r\n          field.model,\r\n          <FormGroup>field.formControl,\r\n          field.options\r\n        );\r\n        if (!fieldGroup) {\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  onPopulate(field: VXFormFieldConfigCache) {\r\n    this.initFieldOptions(field);\r\n    this.getFieldComponentInstance(field).onPopulate();\r\n    if (field.fieldGroup) {\r\n      field.fieldGroup.forEach((f, index) => {\r\n        Object.defineProperty(f, \"parent\", {\r\n          get: () => field,\r\n          configurable: true\r\n        });\r\n        Object.defineProperty(f, \"index\", {\r\n          get: () => index,\r\n          configurable: true\r\n        });\r\n        this.formId++;\r\n      });\r\n    }\r\n  }\r\n\r\n  postPopulate(field: VXFormFieldConfigCache) {\r\n    this.getFieldComponentInstance(field).postPopulate();\r\n  }\r\n\r\n  private initFieldOptions(field: VXFormFieldConfigCache) {\r\n    const root = <VXFormFieldConfigCache>field.parent;\r\n    if (!root) {\r\n      return;\r\n    }\r\n\r\n    Object.defineProperty(field, \"form\", {\r\n      get: () => root.formControl,\r\n      configurable: true\r\n    });\r\n    Object.defineProperty(field, \"options\", {\r\n      get: () => root.options,\r\n      configurable: true\r\n    });\r\n    Object.defineProperty(field, \"model\", {\r\n      get: () =>\r\n        field.key && field.fieldGroup ? getFieldValue(field) : root.model,\r\n      configurable: true\r\n    });\r\n\r\n    reverseDeepMerge(field, {\r\n      id: getFieldId(`vxform_${this.formId}`, field, field[\"index\"]),\r\n      guid: Guid.create()[\"value\"],\r\n      hooks: {},\r\n      modelOptions: {},\r\n      templateOptions:\r\n        !field.type || !field.key\r\n          ? {}\r\n          : {\r\n              label: \"\",\r\n              placeholder: \"\",\r\n              focus: false,\r\n              disabled: false\r\n            }\r\n    });\r\n\r\n    if (field.lifecycle) {\r\n    }\r\n\r\n    if (field.template && field.type !== \"template\") {\r\n      if (field.type) {\r\n      }\r\n      field.type = \"template\";\r\n    }\r\n\r\n    if (!field.type && field.fieldGroup) {\r\n      field.type = \"vxform-group\";\r\n    }\r\n\r\n    if (field.type) {\r\n      this.vxFormConfig.getMergedField(field);\r\n    }\r\n\r\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\r\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\r\n    }\r\n\r\n    this.initFieldWrappers(field);\r\n  }\r\n\r\n  private initFieldWrappers(field: VXFormFieldConfig) {\r\n    field.wrappers = field.wrappers || [];\r\n    const fieldTemplateManipulators: TemplateManipulators = {\r\n      preWrapper: [],\r\n      postWrapper: [],\r\n      ...(field.templateOptions.templateManipulators || {})\r\n    };\r\n\r\n    field.wrappers = [\r\n      ...this.vxFormConfig.templateManipulators.preWrapper.map(m => m(field)),\r\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\r\n      ...field.wrappers,\r\n      ...this.vxFormConfig.templateManipulators.postWrapper.map(m => m(field)),\r\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field))\r\n    ].filter((el, i, a) => el && i === a.indexOf(el));\r\n  }\r\n\r\n  private getFieldComponentInstance(field: VXFormFieldConfigCache) {\r\n    const componentRef = this.vxFormConfig.createComponent(field);\r\n    const instance: VXFormExtension = componentRef\r\n      ? (componentRef.instance as any)\r\n      : {};\r\n\r\n    return {\r\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\r\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\r\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field)\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXFormFieldProperty\r\n} from \"../components/vxform.field.config\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class VXFormCommonService {\r\n  constructor() { }\r\n\r\n  initFormFieldProperty(fields: VXFormFieldConfig[]) {\r\n    fields.forEach(field => {\r\n      this.deleteFieldProperty(field);\r\n    });\r\n  }\r\n\r\n  //åå§åè¡¨åJSONå¯¹è±¡\r\n  initFormFieldConfig(\r\n    fields: VXFormFieldConfig[],\r\n    fieldPropertys: VXFormFieldProperty[]\r\n  ) {\r\n    fields.forEach(field => {\r\n      this.setFieldProperty(field, fieldPropertys);\r\n    });\r\n  }\r\n\r\n  initFormFieldModel(fields: VXFormFieldConfig[], model: any) {\r\n    fields.forEach(field => {\r\n      if (field.hasOwnProperty(\"editor\")) {\r\n        field.typeold = field.type;\r\n        field.type = \"text\";\r\n        if (this.checkFieldDefaultValue(field)) {\r\n          model[field.key] = field.defaultValue;\r\n        }\r\n      }\r\n      if (field.hasOwnProperty(\"fieldArray\")) {\r\n        if (field.fieldArray.hasOwnProperty(\"fieldGroup\")) {\r\n          model[field.key] = [{}];\r\n          field.fieldArray.fieldGroup.forEach(fieldGroup => {\r\n            if (fieldGroup.hasOwnProperty(\"editor\")) {\r\n              fieldGroup.typeold = field.type;\r\n              fieldGroup.type = \"text\";\r\n            }\r\n          });\r\n        }\r\n      }\r\n      if (field.hasOwnProperty(\"fieldGroup\")) {\r\n        //åå§åå¼\r\n        if (!this.checkFieldDefaultValue(field)) {\r\n          model[field.key] = {};\r\n        }\r\n\r\n        field.fieldGroup.forEach(fieldGroup => {\r\n          if (fieldGroup.hasOwnProperty(\"editor\")) {\r\n            fieldGroup.typeold = fieldGroup.type;\r\n            fieldGroup.type = \"text\";\r\n            if (this.checkFieldDefaultValue(model[field.key][fieldGroup.key])) {\r\n              model[field.key][fieldGroup.key] = fieldGroup.defaultValue;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //åå§åè¡¨ååºå·\r\n  initSurveyFormFieldConfig(surveyInfo: any) { \r\n    surveyInfo.queTotal = 0;\r\n    if (surveyInfo.pages) { \r\n      surveyInfo.pages.forEach((page: any) => { \r\n        this.setFieldNumber(surveyInfo,page.questions);\r\n      });  \r\n    }\r\n  }\r\n\r\n  private checkFieldDefaultValue(field: VXFormFieldConfig) {\r\n    let result = false;\r\n    if (\r\n      field != undefined &&\r\n      field != null &&\r\n      field.defaultValue != undefined &&\r\n      field.defaultValue != null\r\n    ) {\r\n      return true;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private deleteFieldProperty(field: any) {\r\n    if (field.hasOwnProperty(\"status\")) {\r\n      delete field.status;\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"guid\")) {\r\n      delete field.guid;\r\n    }\r\n    if (field.hasOwnProperty(\"id\")) {\r\n      delete field.id;\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"wrappers\")) {\r\n      delete field[\"wrappers\"];\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"_keyPath\")) {\r\n      delete field[\"_keyPath\"];\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"modelOptions\")) {\r\n      delete field[\"modelOptions\"];\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"checked\")) {\r\n      delete field[\"checked\"];\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"rownumber\")) {\r\n      delete field[\"rownumber\"];\r\n    }\r\n\r\n    if (field.hasOwnProperty(\"templateOptions\")) {\r\n      if (field.templateOptions.hasOwnProperty(\"focus\")) {\r\n        delete field.templateOptions.focus;\r\n      }\r\n      if (field.templateOptions.hasOwnProperty(\"disabled\")) {\r\n        delete field.templateOptions.disabled;\r\n      }\r\n      if (field.templateOptions.hasOwnProperty(\"readonly\")) {\r\n        delete field.templateOptions.readonly;\r\n      }\r\n    }\r\n\r\n    if (field.fieldArray) {\r\n      if (field.fieldArray.fieldGroup) {\r\n        if (field.fieldGroup) {\r\n          delete field.fieldGroup;\r\n        }\r\n        this.initFormFieldProperty(field.fieldArray.fieldGroup);\r\n      }\r\n    }\r\n    if (field.fieldGroup) {\r\n      this.initFormFieldProperty(field.fieldGroup);\r\n    }\r\n  }\r\n\r\n  private setFieldProperty(\r\n    field: VXFormFieldConfig,\r\n    fieldPropertys: VXFormFieldProperty[]\r\n  ) {\r\n    let items: VXFormFieldProperty[] = fieldPropertys.filter(item => {\r\n      return item.key === field.key;\r\n    });\r\n    if (items != undefined && items != null && items.length > 0) {\r\n      let item: VXFormFieldProperty = items[0];\r\n\r\n      if (item.hasOwnProperty(\"show\")) {\r\n        field.show = item.show;\r\n      }\r\n      if (item.hasOwnProperty(\"editor\")) {\r\n        field.editor = item.editor;\r\n      }\r\n\r\n      if (item.hasOwnProperty(\"label\")) {\r\n        if (item.label != null) {\r\n          field.templateOptions.label = item.label;\r\n        }\r\n      }\r\n\r\n      if (item.hasOwnProperty(\"placeholder\")) {\r\n        if (item.placeholder != null) {\r\n          field.templateOptions.placeholder = item.placeholder;\r\n        }\r\n      }\r\n\r\n      if (item.hasOwnProperty(\"options\")) {\r\n        if (item.options != null) {\r\n          field.templateOptions.options = item.options;\r\n        }\r\n      }\r\n\r\n      if (item.hasOwnProperty(\"tips\")) {\r\n        if (item.tips != null && item.tips != \"\") {\r\n          field.templateOptions.tips = item.tips;\r\n        }\r\n      }\r\n    }\r\n    if (field.fieldArray) {\r\n      if (field.fieldArray.fieldGroup) {\r\n        this.initFormFieldConfig(field.fieldArray.fieldGroup, fieldPropertys);\r\n      }\r\n    }\r\n    if (field.fieldGroup) {\r\n      this.initFormFieldConfig(field.fieldGroup, fieldPropertys);\r\n    }\r\n  }\r\n\r\n  private setFieldNumber(surveyInfo:any,fields: VXFormFieldConfig[]) {\r\n    fields.forEach((field: VXFormFieldConfig) => {\r\n      if (field.type != \"line\" && field.type != \"remark\") {\r\n        surveyInfo.queTotal = surveyInfo.queTotal+1\r\n        field.templateOptions.queno = \"Q\" + surveyInfo.queTotal;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  ANALYZE_FOR_ENTRY_COMPONENTS,\r\n  Inject,\r\n  Optional\r\n} from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { HttpModule } from \"@angular/http\";\r\n\r\nimport {\r\n  HttpClient,\r\n  HTTP_INTERCEPTORS,\r\n  HttpClientModule\r\n} from \"@angular/common/http\";\r\nimport { VXForm } from \"./components/vxform\";\r\nimport { VXFormField } from \"./components/vxform.field\";\r\nimport { VXFormAttributes } from \"./components/vxform.attributes\";\r\nimport {\r\n  VXFormConfig,\r\n  ConfigOption,\r\n  VXFORM_CONFIG,\r\n  APPConfig\r\n} from \"./services/vxform.config\";\r\nimport { VXFormBuilder } from \"./services/vxform.builder\";\r\nimport { VXFormGroup } from \"./templates/vxform.group\";\r\nimport { VXFormValidationMessage } from \"./templates/vxform.validation-message\";\r\nimport { VXFormTemplateType } from \"./templates/field-template.type\";\r\n\r\nimport { FieldExpressionExtension } from \"./extensions/field-expression/field-expression\";\r\nimport { FieldValidationExtension } from \"./extensions/field-validation/field-validation\";\r\nimport { FieldFormExtension } from \"./extensions/field-form/field-form\";\r\nimport { CoreExtension } from \"./extensions/core/core\";\r\nimport { VXFormCommonService } from \"./tools/common\";\r\n\r\nexport function defaultVXFormConfig(vxFormConfig: VXFormConfig): ConfigOption {\r\n  return {\r\n    types: [\r\n      { name: \"vxform-group\", component: VXFormGroup },\r\n      { name: \"template\", component: VXFormTemplateType }\r\n    ],\r\n    extensions: [\r\n      { name: \"core\", extension: new CoreExtension(vxFormConfig) },\r\n      {\r\n        name: \"field-validation\",\r\n        extension: new FieldValidationExtension(vxFormConfig)\r\n      },\r\n      { name: \"field-form\", extension: new FieldFormExtension() },\r\n      { name: \"field-expression\", extension: new FieldExpressionExtension() }\r\n    ]\r\n  };\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VXForm,\r\n    VXFormField,\r\n    VXFormAttributes,\r\n    VXFormGroup,\r\n    VXFormValidationMessage,\r\n    VXFormTemplateType\r\n  ],\r\n  entryComponents: [VXFormGroup, VXFormTemplateType],\r\n  exports: [\r\n    VXForm,\r\n    VXFormField,\r\n    VXFormAttributes,\r\n    VXFormGroup,\r\n    VXFormValidationMessage\r\n  ],\r\n  imports: [HttpModule, HttpClientModule, CommonModule],\r\n  providers: [VXFormCommonService]\r\n})\r\nexport class VXFormModule {\r\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<VXFormModule> {\r\n    return {\r\n      ngModule: VXFormModule,\r\n      providers: [\r\n        {\r\n          provide: VXFORM_CONFIG,\r\n          multi: true,\r\n          useFactory: defaultVXFormConfig,\r\n          deps: [VXFormConfig]\r\n        },\r\n        { provide: VXFORM_CONFIG, useValue: config, multi: true },\r\n        {\r\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\r\n          useValue: config,\r\n          multi: true\r\n        },\r\n        VXFormConfig,\r\n        VXFormBuilder\r\n      ]\r\n    };\r\n  }\r\n\r\n  static forChild(\r\n    config: ConfigOption = {}\r\n  ): ModuleWithProviders<VXFormModule> {\r\n    return {\r\n      ngModule: VXFormModule,\r\n      providers: [\r\n        { provide: VXFORM_CONFIG, useValue: config, multi: true },\r\n        {\r\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\r\n          useValue: config,\r\n          multi: true\r\n        },\r\n        VXFormBuilder\r\n      ]\r\n    };\r\n  }\r\n\r\n  static forConfig(config:string): ModuleWithProviders<VXFormModule>{\r\n    if(localStorage.getItem(\"VX_FORM_LINCES\")!=null && localStorage.getItem(\"VX_FORM_LINCES\")!=\"\"){\r\n      localStorage.removeItem(\"VX_FORM_LINCES\");\r\n    }\r\n    localStorage.setItem(\"VX_FORM_LINCES\",config);\r\n    return {\r\n       ngModule: VXFormModule,\r\n       providers: [VXFormBuilder]\r\n    };\r\n  }\r\n\r\n  constructor(\r\n    configService: VXFormConfig,\r\n    @Optional() @Inject(VXFORM_CONFIG) configs: ConfigOption[] = []\r\n  ) {\r\n    if (!configs) {\r\n      return;\r\n    }\r\n\r\n    configs.forEach(config => configService.addConfig(config));\r\n  }\r\n}\r\n"]}