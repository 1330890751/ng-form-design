{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@vx-form/survey/lib/tools/service.ts","ng://@vx-form/survey/lib/types/radiogroup.ts","ng://@vx-form/survey/lib/types/drag-drop.ts","ng://@vx-form/survey/lib/types/basic/radio.ts","ng://@vx-form/survey/lib/types/basic/checkbox.ts","ng://@vx-form/survey/lib/types/basic/dropdown.ts","ng://@vx-form/survey/lib/service/dialog.service.ts","ng://@vx-form/survey/lib/components/edit-cascader/index.component.ts","ng://@vx-form/survey/lib/types/basic/cascader.ts","ng://@vx-form/survey/lib/types/basic/scaler.ts","ng://@vx-form/survey/lib/types/basic/score.ts","ng://@vx-form/survey/lib/types/basic/line.ts","ng://@vx-form/survey/lib/types/basic/remark.ts","ng://@vx-form/survey/lib/types/basic/input.ts","ng://@vx-form/survey/lib/types/basic/date.ts","ng://@vx-form/survey/lib/types/basic/time.ts","ng://@vx-form/survey/lib/types/basic/nps.ts","ng://@vx-form/survey/lib/types/basic/proportion.ts","ng://@vx-form/survey/lib/components/edit-evaluation/index.component.ts","ng://@vx-form/survey/lib/types/basic/evaluation.ts","ng://@vx-form/survey/lib/types/basic/matrix_radio.ts","ng://@vx-form/survey/lib/types/basic/matrix_checkbox.ts","ng://@vx-form/survey/lib/types/basic/matrix_score.ts","ng://@vx-form/survey/lib/types/basic/matrix_input.ts","ng://@vx-form/survey/lib/types/basic/input_group.ts","ng://@vx-form/survey/lib/wrappers/form-field.wrapper.ts","ng://@vx-form/survey/lib/templates/group.ts","ng://@vx-form/survey/lib/templates/repeat.ts","ng://@vx-form/survey/lib/bootstrap.config.ts","ng://@vx-form/survey/lib/validation.config.ts","ng://@vx-form/survey/lib/net/http.client.ts","ng://@vx-form/survey/lib/service/data.service.ts","ng://@vx-form/survey/lib/tools/radio_Service.ts","ng://@vx-form/survey/lib/tools/checkbox_Service.ts","ng://@vx-form/survey/lib/tools/input_Service.ts","ng://@vx-form/survey/lib/tools/cascader_Service.ts","ng://@vx-form/survey/lib/tools/other_Service.ts","ng://@vx-form/survey/lib/tools/matrix_Service.ts","ng://@vx-form/survey/lib/tools/transferService.ts","ng://@vx-form/survey/lib/design/detail/detail.component.ts","ng://@vx-form/survey/lib/components/question-type/index.component.ts","ng://@vx-form/survey/lib/components/question-list/index.component.ts","ng://@vx-form/survey/lib/components/basic/setting_cascader.ts","ng://@vx-form/survey/lib/components/basic/setting_checkbox.ts","ng://@vx-form/survey/lib/components/basic/setting_dropdown.ts","ng://@vx-form/survey/lib/components/basic/setting_input.ts","ng://@vx-form/survey/lib/components/basic/setting_line.ts","ng://@vx-form/survey/lib/components/basic/setting_radio.ts","ng://@vx-form/survey/lib/components/basic/setting_remark.ts","ng://@vx-form/survey/lib/components/basic/setting_scaler.ts","ng://@vx-form/survey/lib/components/basic/setting_score.ts","ng://@vx-form/survey/lib/components/basic/setting_date.ts","ng://@vx-form/survey/lib/components/basic/setting_time.ts","ng://@vx-form/survey/lib/components/basic/setting_nps.ts","ng://@vx-form/survey/lib/components/basic/setting_proportion.ts","ng://@vx-form/survey/lib/components/basic/setting_evaluation.ts","ng://@vx-form/survey/lib/components/basic/setting_matrix_radio.ts","ng://@vx-form/survey/lib/components/basic/setting_matrix_checkbox.ts","ng://@vx-form/survey/lib/components/basic/setting_matrix_score.ts","ng://@vx-form/survey/lib/components/basic/setting_matrix_input.ts","ng://@vx-form/survey/lib/components/basic/setting_input_group.ts","ng://@vx-form/survey/lib/components/setting.teplate.ts","ng://@vx-form/survey/lib/components/edit-cascader/cascader-item.ts","ng://@vx-form/survey/lib/components/inline-editor/contenteditable.ts","ng://@vx-form/survey/lib/components/inline-editor/inline-editor.comonent.ts","ng://@vx-form/survey/lib/components/first-page/index.component.ts","ng://@vx-form/survey/lib/components/last-page/index.component.ts","ng://@vx-form/survey/lib/tools/replaceLinePipe.ts","ng://@vx-form/survey/lib/pipes/safehtml.pipe.ts","ng://@vx-form/survey/lib/bootstrap.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","VXFormAntService","btnEvent","EventEmitter","fieldEvent","questionEvent","optionEvent","dragDropEvent","workList","fieldOperational","sign","field","emit","groupOperational","type","questionOperational","optionOperational","option","dragDropOperational","previousData","previousIndex","currentIndex","Injectable","VXSurveyRadioGroup","dyService","_this","_super","guid","Guid","service","tslib_1.__extends","dropOption","event","logicQuestion","copyQuestion","delQuestion","activeQuestion","active","addOption","addOptions","deleteOption","Component","args","selector","template","FieldType","VXSurveyDragDrop","defineProperty","result","to","index","drop","previousContainer","container","moveItemInArray","data","VXSurveyRadio","VXSurveyCheckBox","onChange","values","undefined","forEach","options","formControl","patchValue","markAsTouched","getCheckStatus","getControlChecked","some","VXSurveyDropdown","VXDialogService","modalService","switchSize","size","obj","width","height","CreateModelDialog","modalOptions","params","callback","modal","nzTitle","nzWidth","nzClosable","nzMaskClosable","nzWrapClassName","nzBodyStyle","padding","nzContent","nzFooter","show","label","onClick","componentInstance","destroy","nzOnOk","nzOnCancel","nzComponentParams","afterClose","subscribe","providedIn","NzModalService","VXSurveyEditCascader","cascaderData","row1","cascader","current","showadd","row2","row3","row4","templateOptions","isArray","_.cloneDeep","ngOnInit","ngOnChanges","changes","cascaderItem","item","children","delOption","splice","Input","VXSurveyCascader","vxDialogService","para","fieldConfig","instance","optionlist","VXSurveyScaler","beginNumber","max","begin","console","log","VXSurveyScore","VXSurveyLine","VXSurveyRemark","VXSurveyInput","VXSurveyDate","VXSurveyTime","VXSurveyNPS","VXSurveyProportion","marks","0","20","40","60","80","100","VXSurveyEditEvaluation","start","optionSelectedIndex","currentSelected","editevaluationData","JSON","stringify","optionClick","getOptionTag","tag","split","VXSurveyEvaluation","_startContent","tags","numberChange","editStart","VXSurveyMatrixRadio","controlModelChange","subtitle","groupid","optionid","optionvalue","addSubTitle","VXSurveyMatrixCheckBox","getMatrixOption","res","VXSurveyMatrixScore","op","VXSurveyMatrixInput","VXSurveyInputGroup","VXFormWrapperFormField","FieldWrapper","VXFormFieldGroup","host","[class]","cdkDrag","VXFormFieldRepeat","delete","fieldGroup","remove","FieldArrayType","FIELD_TYPE_COMPONENTS","BOOTSTRAP_VXFORM_CONFIG","types","name","component","wrappers","getFieldPro","key","_.get","requiredValidationMessage","err","minlengthValidationMessage","maxlengthValidationMessage","minValidationMessage","maxValidationMessage","validationConfig","validationMessages","message","extends","_HttpClient","http","_loading","parseParams","HttpParams","fromObject","formEncode","encodedString","encodeURIComponent","appliedUrl","url","indexOf","arr","join","setTimeout","end","get","request","assign","post","body","jsonp","callbackParam","pipe","tap","catchError","throwError","patch","put","method","HttpClient","DataService","_http","getBusinessTables","getFormInfo","getSysCtrEmployee","getWebAPIName","getSysCtrOrgTree","getSysCtrPostionTable","getSysCtrArea","getTreeData","localStorage","getItem","parse","VXRadioService","create_radio","questionType","question","status","createRadio_default","createRadio_gender","createRadio_age","createRadio_education","createRadio_occupation","createRadio_votefont","required","setting","score","random","layout","VXCheckboxService","create_checkbox","createCheckbox_default","min","VXInputService","create_input","createInput_default","createInput_name","createInput_mobile","createInput_email","createInput_remark","minLength","maxLength","VXCascaderService","create_cascader","createCascader_default","createCascader_major","createCascader_industry","createCascader_university","VXOtherService","create_line","create_remark","create_date","create_time","create_score","create_dropdown","create_nps","create_proportion","order","input","create_evaluation","create_inputGroup","VXMatrixService","create_matrix","createMatrix_radio","createMatrix_score","createMatrix_input","VXTransferService","vxRadioService","vxCheckboxService","vxInputService","vxCascaderService","vxOtherService","vxMatrixService","transferQuestionByType","form_fields","initQuestion","VXSurveyDesignDetail","vxFormAntService","dataService","vxTransferService","vxFormCommonService","formCode","api","form","saveEvent","cancelEvent","previewEvent","pageStatus","form_model","form_group","FormGroup","vxSurveyInfo","code","first","title","text","last","pages","questions","show_setting","questionField","pageSelectedIndex","addQuestionDragDrop","initFormInfo","ngOnDestroy","saveSurvey","objSurvey","clone","initFormFieldProperty","formcode","getQuestionListByPageIndex","pageClick","addPage","newPage","deletePage","pageIndex","rQuestion","rIndex","resType","resField","formFieldGroup","object","success","resOption","addQuestionType","providers","NzMessageService","VXFormCommonService","Output","VXQuestionType","questionTypeEvent","addPageEvent","saveSurveyEvent","questionTypeList","child","VXQuestionList","dropQuestion","transferArrayItem","VXSurveySettingCascader","VXSurveySettingCheckBox","VXSurveySettingDropdown","VXSurveySettingInput","VXSurveySettingLine","VXSurveySettingRadio","VXSurveySettingRemark","VXSurveySettingScaler","description","precision","placeholder","tips","pattern","origin","refdatasourcetype","datatype","VXSurveySettingScore","VXSurveySettingDate","VXSurveySettingTime","VXSurveySettingNPS","VXSurveySettingProportion","VXSurveySettingEvaluation","VXSurveySettingMatrixRadio","VXSurveySettingMatrixCheckBox","VXSurveySettingMatrixScore","VXSurveySettingMatrixInput","VXSurveySettingInputGroup","VXSurveySettingTemplate","componentFactoryResolver","changeDetectorRef","dynamicComponents","radio","checkbox","dropdown","line","remark","scaler","date","time","nps","proportion","evaluation","matrix_radio","matrix_checkbox","matrix_score","matrix_input","input_group","componentHost","clear","compFactory","resolveComponentFactory","createComponent","ComponentFactoryResolver","ChangeDetectorRef","ViewChild","read","ViewContainerRef","static","VXSurveyEditCascaderItem","row","itemEvent","addOptionEvent","delOptionEvent","itemClick","ContenteditableModel","elRef","zone","model","hasI18n","change","blur","focus","debounce","brMode","ngAfterViewInit","Directive","ElementRef","NgZone","EDITOR_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InlineEditorComponent","multi","_value","_classList","className","disabled","handleFocus","evt","handleBlur","v","onContenteditableModelChange","onTouched","writeValue","_","registerOnChange","fn","registerOnTouched","VXSurveyFirstPage","firstpage","VXSurveyLastPage","lastpage","ReplaceLinePipe","sanitized","transform","replace","Pipe","DomSanitizer","SafeHtmlPipe","bypassSecurityTrustHtml","icons","MenuFoldOutline","MenuUnfoldOutline","FormOutline","DashboardOutline","MinusSquareFill","MinusSquareOutline","MinusSquareTwoTone","MinusOutline","InboxOutline","registerLocaleData","zh","entryComponent","publicComponent","PIPES","PROVIDES","zh_CN","ɵ1","VXSurveyModule","NgModule","declarations","imports","HttpModule","HttpClientModule","FormsModule","ReactiveFormsModule","CommonModule","DragDropModule","OverlayModule","NgZorroAntdModule","VXFormModule","forChild","forRoot","entryComponents","exports","TranslateModule","NZ_I18N","useValue","ɵ0","NZ_ICONS"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXFormAntService {\r\n  btnEvent = new EventEmitter();\r\n  fieldEvent = new EventEmitter();\r\n  questionEvent = new EventEmitter();\r\n  optionEvent = new EventEmitter(); \r\n  dragDropEvent = new EventEmitter();\r\n\r\n  workList = [];\r\n\r\n  constructor() {}\r\n\r\n  fieldOperational(sign: string, field: VXFormFieldConfig) {\r\n    this.fieldEvent.emit({\r\n      sign: sign,\r\n      field: field\r\n    });\r\n  }\r\n  groupOperational(type: string, field: VXFormFieldConfig) {\r\n    this.btnEvent.emit({\r\n      type: type,\r\n      field: field\r\n    });\r\n  }\r\n  \r\n\r\n  \r\n  questionOperational(sign: string, field: VXFormFieldConfig) {\r\n    this.questionEvent.emit({\r\n      sign: sign,\r\n      field: field\r\n    });\r\n  }\r\n  \r\n  optionOperational(sign: string,option:any, field: VXFormFieldConfig) {\r\n    this.optionEvent.emit({\r\n      sign: sign,\r\n      option:option,\r\n      field: field\r\n    });\r\n  }\r\n\r\n  dragDropOperational(previousData:any,previousIndex:any,currentIndex:any) {\r\n    this.dragDropEvent.emit({\r\n      previousData: previousData,\r\n      previousIndex:previousIndex,\r\n      currentIndex: currentIndex\r\n    });\r\n  }\r\n  \r\n\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-radiogroup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n        \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyRadioGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  \r\n  dropOption(event: CdkDragDrop<string[]>) {\r\n     \r\n  }\r\n\r\n  //è®¾ç½®é»è¾\r\n  logicQuestion(){\r\n    this.service.questionOperational(\"logic\",this.field);\r\n  }\r\n  //æ·è´é¢ç®\r\n  copyQuestion(){ \r\n    this.service.questionOperational(\"copy\",this.field);\r\n  }\r\n  //å é¤é¢ç®\r\n  delQuestion()\r\n  {  \r\n    this.service.questionOperational(\"delete\",this.field);\r\n  }\r\n  //ç¹å»é¢ç®\r\n  activeQuestion(){\r\n    if(!this.active){ \r\n      this.service.questionOperational(\"active\",this.field);\r\n    }\r\n  }\r\n\r\n  //æ·»å éé¡¹\r\n  addOption(){\r\n    this.service.optionOperational(\"add\",\"\",this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions(){\r\n    this.service.optionOperational(\"adds\",\"\",this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option:any){ \r\n    this.service.optionOperational(\"delete\",option,this.field);\r\n  } \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n//cdkDrag\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n@Component({\r\n  selector: \"vxsurvey-drag-drop\",\r\n  template: `\r\n  <div class=\"formly-drag-drop\"  (cdkDropListDropped)=\"drop($event)\" cdkDropList [cdkDropListData]=\"field.fieldGroup\">\r\n  <div class=\"formly-drag-drop\">\r\n    <ng-container *ngFor=\"let field of field.fieldGroup;let index=index;\" > \r\n      <div  (click)=\"activeQuestion(field)\" *ngIf=\"field.active==true\" class=\"formly-drag-drop_wrap active\"> \r\n        <div class=\"field-operate\" >  \r\n          <span (click)=\"logicQuestion(field)\" nzTooltipTitle=\"é»è¾è®¾ç½®\" nzTooltipPlacement=\"top\" nz-tooltip>è®¾ç½®</span>\r\n          <span (click)=\"copyQuestion(field)\" nzTooltipTitle=\"å¤å¶é¢ç®\" nzTooltipPlacement=\"top\" nz-tooltip>å¤å¶</span>\r\n          <span (click)=\"delQuestion(field)\"  nzTooltipTitle=\"å é¤é¢ç®\" nzTooltipPlacement=\"top\" nz-tooltip>å é¤</span>\r\n        </div>\r\n        <div class=\"field-content\">\r\n        <vxform-field [field]=\"field\" [rownumber]=\"index+1\"></vxform-field>\r\n        </div>\r\n      </div>\r\n      \r\n      <div  (click)=\"activeQuestion(field)\" *ngIf=\"field.active!=true \" class=\"formly-drag-drop_wrap\" cdkDrag> \r\n         \r\n        <div class=\"field-content\">\r\n        <vxform-field [field]=\"field\" [rownumber]=\"index+1\"></vxform-field>\r\n        </div>\r\n      </div>\r\n    </ng-container> \r\n  </div>\r\n  \r\n  <ng-container *ngIf=\"field.fieldGroup==null || field.fieldGroup.length==0\" >\r\n  <div class=\"formly_empty\">\r\n    <div class=\"formly-drag-drop\"  (cdkDropListDropped)=\"drop($event)\" cdkDropList [cdkDropListData]=\"field.fieldGroup\">\r\n      è¯·æé¢åæå¥æ­¤åºå\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n  `\r\n})\r\nexport class VXSurveyDragDrop extends FieldType {\r\n  service: any;\r\n\r\n  get insertQuestionIndex(){\r\n    let result = -1;\r\n    if(this.to.index){\r\n      result = this.to.index;\r\n    }\r\n    return result;\r\n  };\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n  \r\n \r\n  drop(event: CdkDragDrop<string[]>) {\r\n   \r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      this.service.dragDropOperational(\r\n        event.previousContainer.data,\r\n        event.previousIndex,\r\n        event.currentIndex);\r\n    }\r\n  }\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  \r\n  //è®¾ç½®é»è¾\r\n  logicQuestion(field:any){\r\n    this.service.questionOperational(\"logic\",field);\r\n  }\r\n  //æ·è´é¢ç®\r\n  copyQuestion(field:any){ \r\n    this.service.questionOperational(\"copy\",field);\r\n  }\r\n  //å é¤é¢ç®\r\n  delQuestion(field:any)\r\n  {  \r\n    this.service.questionOperational(\"delete\",field);\r\n  }\r\n  //ç¹å»é¢ç®\r\n  activeQuestion(field:any){\r\n    if(!this.field.active){ \r\n      this.service.questionOperational(\"active\",field);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-radio\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\"  (cdkDropListDropped)=\"drop($event)\" cdkDropList  [cdkDropListData]=\"to.options\">\r\n          <div class=\"option_wrap basic_radio\" *ngFor=\"let item of to.options\" cdkDrag>\r\n            <div class=\"option\">\r\n              <label nz-radio nzDisabled=\"true\"></label> \r\n              <inline-editor  [(ngModel)]=\"item.label\" [active]=\"active\"></inline-editor>  \r\n            </div>\r\n            <div class=\"operate\"  (click)=\"deleteOption(item)\" *ngIf=\"active==true\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </div>\r\n          </div>\r\n        </div>  \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n          <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n        </div> \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-radio-group\r\n        [nzName]=\"'radiogroup-' + guid\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\"\r\n      >\r\n        <ng-container *ngFor=\"let item of to.options\">\r\n          <label nz-radio [nzValue]=\"item.value\">{{ item.label }}</label>\r\n        </ng-container>\r\n      </nz-radio-group>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyRadio extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) { \r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } \r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-checkbox\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n      <div class=\"question-wrap_title\">\r\n        <div class=\"required\">\r\n          <span *ngIf=\"to.required\">*</span>\r\n        </div>\r\n        <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>  \r\n      </div>\r\n      <div class=\"question-wrap_content\"  (cdkDropListDropped)=\"drop($event)\" cdkDropList  [cdkDropListData]=\"to.options\">\r\n        <div class=\"option_wrap basic_checkbox\" *ngFor=\"let item of to.options\" cdkDrag>\r\n          <div class=\"option\">\r\n            <label nz-checkbox nzDisabled=\"true\"></label> \r\n            <inline-editor [(ngModel)]=\"item.label\" [active]=\"active\"></inline-editor>  \r\n          </div>\r\n          <div class=\"operate\" (click)=\"deleteOption(item)\" *ngIf=\"active==true\">\r\n            <i class=\"icon-KT-Close\"></i>\r\n          </div>  \r\n        </div>\r\n      </div> \r\n      <div class=\"question-wrap_operate\">\r\n        <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n        <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n      </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-checkbox-wrapper\r\n        style=\"width: 100%;\"\r\n        (nzOnChange)=\"onChange($event)\"\r\n        [class.is-invalid]=\"showError\"\r\n      >\r\n        <ng-container *ngFor=\"let option of to.options; let i = index\">\r\n          <label\r\n            nz-checkbox\r\n            [nzValue]=\"option.value\"\r\n            [ngModel]=\"getControlChecked(formControl.value, option)\"\r\n            [vxFormAttributes]=\"field\"\r\n            >{{ option.label }}</label>\r\n        </ng-container>\r\n      </nz-checkbox-wrapper> \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyCheckBox extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n \r\n  //æ·»å éé¡¹\r\n  addOption(){\r\n    this.service.optionOperational(\"add\",\"\",this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions(){\r\n    this.service.optionOperational(\"adds\",\"\",this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option:any){ \r\n    this.service.optionOperational(\"delete\",option,this.field);\r\n  }\r\n  \r\n  onChange(values: string[]) {\r\n    let res: any = [];\r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach(value => {\r\n        if (this.to.options !== undefined && this.to.options !== null) {\r\n          this.to.options.forEach((option: any) => {\r\n            if (option[\"value\"] === value) {\r\n              res.push(value);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getCheckStatus(option: any) {\r\n    this.formControl.value;\r\n  }\r\n\r\n  public getControlChecked(values: any, option: any) {\r\n    let result = false;\r\n    if (option && values) {\r\n      result = values.some((value: any) => {\r\n        return value == option.value;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) { \r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } \r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-dropdown\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n      <div class=\"question-wrap_title\">\r\n        <div class=\"required\">\r\n          <span *ngIf=\"to.required\">*</span>\r\n        </div>\r\n        <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>  \r\n      </div>\r\n      <div class=\"question-wrap_content\"  (cdkDropListDropped)=\"drop($event)\" cdkDropList  [cdkDropListData]=\"to.options\">\r\n        <div class=\"option_wrap basic_dropdown\" *ngFor=\"let item of to.options\" cdkDrag>\r\n          <div class=\"option\">\r\n          <span class=\"handle\"></span>\r\n            <inline-editor [(ngModel)]=\"item.label\"></inline-editor>  \r\n          </div>\r\n          <div class=\"operate\"  (click)=\"deleteOption(item)\">\r\n            <i class=\"icon-KT-Close\"></i>\r\n          </div>\r\n        </div>\r\n      </div> \r\n      <div class=\"question-wrap_operate\">\r\n        <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n        <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n      </div> \r\n    </ng-container> \r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-select \r\n        nzAllowClear \r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\"\r\n        nzPlaceHolder=\"è¯·éæ©\" \r\n      >\r\n        <ng-container *ngFor=\"let item of to.options\">\r\n          <nz-option\r\n            [nzLabel]=\"item.label\"\r\n            [nzValue]=\"item.value\"\r\n          ></nz-option>\r\n        </ng-container>\r\n      </nz-select>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyDropdown extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n \r\n\r\n  //æ·»å éé¡¹\r\n  addOption(){\r\n    this.service.optionOperational(\"add\",\"\",this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions(){\r\n    this.service.optionOperational(\"adds\",\"\",this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option:any){ \r\n    this.service.optionOperational(\"delete\",option,this.field);\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) { \r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } \r\n  } \r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NzModalService, UploadFile } from \"ng-zorro-antd\";\r\n\r\ntype ModalSizeType = \"small\" | \"medium\" | \"large\";\r\nexport interface ModalOptions {\r\n  nzContent: any; //ç»ä»¶\r\n  size: ModalSizeType; //å°/ä¸­/å¤§\r\n  nzTitle?: string; //æ é¢\r\n  primaryLabel?: string; //æé®âlabelâ,ä¸ä¼ é»è®¤ä¸ºâç¡®å®â\r\n  vertical?: boolean; //å¼¹æ¡æ¯å¦ä¸ºåç´å±ä¸­ï¼é»è®¤ä¸åç´å±ä¸­\r\n  hideBtn?: boolean; //æ¯å¦éèfooteræé®\r\n  showResetBtn?: boolean; //æ¯å¦æ¾ç¤ºéç½®æé®\r\n}\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class VXDialogService {\r\n  constructor(public modalService: NzModalService) {}\r\n  switchSize(size: any) {\r\n    const obj = {\r\n      width: 700,\r\n      height: 500\r\n    };\r\n    switch (size) {\r\n      case \"small\":\r\n        obj.width = 530;\r\n        obj.height = 400;\r\n        break;\r\n      case \"medium\":\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n      case \"large\":\r\n        obj.width = 950;\r\n        obj.height = 600;\r\n        break;\r\n      default:\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n    }\r\n    return obj;\r\n  }\r\n  public CreateModelDialog(\r\n    modalOptions: ModalOptions,\r\n    params: any,\r\n    callback: any\r\n  ) {\r\n    const width = this.switchSize(modalOptions.size).width;\r\n    const height = this.switchSize(modalOptions.size).height;\r\n    const modal: any = this.modalService.create({\r\n      nzTitle: modalOptions.nzTitle ? modalOptions.nzTitle : \"æç¤º\",\r\n      nzWidth: width + \"px\",\r\n      nzClosable: true,\r\n      nzMaskClosable: false,\r\n      nzWrapClassName: modalOptions[\"vertical\"] ? \"vertical-center-modal\" : \"\",\r\n      nzBodyStyle: {\r\n        padding: \"0\",\r\n        height: !modalOptions[\"hideBtn\"]\r\n          ? height - 107 + \"px\"\r\n          : height - 54 + \"px\"\r\n      },\r\n      nzContent: modalOptions.nzContent,\r\n      nzFooter: !modalOptions[\"hideBtn\"]\r\n        ? [\r\n            {\r\n              show: true,\r\n              label: \"åæ¶\",\r\n              type: \"default\",\r\n              onClick: componentInstance => {\r\n                modal.destroy();\r\n              }\r\n            },\r\n            {\r\n              show: modalOptions[\"showResetBtn\"],\r\n              label: \"éç½®\",\r\n              type: \"default\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            },\r\n            {\r\n              show: true,\r\n              label: modalOptions[\"primaryLabel\"]\r\n                ? modalOptions[\"primaryLabel\"]\r\n                : \"ç¡®å®\",\r\n              type: \"primary\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            }\r\n          ]\r\n        : null,\r\n      nzOnOk: data => {},\r\n      nzOnCancel: data => {},\r\n      nzComponentParams: params\r\n    });\r\n\r\n    modal.afterClose.subscribe((result: any) => {\r\n      if (result) {\r\n        callback(result);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-editcascader\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXSurveyEditCascader implements OnInit, OnChanges {\r\n  \r\n  cascaderData: any[] = [];\r\n\r\n  @Input() set fieldConfig(value:VXFormFieldConfig){\r\n    if(value!=undefined && value!=null && value.templateOptions !=undefined && value.templateOptions!=null && value.templateOptions.options!=undefined && value.templateOptions.options!=null){\r\n      if(Array.isArray(value.templateOptions.options)){\r\n        this.cascaderData = _.cloneDeep(value.templateOptions.options);\r\n      }else{\r\n        this.cascaderData = []; \r\n      }\r\n    }\r\n    this.row1.data = this.cascaderData;\r\n  };\r\n\r\n  @Input() set data(value: any[]) {\r\n    \r\n  }\r\n\r\n  get data() {\r\n    return this.cascaderData;\r\n  }\r\n\r\n  row1: any = {\r\n    cascader: 1,\r\n    current: \"\",\r\n    showadd: true,\r\n    data: []\r\n  }\r\n  row2: any = {\r\n    cascader: 2,\r\n    current: \"\",\r\n    showadd: false,\r\n    data: []\r\n  }\r\n  row3: any = {\r\n    cascader: 3,\r\n    current: \"\",\r\n    showadd: false,\r\n    data: []\r\n  }\r\n  row4: any = {\r\n    cascader: 4,\r\n    current: \"\",\r\n    showadd: false,\r\n    data: []\r\n  }\r\n\r\n\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  } \r\n\r\n  cascaderItem(item: any, type: number) {\r\n    let showadd = true; \r\n    switch (type) {\r\n      case 1:\r\n        this.row1.current = item.value;\r\n        this.row2.cascader = 2;\r\n        this.row2.showadd = showadd;\r\n        this.row2.data = item.children ? item.children : [];\r\n\r\n        this.row3.current = \"\";\r\n        this.row3.showadd = false;\r\n        this.row3.data = [];\r\n\r\n        this.row4.current = \"\";\r\n        this.row4.showadd = false;\r\n        this.row4.data = [];\r\n        break;\r\n      case 2:\r\n        this.row2.current = item.value;\r\n        this.row3.cascader = 3;\r\n        this.row3.showadd = showadd;\r\n        this.row3.data = item.children ? item.children : [];\r\n\r\n        this.row4.current = \"\";\r\n        this.row4.showadd = false;\r\n        this.row4.data = [];\r\n        break;\r\n      case 3:\r\n        this.row3.current = item.value;\r\n        this.row4.cascader = 4;\r\n        this.row4.showadd = showadd;\r\n        this.row4.data = item.children ? item.children : [];\r\n        break;\r\n      case 4:\r\n        this.row4.current = item.value;\r\n        break;\r\n    }\r\n  }\r\n\r\n  addOption(e: number) {\r\n\r\n  }\r\n\r\n  delOption(e: any, type: number) {\r\n    if (e) {\r\n      switch (type) {\r\n        case 1:\r\n          this.row1.data.forEach((item: any, index: number, obj: any) => {\r\n            if (e.value == item.value) {\r\n              obj.splice(index, 1);\r\n            }\r\n          });\r\n          this.row2 = [];\r\n          this.row3 = [];\r\n          this.row4 = [];\r\n          break;\r\n        case 2:\r\n          this.row2.data.forEach((item: any, index: number, obj: any) => {\r\n            if (e.value == item.value) {\r\n              obj.splice(index, 1);\r\n            }\r\n          });\r\n          this.row3 = [];\r\n          this.row4 = [];\r\n          break;\r\n        case 3:\r\n          this.row3.data.forEach((item: any, index: number, obj: any) => {\r\n            if (e.value == item.value) {\r\n              obj.splice(index, 1);\r\n            }\r\n          });\r\n          this.row4 = [];\r\n          break;\r\n        case 4:\r\n          this.row4.data.forEach((item: any, index: number, obj: any) => {\r\n            if (e.value == item.value) {\r\n              obj.splice(index, 1);\r\n            }\r\n          });\r\n          break;\r\n      }\r\n\r\n    }\r\n  }\r\n}","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { VXDialogService } from \"../../service/dialog.service\";\r\n\r\nimport { VXSurveyEditCascader } from \"../../components/edit-cascader/index.component\";\r\n@Component({\r\n  selector: \"vxsurvey-cascader\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>   \r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap select_cascader\">\r\n            <nz-cascader [nzOptions]=\"to.options\" [nzShowSearch]=\"true\" [nzDisabled]=\"true\">\r\n            </nz-cascader>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addOption()\">ç¼è¾éé¡¹</span>  \r\n        </div> \r\n    </ng-container>\r\n\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-cascader nzChangeOnSelect [nzOptions]=\"to.options\" nzPlaceHolder=\"è¯·éæ©\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-cascader>\r\n       \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyCascader extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  values: string[] | null = null;\r\n  constructor(\r\n    dyService: VXFormAntService,\r\n    private modal: NzModalService,\r\n    public vxDialogService: VXDialogService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n \r\n  //æ·»å éé¡¹\r\n  addOption() { \r\n    let para = {\r\n      fieldConfig: this.field\r\n    }; \r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"éé¡¹ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXSurveyEditCascader\r\n      },\r\n      para,\r\n      (instance: any, modal: any) => {\r\n        let optionlist = instance.cascaderData;\r\n        this.to.options = optionlist;\r\n        \r\n        modal.destroy();\r\n      }\r\n    );\r\n\r\n  }  \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-scaler\",\r\n  template: `\r\n    \r\n  `\r\n})\r\nexport class VXSurveyScaler extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  get scalerData(){\r\n    let result:any[]=[];\r\n    if(this.to!=undefined && this.to!=null && this.to.beginNumber !=undefined && this.to.beginNumber!=null  && this.to.max !=undefined && this.to.max!=null ){\r\n     \r\n      let begin=this.to.beginNumber;\r\n      for(let i=0;i<this.to.max;i++){\r\n        result.push({\r\n          value:begin,\r\n          label:begin\r\n        });\r\n        begin=begin+1;\r\n      }\r\n    }\r\n    console.log(result)\r\n    return result;\r\n  }\r\n \r\n}\r\n\r\n// <ng-container *ngIf=\"formStatus !== 0\"> \r\n//       <div class=\"question-wrap_title\">\r\n//         <div class=\"required\">\r\n//           <span *ngIf=\"to.required\">*</span>\r\n//         </div>\r\n//         <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>   \r\n//       </div>\r\n//       <div class=\"question-wrap_content\">\r\n//         <div class=\"option_wrap basic_scaler\">\r\n//           <ng-container *ngIf=\"to.type=='number'\">\r\n//             <nz-radio-group> \r\n//               <label nz-radio nzValue=\"A\">A</label>\r\n//               <label nz-radio nzValue=\"B\">B</label>\r\n//               <label nz-radio nzValue=\"C\">C</label>\r\n//               <label nz-radio nzValue=\"D\">D</label>  \r\n//             </nz-radio-group>\r\n//           </ng-container>\r\n//         </div>\r\n//       </div> \r\n//       <div class=\"question-wrap_operate\">\r\n//         <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n//         <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n//       </div> \r\n//     </ng-container>\r\n\r\n//     <ng-container *ngIf=\"formStatus === 0\">\r\n//       <ng-container *ngIf=\"editor === true\">\r\n//         <nz-radio-group\r\n//           [nzName]=\"'radiogroup-' + guid\"\r\n//           [formControl]=\"formControl\"\r\n//           [vxFormAttributes]=\"field\"\r\n//           [class.is-invalid]=\"showError\"\r\n//         >\r\n//           <ng-container *ngFor=\"let item of to.options\">\r\n//             <label nz-radio [nzValue]=\"item.value\">{{ item.label }}</label>\r\n//           </ng-container>\r\n//         </nz-radio-group>\r\n//         <div class=\"tips\">\r\n//           <i\r\n//             class=\"icon-bangzhu\"\r\n//             [nzTooltipTitle]=\"tips\"\r\n//             nzTooltipPlacement=\"top\"\r\n//             nz-tooltip\r\n//             *ngIf=\"tips != ''\"\r\n//           ></i>\r\n//         </div>\r\n//       </ng-container>\r\n\r\n//       <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textSingle }}</div>\r\n//     </ng-container>","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-score\",\r\n  template: `\r\n    \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>  \r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap basic_score\">\r\n            \r\n            <nz-rate *ngIf=\"to.type=='start'\" nzAllowHalf [nzCount]=\"to.setting.max\"></nz-rate>\r\n            <nz-rate *ngIf=\"to.type=='heart'\" nzAllowHalf [nzCharacter]=\"characterIconHeart\" [nzCount]=\"to.setting.max\"></nz-rate>\r\n            <nz-rate *ngIf=\"to.type=='good'\" nzAllowHalf [nzCharacter]=\"characterIconGood\" [nzCount]=\"to.setting.max\"></nz-rate>\r\n            <nz-rate *ngIf=\"to.type=='other'\" nzAllowHalf [nzCharacter]=\"characterIconOther\" [nzCount]=\"to.setting.max\"></nz-rate> \r\n            <ng-template #characterIconHeart> \r\n              å¿ \r\n            </ng-template>\r\n            <ng-template #characterIconGood>\r\n              èµ  \r\n            </ng-template>\r\n            <ng-template #characterIconOther>\r\n              {{to.setting.label}}  \r\n            </ng-template>  \r\n          </div>\r\n        </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-rate *ngIf=\"to.type=='start'\" nzAllowHalf [nzCount]=\"to.setting.max\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-rate>\r\n      <nz-rate *ngIf=\"to.type=='heart'\" nzAllowHalf [nzCharacter]=\"characterIconHeart\" [nzCount]=\"to.setting.max\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-rate>\r\n      <nz-rate *ngIf=\"to.type=='good'\" nzAllowHalf [nzCharacter]=\"characterIconGood\" [nzCount]=\"to.setting.max\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-rate>\r\n      <nz-rate *ngIf=\"to.type=='other'\" nzAllowHalf [nzCharacter]=\"characterIconOther\" [nzCount]=\"to.setting.max\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-rate> \r\n      <ng-template #characterIconHeart> \r\n        å¿ \r\n      </ng-template>\r\n      <ng-template #characterIconGood>\r\n        èµ  \r\n      </ng-template>\r\n      <ng-template #characterIconOther>\r\n        {{to.setting.label}}  \r\n      </ng-template>  \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyScore extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n \r\n  //æ·»å éé¡¹\r\n  addOption(){\r\n    this.service.optionOperational(\"add\",\"\",this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions(){\r\n    this.service.optionOperational(\"adds\",\"\",this.field);\r\n  }  \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-line\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n    <div class=\"question-wrap_content\">\r\n      <div class=\"option_wrap basic_line\" >\r\n        <div class=\"line\"></div>\r\n      </div>\r\n    </div>   \r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"formStatus === 0\">\r\n    <div class=\"line\"></div>\r\n  </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyLine extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-remark\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"question-wrap_content\">\r\n        <div class=\"option_wrap basic_remark\" > \r\n            <inline-editor [(ngModel)]=\"to.label\"  [active]=\"active\"></inline-editor> \r\n        </div>\r\n      </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\"> \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyRemark extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-input\",\r\n  template: `  \r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"question-wrap_title\">\r\n        <div class=\"required\">\r\n          <span *ngIf=\"to.required\">*</span>\r\n        </div>\r\n        <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"></inline-editor>   \r\n      </div>\r\n      <div class=\"question-wrap_content\">\r\n        <div class=\"option_wrap basic_input\" >\r\n          <ng-container *ngIf=\"to.setting.size=='small'\">\r\n            <input nz-input placeholder=\"\" [disabled]=\"true\" />\r\n          </ng-container>\r\n          <ng-container *ngIf=\"to.setting.size=='default'\">\r\n            <textarea rows=\"2\" nz-input [disabled]=\"true\" ></textarea>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"to.setting.size=='large'\">\r\n            <textarea rows=\"4\" nz-input [disabled]=\"true\" ></textarea>\r\n          </ng-container>\r\n        </div>\r\n      </div>   \r\n  </ng-container>\r\n\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"to.setting.size=='small'\">\r\n        <input nz-input  \r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\" />\r\n      </ng-container>\r\n      <ng-container *ngIf=\"to.setting.size=='default'\">\r\n        <textarea rows=\"2\" nz-input  \r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"  ></textarea>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"to.setting.size=='large'\">\r\n        <textarea rows=\"4\" nz-input  \r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"></textarea>\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyInput extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-date\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"question-wrap_title\">\r\n        <div class=\"required\">\r\n          <span *ngIf=\"to.required\">*</span>\r\n        </div>\r\n        <inline-editor [(ngModel)]=\"to.label\"></inline-editor>  \r\n      </div>\r\n      <div class=\"question-wrap_content\">\r\n        <div class=\"option_wrap date\" > \r\n          <nz-date-picker nzDisabled></nz-date-picker>\r\n        </div>\r\n      </div>   \r\n    </ng-container>\r\n\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-date-picker \r\n        nzShowTime\r\n        [nzFormat]=\"format\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\"\r\n      ></nz-date-picker>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyDate extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  get format(){\r\n    let result=\"yyyy-MM-dd\"; \r\n    if(this.to[\"format\"]!=undefined && this.to[\"format\"]!=null && this.to[\"format\"]!=\"\"){\r\n      result = this.to[\"format\"];\r\n    }\r\n    return result;\r\n  }\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-time\",\r\n  template: `\r\n    \r\n    \r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"question-wrap_title\">\r\n        <div class=\"required\">\r\n          <span *ngIf=\"to.required\">*</span>\r\n        </div>\r\n        <inline-editor [(ngModel)]=\"to.label\"></inline-editor>  \r\n      </div>\r\n      <div class=\"question-wrap_content\">\r\n        <div class=\"option_wrap time\" > \r\n          <nz-time-picker nzFormat=\"HH:mm\" [nzDisabled]=\"true\"></nz-time-picker>\r\n        </div>\r\n      </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\"> \r\n      <nz-time-picker nzFormat=\"HH:mm\"\r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\">\r\n      </nz-time-picker> \r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyTime extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n   \r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-nps\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap basic_nps\">\r\n            <div class=\"option\" *ngFor=\"let item of to.options\"> \r\n               {{item.label}} \r\n            </div> \r\n          </div>\r\n          \r\n          <div class=\"option_wrap_text\">\r\n            <span class=\"fl\">ä¸å¯è½</span>\r\n            <span class=\"fr\">ææå¯è½</span>\r\n          </div>\r\n        </div>  \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div class=\"option_wrap\">\r\n        <nz-radio-group\r\n          [nzName]=\"'radiogroup-' + guid\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\"> \r\n            <label nz-radio-button [nzValue]=\"item.value\">{{ item.label }}</label>\r\n          </ng-container>\r\n        </nz-radio-group> \r\n      </div> \r\n      <div class=\"option_wrap_text\">\r\n        <span>ä¸å¯è½</span>\r\n        <span>ææå¯è½</span>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyNPS extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-proportion\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap basic_radio\"  *ngFor=\"let item of to.options\">\r\n            <div class=\"option\">\r\n            \r\n            </div>\r\n            <div class=\"operate\"  (click)=\"deleteOption(item)\" *ngIf=\"active==true\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n          <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n        </div> \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-radio-group\r\n          [nzName]=\"'radiogroup-' + guid\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\">\r\n            <label nz-radio [nzValue]=\"item.value\">{{ item.label }}</label>\r\n          </ng-container>\r\n        </nz-radio-group>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textSingle }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyProportion extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n  marks: any = {\r\n    0: '0',\r\n    20: '20',\r\n    40: '40',\r\n    60: '60',\r\n    80: '80', \r\n    100: '100'\r\n  };\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-editevaluation\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXSurveyEditEvaluation implements OnInit, OnChanges {\r\n  \r\n  start=1;\r\n  optionSelectedIndex=0;\r\n  currentSelected:any={};\r\n \r\n  editevaluationData: any[] = [];\r\n\r\n  @Input() set fieldConfig(value:VXFormFieldConfig){\r\n    console.log(JSON.stringify(value))\r\n    if(value!=undefined && value!=null && value.templateOptions !=undefined && value.templateOptions!=null && value.templateOptions.options!=undefined && value.templateOptions.options!=null){\r\n      if(Array.isArray(value.templateOptions.options)){\r\n        this.editevaluationData = _.cloneDeep(value.templateOptions.options);\r\n        this.currentSelected = this.editevaluationData[0]\r\n      }else{\r\n        this.editevaluationData = []; \r\n      }\r\n    }else{\r\n      this.editevaluationData =[];\r\n    }\r\n\r\n  }; \r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  } \r\n\r\n  optionClick(event:any){\r\n    this.start = event+1;\r\n    this.currentSelected = this.editevaluationData[event]\r\n  }\r\n\r\n  getOptionTag(){\r\n    return this.currentSelected.tag.split(/[\\s\\n]/);\r\n  }\r\n}","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { NzTreeHigherOrderServiceToken } from \"ng-zorro-antd\";\r\nimport { VXDialogService } from \"../../service/dialog.service\";\r\nimport { VXSurveyEditEvaluation } from \"../../components/edit-evaluation/index.component\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-evaluation\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap basic_evaluation\">\r\n            <nz-rate [(ngModel)]=\"start\" [nzCount]=\"5\"\t(ngModelChange)=\"numberChange()\"></nz-rate>\r\n            <div class=\"label\">\"{{startContent.label}}\"</div>\r\n            <div class=\"tag\">\r\n              <ng-container *ngFor=\"let item of startContent.tags\">\r\n                <span>{{item}}</span>\r\n              </ng-container>\r\n              <label (click)=\"editStart()\">\r\n                ç¼è¾\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div> \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-rate [nzCount]=\"5\" [(ngModel)]=\"start\" \t(ngModelChange)=\"numberChange()\" \r\n        [formControl]=\"formControl\"\r\n        [vxFormAttributes]=\"field\">\r\n      </nz-rate>\r\n      <div class=\"label\">\"{{startContent.label}}\"</div>\r\n      <div class=\"tag\">\r\n        <ng-container *ngFor=\"let item of startContent.tags\">\r\n          <span>{{item}}</span>\r\n        </ng-container> \r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyEvaluation extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  start: number = 0;\r\n  _startContent: any = {\r\n    label: \"\",\r\n    tags: []\r\n  }\r\n\r\n  get startContent() {\r\n    if (this._startContent.label == \"\" && this.to.options != undefined) {\r\n      this.to.options.forEach((item: any) => {\r\n        if (item.value == this.start) {\r\n          this._startContent.label = item.label;\r\n\r\n          this._startContent.tags = item.tag.split(/[\\s\\n]/);\r\n        }\r\n      });\r\n    }\r\n    return this._startContent;\r\n  }\r\n\r\n  constructor(dyService: VXFormAntService,\r\n    public vxDialogService: VXDialogService) {\r\n    super();\r\n    this.service = dyService;\r\n    this.start = 1;\r\n  }\r\n\r\n  numberChange() {\r\n    if (this.to.options != undefined) {\r\n      this.to.options.forEach((item: any) => {\r\n        if (item.value == this.start) {\r\n          this._startContent.label = item.label;\r\n\r\n          this._startContent.tags = item.tag.split(/[\\s\\n]/);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  editStart() {\r\n    let para = {\r\n      fieldConfig: this.field\r\n    };\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"éé¡¹ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXSurveyEditEvaluation\r\n      },\r\n      para,\r\n      (instance: any, modal: any) => {\r\n        this.to.options = instance.editevaluationData;\r\n        this.numberChange();\r\n        modal.destroy();\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-matrix_radio\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap matrix_radio\">\r\n            <div class=\"option_table\">\r\n              <table>\r\n                <tr>\r\n                  <td></td>\r\n                  <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n                </tr>\r\n                <tr *ngFor=\"let itemTR of to.subtitle\">\r\n                  <td>{{itemTR.label}}</td>\r\n                  <td *ngFor=\"let itemTD of to.options\">\r\n                  <label nz-radio nzDisabled=\"true\"></label> \r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            <div class=\"option_vertical\">\r\n              <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addSubTitle()\">æ·»å åç©éµè¡</span>  \r\n        </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <table class=\"option_wrap\">\r\n        <tr>\r\n          <td></td>\r\n          <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n        </tr>\r\n        <tr *ngFor=\"let itemTR of to.subtitle\">\r\n          <td>{{itemTR.label}}</td>\r\n          <td *ngFor=\"let itemTD of to.options\"> \r\n            <input [id]=\"itemTR.value+'-'+itemTD.value\" type=\"radio\" [value]=\"itemTD.value\" [name]=\"itemTR.value\" [ngModel]=\"getControlChecked(itemTR,itemTD)\"  (ngModelChange)=\"controlModelChange($event,itemTR,itemTD)\">\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyMatrixRadio extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n\r\n  \r\n  \r\n  controlModelChange(value:any,subtitle:any,option:any){ \r\n    let values:any = this.formControl.value || [];\r\n\r\n    if (values != undefined && values != null && values.length > 0) {\r\n\r\n      if(!values.some((item:any)=>{return item.groupid==subtitle.value})){\r\n        values.push({\r\n          groupid:subtitle.value,\r\n          options:[{\r\n            optionid:option.value,\r\n            optionvalue:true\r\n          }]\r\n        })\r\n      }else{\r\n        values.forEach((item:any)=>{\r\n          if(item.groupid==subtitle.value){\r\n            item.options=[{\r\n              optionid:option.value,\r\n              optionvalue:true\r\n            }]\r\n          }\r\n        });\r\n      } \r\n    }else{\r\n      values.push({\r\n        groupid:subtitle.value,\r\n        options:[{\r\n          optionid:option.value,\r\n          optionvalue:true\r\n        }]\r\n      })\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getControlChecked(subtitle: any, option: any) {\r\n  \r\n    let result = \"\";\r\n    let values = this.formControl.value; \r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(value.groupid==subtitle.value){\r\n          result = value.options[0].optionid ;\r\n        }\r\n      });\r\n    }  \r\n    return result;\r\n  } \r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ·»å è¡\r\n  addSubTitle() {\r\n    this.service.optionOperational(\"subtitle\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-matrix_checkbox\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap matrix_checkbox\">\r\n            <div class=\"option_table\">\r\n              <table>\r\n                <tr>\r\n                  <td></td>\r\n                  <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n                </tr>\r\n                <tr *ngFor=\"let itemTR of to.subtitle\">\r\n                  <td>{{itemTR.label}}</td>\r\n                  <td *ngFor=\"let itemTD of to.options\">\r\n                  <label nz-checkbox nzDisabled=\"true\"></label> \r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            <div class=\"option_vertical\">\r\n              <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addSubTitle()\">æ·»å åç©éµè¡</span>  \r\n        </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n    <nz-checkbox-wrapper\r\n      style=\"width: 100%;\"\r\n      (nzOnChange)=\"onChange($event)\"\r\n      [class.is-invalid]=\"showError\">\r\n      <table class=\"option_wrap\">\r\n        <tr>\r\n          <td></td>\r\n          <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n        </tr>\r\n        <tr *ngFor=\"let itemTR of to.subtitle\">\r\n          <td>{{itemTR.label}}</td>\r\n          <td *ngFor=\"let itemTD of to.options\">\r\n          <label nz-checkbox\r\n            [nzValue]=\"getMatrixOption(itemTR,itemTD)\"\r\n            [ngModel]=\"getControlChecked(itemTR,itemTD)\">\r\n          </label> \r\n          </td>\r\n        </tr> \r\n      </table>\r\n      </nz-checkbox-wrapper>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyMatrixCheckBox extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  getMatrixOption(subtitle:any,option:any){\r\n    return {\r\n      groupid:subtitle.value,\r\n      optionid:option.value\r\n    }\r\n  }\r\n\r\n  onChange(values: any[]){\r\n    let res: any = [];\r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(!res.some((item:any)=>{return item.groupid==value.groupid})){\r\n          res.push(\r\n            {\r\n              groupid:value.groupid,\r\n              options:[{\r\n                optionid:value.optionid,\r\n                optionvalue:true\r\n              }]\r\n            }\r\n          )\r\n        }else{\r\n          res.forEach((item:any)=>{\r\n            if(item.groupid==value.groupid){\r\n              item.options.push({\r\n                optionid:value.optionid,\r\n                optionvalue:true\r\n              })\r\n            }\r\n          })\r\n        } \r\n      })\r\n    }\r\n    this.formControl.patchValue(res);\r\n    this.formControl.markAsTouched();\r\n  }\r\n  \r\n  getControlChecked(subtitle: any, option: any) {\r\n  \r\n    let result = false;\r\n    let values = this.formControl.value; \r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(value.groupid==subtitle.value){\r\n          value.options.forEach((item:any)=>{\r\n            if(item.optionid==option.value){\r\n              result=item.optionvalue;\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }  \r\n    return result;\r\n  }\r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ·»å è¡\r\n  addSubTitle() {\r\n    this.service.optionOperational(\"subtitle\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-matrix_score\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap matrix_score\">\r\n            <div class=\"option_table\">\r\n              <table>\r\n                <tr>\r\n                  <td></td>\r\n                  <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n                </tr>\r\n                <tr *ngFor=\"let itemTR of to.subtitle\">\r\n                  <td>{{itemTR.label}}</td>\r\n                  <td *ngFor=\"let itemTD of to.options\">\r\n                    <nz-rate [nzCount]=\"5\"></nz-rate>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            <div class=\"option_vertical\">\r\n              <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addSubTitle()\">æ·»å åç©éµè¡</span>  \r\n        </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <table class=\"option_wrap\">\r\n        <tr>\r\n          <td></td>\r\n          <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n        </tr>\r\n        <tr *ngFor=\"let itemTR of to.subtitle\">\r\n          <td>{{itemTR.label}}</td>\r\n          <td *ngFor=\"let itemTD of to.options\">\r\n            <nz-rate [nzCount]=\"5\" [ngModel]=\"getControlChecked(itemTR,itemTD)\" (ngModelChange)=\"controlModelChange($event,itemTR,itemTD)\"></nz-rate>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyMatrixScore extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n\r\n  controlModelChange(value:any,subtitle:any,option:any){ \r\n    let values:any = this.formControl.value || [];\r\n\r\n    if (values != undefined && values != null && values.length > 0) {\r\n\r\n      if(!values.some((item:any)=>{return item.groupid==subtitle.value})){\r\n        values.push({\r\n          groupid:subtitle.value,\r\n          options:[{\r\n            optionid:option.value,\r\n            optionvalue:value\r\n          }]\r\n        })\r\n      }else{\r\n        values.forEach((item:any)=>{\r\n          if(item.groupid==subtitle.value){\r\n            if(!item.options.some((op:any)=>{return op.optionid==option.value})){\r\n              item.options.push({\r\n                optionid:option.value,\r\n                optionvalue:value\r\n              })\r\n            }else{\r\n              item.options.forEach((op:any)=>{\r\n                if(op.optionid==option.value){\r\n                  op.optionvalue=value\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      } \r\n    }else{\r\n      values.push({\r\n        groupid:subtitle.value,\r\n        options:[{\r\n          optionid:option.value,\r\n          optionvalue:value\r\n        }]\r\n      })\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getControlChecked(subtitle: any, option: any) {\r\n  \r\n    let result = 0;\r\n    let values = this.formControl.value; \r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(value.groupid==subtitle.value){\r\n          value.options.forEach((item:any)=>{\r\n            if(item.optionid==option.value){\r\n              result=item.optionvalue;\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }  \r\n    return result;\r\n  }\r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ·»å è¡\r\n  addSubTitle() {\r\n    this.service.optionOperational(\"subtitle\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-matrix_input\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap matrix_input\">\r\n            <div class=\"option_table\">\r\n              <table>\r\n                <tr>\r\n                  <td></td>\r\n                  <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n                </tr>\r\n                <tr *ngFor=\"let itemTR of to.subtitle\">\r\n                  <td>{{itemTR.label}}</td>\r\n                  <td *ngFor=\"let itemTD of to.options\">\r\n                    <input nz-input placeholder=\"\" [disabled]=\"true\" />\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n            <div class=\"option_vertical\">\r\n              <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addSubTitle()\">æ·»å åç©éµè¡</span>  \r\n        </div>   \r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <table class=\"option_wrap\">\r\n        <tr>\r\n          <td></td>\r\n          <td *ngFor=\"let itemTD of to.options\">{{itemTD.label}}</td>\r\n        </tr>\r\n        <tr *ngFor=\"let itemTR of to.subtitle\">\r\n          <td>{{itemTR.label}}</td>\r\n          <td *ngFor=\"let itemTD of to.options\">\r\n            <input nz-input [ngModel]=\"getControlChecked(itemTR,itemTD)\"  (ngModelChange)=\"controlModelChange($event,itemTR,itemTD)\"/>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyMatrixInput extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }  \r\n  \r\n  controlModelChange(value:any,subtitle:any,option:any){ \r\n    let values:any = this.formControl.value || [];\r\n\r\n    if (values != undefined && values != null && values.length > 0) {\r\n\r\n      if(!values.some((item:any)=>{return item.groupid==subtitle.value})){\r\n        values.push({\r\n          groupid:subtitle.value,\r\n          options:[{\r\n            optionid:option.value,\r\n            optionvalue:value\r\n          }]\r\n        })\r\n      }else{\r\n        values.forEach((item:any)=>{\r\n          if(item.groupid==subtitle.value){\r\n            if(!item.options.some((op:any)=>{return op.optionid==option.value})){\r\n              item.options.push({\r\n                optionid:option.value,\r\n                optionvalue:value\r\n              })\r\n            }else{\r\n              item.options.forEach((op:any)=>{\r\n                if(op.optionid==option.value){\r\n                  op.optionvalue=value\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      } \r\n    }else{\r\n      values.push({\r\n        groupid:subtitle.value,\r\n        options:[{\r\n          optionid:option.value,\r\n          optionvalue:value\r\n        }]\r\n      })\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getControlChecked(subtitle: any, option: any) {\r\n  \r\n    let result = null;\r\n    let values = this.formControl.value; \r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(value.groupid==subtitle.value){\r\n          value.options.forEach((item:any)=>{\r\n            if(item.optionid==option.value){\r\n              result=item.optionvalue;\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }  \r\n    return result;\r\n  }\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ·»å è¡\r\n  addSubTitle() {\r\n    this.service.optionOperational(\"subtitle\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: \"vxsurvey-input_group\",\r\n  template: ` \r\n    <ng-container *ngIf=\"formStatus !== 0\"> \r\n        <div class=\"question-wrap_title\">\r\n          <div class=\"required\">\r\n            <span *ngIf=\"to.required\">*</span>\r\n          </div>\r\n          <inline-editor [(ngModel)]=\"to.label\" [active]=\"active\"\r\n          ></inline-editor>\r\n        </div>\r\n        <div class=\"question-wrap_content\">\r\n          <div class=\"option_wrap basic_input_group\"  *ngFor=\"let item of to.options\">\r\n            <div class=\"option\">\r\n              <inline-editor  [(ngModel)]=\"item.label\" [active]=\"active\"></inline-editor> \r\n              <input nz-input placeholder=\"\" [disabled]=\"true\" /> \r\n            </div>\r\n            <div class=\"operate\"  (click)=\"deleteOption(item)\" *ngIf=\"active==true\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </div>\r\n          </div>\r\n        </div> \r\n        <div class=\"question-wrap_operate\">\r\n          <span (click)=\"addOption()\">æ·»å åä¸ªéé¡¹</span> \r\n          <span (click)=\"addOptions()\">æ¹éæ·»å éé¡¹</span>\r\n        </div> \r\n    </ng-container>\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div class=\"inputlist\"  *ngFor=\"let item of to.options\">\r\n        <div class=\"title\">\r\n          {{item.label}} \r\n        </div> \r\n        <input nz-input [ngModel]=\"getControlChecked(item)\"  (ngModelChange)=\"controlModelChange($event,item)\"/>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXSurveyInputGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  } \r\n   \r\n  controlModelChange(value:any,option:any){ \r\n    let values:any = this.formControl.value || [];\r\n\r\n    if (values != undefined && values != null && values.length > 0) {\r\n\r\n      if(!values.some((item:any)=>{return item.optionid==option.value})){\r\n        values.push({\r\n          optionid:option.value,\r\n          optionvalue:value\r\n        })\r\n      }else{\r\n        values.forEach((item:any)=>{\r\n          if(item.optionid==option.value){\r\n            item.optionvalue=value\r\n          }\r\n        });\r\n      } \r\n    }else{\r\n      values.push({\r\n        optionid:option.value,\r\n        optionvalue:value\r\n      })\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getControlChecked(option: any) {\r\n    let result = null;\r\n    let values = this.formControl.value; \r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach((value:any)=>{\r\n        if(value.optionid==option.value){\r\n          result=value.optionvalue;\r\n        } \r\n      });\r\n    }  \r\n    return result;\r\n  }\r\n\r\n  //æ·»å éé¡¹\r\n  addOption() {\r\n    this.service.optionOperational(\"add\", \"\", this.field);\r\n  }\r\n  //æ¹éæ·»å \r\n  addOptions() {\r\n    this.service.optionOperational(\"adds\", \"\", this.field);\r\n  }\r\n  //å é¤éé¡¹\r\n  deleteOption(option: any) {\r\n    this.service.optionOperational(\"delete\", option, this.field);\r\n  }\r\n}","import { Component } from \"@angular/core\";\r\nimport { FieldWrapper } from \"@vx-form/core\";\r\n\r\n@Component({\r\n  selector: \"vxfield-wrapper\",\r\n  template: `\r\n    <ng-container\r\n      *ngIf=\"formStatus !== 0 || field.type == 'line' || field.type == 'html'\"\r\n    >\r\n      <ng-template #fieldComponent></ng-template>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngIf=\"formStatus === 0 && field.type != 'line' && field.type != 'html'\"\r\n    >\r\n      <div class=\"fieldlabel\">\r\n        <span class=\"required\" *ngIf=\"to.required\">*</span>\r\n        <span class=\"question_no\" *ngIf=\"to.queno\">{{to.queno}}.&nbsp;</span>\r\n        {{ to.label }}\r\n      </div>\r\n      <div class=\"fieldcontrol\" [class.has-error]=\"showError\">\r\n        <ng-template #fieldComponent></ng-template>\r\n        <div class=\"invalid-feedback\" [style.display]=\"'block'\">\r\n          <vxform-validation-message\r\n            *ngIf=\"showError\"\r\n            style=\"color:red\"\r\n            [field]=\"field\"\r\n          ></vxform-validation-message>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormWrapperFormField extends FieldWrapper {}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"group\",\r\n  template: `\r\n    <vxform-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></vxform-field>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldGroup extends FieldType {}\r\n","import { Component, AfterViewChecked, AfterViewInit } from \"@angular/core\";\r\nimport { FieldArrayType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxform-repeat\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <!--\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        -->\r\n        <div class=\"reportControl\">\r\n          <div class=\"report-header\">\r\n            <div class=\"left\">\r\n              <ul>\r\n                <li><label nz-checkbox [(ngModel)]=\"field.checked\"></label></li>\r\n                <li (click)=\"groupOperational('item')\">\r\n                  <i class=\"icon-TianJiaZiDuan\"></i>æ·»å å­æ®µ\r\n                </li>\r\n                <li (click)=\"groupOperational('remark')\">\r\n                  <i class=\"icon-other-WenBen\"></i>æ·»å ææ¬\r\n                </li>\r\n                <li (click)=\"groupOperational('line')\">\r\n                  <i class=\"icon-FenGeXian\"></i>æ·»å åå²çº¿\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"right\">\r\n              <ul>\r\n                <li (click)=\"groupOperational('delete')\">\r\n                  <i class=\"icon-N_delete2\"></i>å é¤\r\n                </li>\r\n                <li (click)=\"groupOperational('up')\">\r\n                  <i class=\"icon-ShangYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"groupOperational('down')\">\r\n                  <i class=\"icon-XiaYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"fieldOperational('delete')\">\r\n                  <button class=\"btnDel\">\r\n                    <i class=\"icon-KT-Close\"></i>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"report-body\">\r\n            <ng-container *ngFor=\"let field of field.fieldGroup; let i = index\">\r\n              <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div *ngFor=\"let field of field.fieldGroup; let i = index\" class=\"row\">\r\n        <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n\r\n        <span (click)=\"delete(i)\" class=\"del\">å é¤</span>\r\n\r\n        <div class=\"tips\"></div>\r\n      </div>\r\n      <div class=\"add\">\r\n        <span (click)=\"add()\">æ°å¢</span>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldRepeat extends FieldArrayType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  groupOperational(type: string) {\r\n    this.service.groupOperational(type, this.field);\r\n  }\r\n\r\n  delete(i: any) {\r\n    if (this.field.fieldGroup && this.field.fieldGroup.length > 1) {\r\n      this.remove(i);\r\n    } else {\r\n    }\r\n  }\r\n}\r\n","import { ConfigOption } from \"@vx-form/core\";\r\nimport {\r\n  VXSurveyRadioGroup,\r\n  VXSurveyDragDrop,\r\n\r\n  VXSurveyRadio,\r\n  VXSurveyCheckBox,\r\n  VXSurveyDropdown,\r\n  VXSurveyCascader,\r\n  VXSurveyScaler,\r\n  VXSurveyScore,\r\n  VXSurveyLine,\r\n  VXSurveyRemark,\r\n  VXSurveyInput,\r\n  VXSurveyDate,\r\n  VXSurveyTime,\r\n  VXSurveyNPS,\r\n  VXSurveyProportion,\r\n  VXSurveyEvaluation,\r\n  VXSurveyMatrixRadio,\r\n  VXSurveyMatrixCheckBox,\r\n  VXSurveyMatrixScore,\r\n  VXSurveyMatrixInput,\r\n  VXSurveyInputGroup\r\n\r\n} from \"./types/types\";\r\n\r\n\r\n\r\nimport { VXFormWrapperFormField } from \"./wrappers/wrappers\";\r\nimport { VXFormFieldGroup } from \"./templates/group\";\r\nimport { VXFormFieldRepeat } from \"./templates/repeat\";\r\n\r\nexport const FIELD_TYPE_COMPONENTS = [\r\n\r\n  VXSurveyRadio,\r\n  VXSurveyCheckBox,\r\n  VXSurveyDropdown,\r\n  VXSurveyCascader,\r\n  VXSurveyScaler,\r\n  VXSurveyScore,\r\n  VXSurveyLine,\r\n  VXSurveyRemark,\r\n  VXSurveyInput,\r\n  VXSurveyDate,\r\n  VXSurveyTime,\r\n  VXSurveyNPS,\r\n  VXSurveyProportion,\r\n  VXSurveyEvaluation,\r\n  VXSurveyMatrixRadio,\r\n  VXSurveyMatrixCheckBox,\r\n  VXSurveyMatrixScore,\r\n  VXSurveyMatrixInput,\r\n  VXSurveyInputGroup,\r\n\r\n  // types \r\n  VXSurveyRadioGroup, \r\n\r\n  //templates\r\n  VXSurveyDragDrop,\r\n  VXFormFieldGroup,\r\n  VXFormFieldRepeat,\r\n\r\n  // wrappers\r\n  VXFormWrapperFormField\r\n];\r\n\r\nexport const BOOTSTRAP_VXFORM_CONFIG: ConfigOption = {\r\n  types: [\r\n    {\r\n      name: \"radio\", component: VXSurveyRadio,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"checkbox\", component: VXSurveyCheckBox,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"dropdown\", component: VXSurveyDropdown,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"cascader\", component: VXSurveyCascader,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"scaler\", component: VXSurveyScaler,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"score\", component: VXSurveyScore,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"line\", component: VXSurveyLine,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"remark\", component: VXSurveyRemark,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"input\", component: VXSurveyInput,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"date\", component: VXSurveyDate,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"time\", component: VXSurveyTime,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"nps\", component: VXSurveyNPS,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"proportion\", component: VXSurveyProportion,wrappers: [\"form-field\"]\r\n    },  \r\n    {\r\n      name: \"evaluation\", component: VXSurveyEvaluation,wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"matrix_radio\", component: VXSurveyMatrixRadio,wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"matrix_checkbox\", component: VXSurveyMatrixCheckBox,wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"matrix_score\", component: VXSurveyMatrixScore,wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"matrix_input\", component: VXSurveyMatrixInput,wrappers: [\"form-field\"]\r\n    },  \r\n    {\r\n      name: \"input_group\", component: VXSurveyInputGroup,wrappers: [\"form-field\"]\r\n    },  \r\n    {\r\n      name: \"drag-drop\", component: VXSurveyDragDrop\r\n    },\r\n    { name: \"group\", component: VXFormFieldGroup },\r\n    { name: \"repeat\", component: VXFormFieldRepeat },\r\n\r\n    {\r\n      name: \"radiogroup\",\r\n      component: VXSurveyRadioGroup,\r\n      wrappers: [\"form-field\"]\r\n    } \r\n  ],\r\n  wrappers: [{ name: \"form-field\", component: VXFormWrapperFormField }]\r\n};\r\n","import { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nexport function getFieldPro(field: VXFormFieldConfig, key: string) {\r\n  return _.get(field, \"templateOptions.\" + key + \"\");\r\n}\r\nexport function requiredValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}ä¸è½ä¸ºç©º`;\r\n}\r\nexport function minlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"minLength\"\r\n  )}`;\r\n}\r\nexport function maxlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"maxLength\"\r\n  )}`;\r\n}\r\nexport function minValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°å¼ä¸º${getFieldPro(field, \"min\")}`;\r\n}\r\nexport function maxValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§å¼ä¸º${getFieldPro(field, \"max\")}`;\r\n}\r\n\r\nexport let validationConfig = {\r\n  validationMessages: [\r\n    { name: \"required\", message: requiredValidationMessage },\r\n    { name: \"null\", message: \"ä¸è½ä¸ºNULL\" },\r\n    { name: \"minlength\", message: minlengthValidationMessage },\r\n    { name: \"maxlength\", message: maxlengthValidationMessage },\r\n    { name: \"min\", message: minValidationMessage },\r\n    { name: \"max\", message: maxValidationMessage },\r\n    { name: \"multipleOf\", message: \"ssss\" },\r\n    { name: \"exclusiveMinimum\", message: \"ssss\" },\r\n    { name: \"exclusiveMaximum\", message: \"ssss\" },\r\n    { name: \"minItems\", message: \"ssss\" },\r\n    { name: \"maxItems\", message: \"ssss\" },\r\n    { name: \"uniqueItems\", message: \"should NOT have duplicate items\" },\r\n    { name: \"const\", message: \"ssss\" },\r\n    { name: \"pattern\", message: \"ä¸æ»¡è¶³è¿åè¡¨è¾¾å¼\" }\r\n  ],\r\n  types: [\r\n    // { name: \"string\", extends: \"input\" },\r\n    // {\r\n    //   name: \"number\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // {\r\n    //   name: \"integer\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // { name: \"boolean\", extends: \"checkbox\" },\r\n    // { name: \"enum\", extends: \"select\" },\r\n     { name: \"array\", extends: \"array\" },\r\n     { name: \"object\", extends: \"object\" }\r\n  ]\r\n};\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpResponse\r\n} from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { tap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class _HttpClient {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private _loading = false;\r\n\r\n  get loading(): boolean {\r\n    return this._loading;\r\n  }\r\n\r\n  parseParams(params: any): HttpParams {\r\n    /*const newParams = {};\r\n    Object.keys(params).forEach(key => {\r\n      let _data = params[key];\r\n\r\n      newParams[key] = _data;\r\n    });*/\r\n    if (params === undefined || params === null) {\r\n      params = {};\r\n    }\r\n    return new HttpParams({ fromObject: params });\r\n  }\r\n\r\n  formEncode(obj: any) {\r\n    var encodedString = \"\";\r\n    for (var key in obj) {\r\n      if (encodedString.length !== 0) {\r\n        encodedString += \"&\";\r\n      }\r\n      encodedString += key + \"=\" + encodeURIComponent(obj[key]);\r\n    }\r\n    return encodedString;\r\n  }\r\n\r\n  appliedUrl(url: string, params?: any) {\r\n    if (!params) return url;\r\n    url += ~url.indexOf(\"?\") ? \"\" : \"?\";\r\n    const arr: string[] = [];\r\n    for (const key in params) {\r\n      arr.push(`${key}=${params[key]}`);\r\n    }\r\n    return url + arr.join(\"&\");\r\n  }\r\n\r\n  begin() {\r\n    setTimeout(() => (this._loading = true));\r\n  }\r\n\r\n  end() {\r\n    setTimeout(() => (this._loading = false));\r\n  }\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `T` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<T>>;\r\n */\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * GET è¯·æ±\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"GET\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #region post\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /* post<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * POST è¯·æ±\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"POST\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * DELETE è¯·æ±\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"DELETE\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * `jsonp` è¯·æ±\r\n   *\r\n   * @param url URLå°å\r\n   * @param params è¯·æ±åæ°\r\n   * @param callbackParam CALLBACKå¼ï¼é»è®¤ï¼JSONP_CALLBACK\r\n   */\r\n  jsonp(\r\n    url: string,\r\n    params?: any,\r\n    callbackParam: string = \"JSONP_CALLBACK\"\r\n  ): Observable<any> {\r\n    return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n\r\n  // #region patch\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   patch<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PATCH è¯·æ±\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PATCH\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region put\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   put<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PUT è¯·æ±\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PUT\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request<R>(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<R>;\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    this.begin();\r\n    if (options) {\r\n      if (options.params) options.params = this.parseParams(options.params);\r\n      if (options.body) {\r\n        // options.body = this.formEncode(options.body)\r\n      }\r\n    }\r\n    return this.http.request(method, url, options).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { Observable, of } from \"rxjs\";\r\nimport { _HttpClient } from \"../net/http.client\"\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class DataService {\r\n  constructor(private _http: _HttpClient) { }\r\n\r\n  //æ ¹æ®Id|å¶ä» è·åç¸å³è¡¨ä¿¡æ¯\r\n  getBusinessTables(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  getFormInfo(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-äººå\r\n  getSysCtrEmployee(params = {}): Observable<any> {\r\n    //let url = \"emptable.json\";\r\n    let url = this.getWebAPIName(\"employee\");\r\n    let result = this._http.get(url, params);\r\n    return result;\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-ç»ç»\r\n  getSysCtrOrgTree(params = {}): Observable<any> {\r\n    //let url = \"org-tree.json\";\r\n    let url = this.getWebAPIName(\"organization\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  //ç³»ç»æ§ä»¶-èä½\r\n  getSysCtrPostionTable(params = {}): Observable<any> {\r\n    //let url = \"postiontable.json\";\r\n    let url = this.getWebAPIName(\"postion\");\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-å°åº\r\n  getSysCtrArea(params = {}): Observable<any> {\r\n    let url = \"tables.json\";\r\n\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //æ å½¢æ°æ®\r\n  getTreeData(params = {}): Observable<any> {\r\n    //let url = \"tree.json\";\r\n    let url = this.getWebAPIName(\"tree\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  getWebAPIName(type: string) {\r\n    let result = \"\";\r\n    let res = localStorage.getItem(\"VXFORM:WEBAPI\");\r\n    if (res != undefined && res != null && res != \"\") {\r\n      let webapi = JSON.parse(res);\r\n      result = webapi[type];\r\n    }\r\n    if (result == undefined || result == null) {\r\n      result = \"\";\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXRadioService {\r\n  constructor() { }\r\n\r\n  /*\r\n    åéé¢\r\n    radio  åéé¢ãæ§å«ãå¹´é¾ãå­¦åãèä¸\r\n\r\n  */ \r\n  create_radio(questionType: any) { \r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"radio\"\r\n    }\r\n    switch (questionType.tag) {\r\n      case \"default\":\r\n        this.createRadio_default(question);\r\n        break;\r\n      case \"gender\":\r\n        this.createRadio_gender(question);\r\n        break;\r\n      case \"age\":\r\n        this.createRadio_age(question);\r\n        break;\r\n      case \"education\":\r\n        this.createRadio_education(question);\r\n        break;\r\n      case \"occupation\":\r\n        this.createRadio_occupation(question);\r\n        break;\r\n      case \"votefont\":\r\n        this.createRadio_votefont(question);\r\n        break;\r\n      default:\r\n        this.createRadio_default(question);\r\n        break;\r\n    } \r\n    return question;\r\n  }\r\n\r\n  //åéé¢\r\n  private createRadio_default(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·éæ©ä¸ä¸ªéé¡¹\", \r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [{\r\n        label: \"éé¡¹1\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"éé¡¹2\",\r\n        value: \"2\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n\r\n  //æ§å«\r\n  private createRadio_gender(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"æ§å«\", \r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [{\r\n        label: \"ç·\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"å¥³\",\r\n        value: \"2\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n\r\n  //å¹´é¾\r\n  private createRadio_age(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"æ¨çå¹´é¾æ¯ï¼\", \r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [{\r\n        label: \"18~24å²\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"25~30å²\",\r\n        value: \"2\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"31~40å²\",\r\n        value: \"3\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"41~50å²\",\r\n        value: \"4\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"51~60å²\",\r\n        value: \"5\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"61å²åä»¥ä¸\",\r\n        value: \"6\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n\r\n  //å­¦å\r\n  private createRadio_education(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"å­¦å\",\r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [{\r\n        label: \"å°å­¦çº§ä»¥ä¸\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"åä¸­\",\r\n        value: \"2\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"é«ä¸­/ä¸­ä¸/ææ ¡\",\r\n        value: \"3\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"å¤§å­¦ä¸ç§\",\r\n        value: \"4\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"å¤§å­¦æ¬ç§\",\r\n        value: \"5\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"ç¡å£«ç ç©¶çåä»¥ä¸\",\r\n        value: \"6\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n\r\n  //èä¸ \r\n  private createRadio_occupation(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"æ¨ç®åæå¤è¡ä¸æ¯ï¼\",\r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [\r\n        {\r\n          label: \"å¨æ ¡å­¦ç\",\r\n          value: \"1\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"æ¿åº/æºå³å¹²é¨/å¬å¡å\",\r\n          value: \"2\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"ä¼ä¸ç®¡çèï¼åæ¬åºå±åä¸­é«å±ç®¡çèï¼\",\r\n          value: \"3\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"æ®éèåï¼åå¬å®¤/åå­æ¥¼å·¥ä½äººåï¼\",\r\n          value: \"4\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"ä¸ä¸äººåï¼å¦å»ç/å¾å¸/æä½/è®°è/èå¸ç­ï¼\",\r\n          value: \"5\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"æ®éå·¥äººï¼å¦å·¥åå·¥äºº/ä½åå³å¨èç­ï¼\",\r\n          value: \"6\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"åä¸æå¡ä¸èå·¥ï¼å¦éå®äººå/ååºèå/æå¡åç­ï¼\",\r\n          value: \"7\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"ä¸ªä½ç»è¥è/æ¿åå\",\r\n          value: \"8\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"èªç±èä¸è\",\r\n          value: \"9\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"åæç§æ¸å³å¨è\",\r\n          value: \"10\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"éä¼\",\r\n          value: \"11\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"ææ èä¸\",\r\n          value: \"12\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"å¶ä»èä¸äººåï¼è¯·æ³¨æï¼\",\r\n          value: \"13\",\r\n          score: 0\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  //æå­æç¥¨\r\n  private createRadio_votefont(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·ç»ä»¥ä¸éé¡¹æç¥¨\",\r\n      required: false, \r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      },\r\n      options: [{\r\n        label: \"éé¡¹1\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"éé¡¹2\",\r\n        value: \"2\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXCheckboxService {\r\n  constructor() { }\r\n\r\n \r\n  create_checkbox(questionType: any) { \r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"checkbox\"\r\n    }\r\n    switch (questionType.tag) {\r\n      case \"default\":\r\n        this.createCheckbox_default(question);\r\n        break; \r\n      default:\r\n        this.createCheckbox_default(question);\r\n        break;\r\n    }  \r\n    return question;\r\n  }\r\n  \r\n  //å¤éé¢\r\n  private createCheckbox_default(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·éæ©ä»¥ä¸éé¡¹ (å¤é)\", \r\n      required: false,\r\n      setting: { \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\",\r\n        max:2,\r\n        min:0\r\n      },\r\n      options: [{\r\n        label: \"éé¡¹1\",\r\n        value: \"1\",\r\n        score: 0\r\n      },\r\n      {\r\n        label: \"éé¡¹2\",\r\n        value: \"2\",\r\n        score: 0\r\n      }]\r\n    }\r\n  }\r\n\r\n   \r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXInputService {\r\n  constructor() { }\r\n\r\n  /*\r\n    ç´æ¥è¾å¥\r\n    input  å§åãææºãé®ç®±\r\n\r\n  */ \r\n  create_input(questionType: any) {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"input\"\r\n    }\r\n    switch (questionType.tag) {\r\n      case \"default\":\r\n        this.createInput_default(question);\r\n        break;\r\n      case \"name\":\r\n        this.createInput_name(question);\r\n        break;\r\n      case \"mobile\":\r\n        this.createInput_mobile(question);\r\n        break;\r\n      case \"email\":\r\n        this.createInput_email(question);\r\n        break;\r\n      case \"remark\":\r\n          this.createInput_remark(question);\r\n          break;  \r\n      default:\r\n        this.createInput_default(question);\r\n        break;\r\n    }  \r\n    return question;\r\n  } \r\n\r\n  //é»è®¤\r\n  private createInput_default(question: VXFormFieldConfig) {\r\n    question.templateOptions={\r\n        type:\"default\",\r\n        label: \"è¯·å¡«åæ¬é¡¹åå®¹\",\r\n        required: false,\r\n        setting: { \r\n          size: \"small\", \r\n          minLength: 0, \r\n          maxLength: 200\r\n        }\r\n      } \r\n    return question;\r\n  }\r\n\r\n  //å§å\r\n  private createInput_name(question: VXFormFieldConfig) {\r\n    question.templateOptions={\r\n        type:\"default\",\r\n        label: \"è¯·å¡«åå§å\",\r\n        required: false,\r\n        setting: { \r\n          size: \"small\", \r\n          minLength: 0, \r\n          maxLength: 200\r\n        }\r\n      } \r\n    return question;\r\n  }\r\n\r\n  //é®ç®±\r\n  private createInput_email(question: VXFormFieldConfig) {\r\n    question.templateOptions={\r\n        type:\"email\",\r\n        label: \"è¯·å¡«åé®ç®±\",\r\n        required: false,\r\n        setting: { \r\n          size: \"small\", \r\n          minLength: 0, \r\n          maxLength: 200\r\n        }\r\n      } \r\n    return question;\r\n  }\r\n\r\n  //ææº\r\n  private createInput_mobile(question: VXFormFieldConfig) {\r\n    question.templateOptions={\r\n        type:\"mobile\",\r\n        label: \"è¯·å¡«åææºå·ç \",\r\n        required: false,\r\n        setting: { \r\n          size: \"small\", \r\n          minLength: 0, \r\n          maxLength: 200\r\n        }\r\n      } \r\n    return question;\r\n  }\r\n\r\n    //å¤è¡ææ¬\r\n    private createInput_remark(question: VXFormFieldConfig) {\r\n      question.templateOptions={\r\n          type:\"default\",\r\n          label: \"è¯·å¡«åæ¬é¡¹åå®¹\",\r\n          required: false,\r\n          setting: { \r\n            size: \"large\", \r\n            minLength: 0, \r\n            maxLength: 200\r\n          }\r\n        } \r\n      return question;\r\n    }\r\n \r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXCascaderService {\r\n  constructor() { }\r\n\r\n  /*\r\n    çº§èéæ©\r\n    cascader  çº§è ãä¸ä¸ãé¢æ ¡ãè¡ä¸\r\n\r\n  */ \r\n  create_cascader(questionType: any) { \r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"cascader\"\r\n    }\r\n    switch (questionType.tag) {\r\n      case \"default\":\r\n        this.createCascader_default(question);\r\n        break;\r\n      case \"major\":\r\n        this.createCascader_major(question);\r\n        break;\r\n      case \"industry\":\r\n        this.createCascader_industry(question);\r\n        break;\r\n      case \"university\":\r\n        this.createCascader_university(question);\r\n        break; \r\n      default:\r\n        this.createCascader_default(question);\r\n        break;\r\n    }\r\n    return question;\r\n  }\r\n\r\n  //çº§è\r\n  private createCascader_default(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·éæ©ä»¥ä¸éé¡¹\",\r\n      options: [\r\n        {\r\n          label:\"è¯·éæ©\",\r\n          value:\"-1\"\r\n        },\r\n        {\r\n          label:\"éé¡¹1\",\r\n          value:\"1\",\r\n          children:[\r\n            {\r\n              label:\"éé¡¹1-1\",\r\n              value:\"1-1\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          label:\"éé¡¹2\",\r\n          value:\"2\",\r\n          children:[\r\n            {\r\n              label:\"éé¡¹2-1\",\r\n              value:\"2-1\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  } \r\n\r\n  //ä¸ä¸\r\n  private createCascader_major(question: VXFormFieldConfig) {\r\n    question.templateOptions={\r\n        label: \"æ¨å¤§å­¦æå­¦ä¸ä¸æ¯ï¼\",\r\n        options: [ \r\n          {\r\n            label:\"éé¡¹1\",\r\n            value:\"1\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹1-1\",\r\n                value:\"1-1\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            label:\"éé¡¹2\",\r\n            value:\"2\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹2-1\",\r\n                value:\"2-1\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n    } \r\n    return question;\r\n  }\r\n\r\n  //è¡ä¸\r\n  private createCascader_industry(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n        label: \"æ¨ç®åæå¤è¡ä¸æ¯ï¼\",\r\n        options: [ \r\n          {\r\n            label:\"éé¡¹1\",\r\n            value:\"1\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹1-1\",\r\n                value:\"1-1\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            label:\"éé¡¹2\",\r\n            value:\"2\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹2-1\",\r\n                value:\"2-1\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      } \r\n    return question; \r\n  } \r\n\r\n  //é¢æ ¡\r\n  private createCascader_university(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n        label: \"æ¨æå°±è¯»çå­¦æ ¡æ¯ï¼\",\r\n        options: [ \r\n          {\r\n            label:\"éé¡¹1\",\r\n            value:\"1\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹1-1\",\r\n                value:\"1-1\"\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            label:\"éé¡¹2\",\r\n            value:\"2\",\r\n            children:[\r\n              {\r\n                label:\"éé¡¹2-1\",\r\n                value:\"2-1\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      } \r\n    return question; \r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXOtherService {\r\n  constructor() { }\r\n\r\n  \r\n   //åå²çº¿\r\n   create_line() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"line\",\r\n      templateOptions: {\r\n        label: \"åå²çº¿\"\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //å¤æ³¨è¯´æ\r\n  create_remark() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"remark\",\r\n      templateOptions: {\r\n        label: \"è¯·éè¯»æ¬é¡¹è¯´æï¼ç¶ååç­é®é¢\" \r\n      }\r\n    };\r\n    return question;\r\n  }\r\n \r\n   //æ¥æ\r\n   create_date() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"date\",\r\n      templateOptions: {\r\n        label: \"æ¥æ\",\r\n        required: false\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //æ¶é´\r\n  create_time() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"time\",\r\n      templateOptions: {\r\n        label: \"æ¶é´\",\r\n        required: false\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //æåé¢\r\n  create_score() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"score\",\r\n      templateOptions: {\r\n        type:\"start\",\r\n        label: \"è¯·ç»æ¬é¡¹æå\",\r\n        setting:{\r\n          label:\"\", \r\n          score: 0,   \r\n          min: 0, \r\n          max: 5\r\n        }\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //ä¸æé¢\r\n  create_dropdown() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"dropdown\",\r\n      templateOptions: { \r\n        label: \"è¯·éæ©ä¸ä¸ªé\",\r\n        setting:{\r\n          score: 0\r\n        },\r\n        options: [{\r\n          label: \"éé¡¹1\",\r\n          value: \"1\",\r\n          score: 0\r\n        },\r\n        {\r\n          label: \"éé¡¹2\",\r\n          value: \"2\",\r\n          score: 0\r\n        }]\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  \r\n  //NPSé¢\r\n  create_nps() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"nps\",\r\n      templateOptions: { \r\n        label: \"æ¨åæåæåäºæ¨èæä»¬çå¯è½æ§æå¤å¤§ï¼\",\r\n        required: false,\r\n        options: [{\r\n          label: \"0\",\r\n          value: \"0\"\r\n        },\r\n        {\r\n          label: \"1\",\r\n          value: \"1\"\r\n        },\r\n        {\r\n          label: \"2\",\r\n          value: \"2\"\r\n        },\r\n        {\r\n          label: \"3\",\r\n          value: \"3\"\r\n        },\r\n        {\r\n          label: \"4\",\r\n          value: \"4\"\r\n        },\r\n        {\r\n          label: \"5\",\r\n          value: \"5\"\r\n        },\r\n        {\r\n          label: \"6\",\r\n          value: \"6\"\r\n        },\r\n        {\r\n          label: \"7\",\r\n          value: \"7\"\r\n        },\r\n        {\r\n          label: \"8\",\r\n          value: \"8\"\r\n        },\r\n        {\r\n          label: \"9\",\r\n          value: \"9\"\r\n        },\r\n        {\r\n          label: \"10\",\r\n          value: \"10\"\r\n        }]\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //æ¯éé¢\r\n  create_proportion() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"proportion\",\r\n      templateOptions: { \r\n        label: \"è¯·éæ©ä¸ä¸ªé\",\r\n        layout: \"row1\",\r\n        order: false,\r\n        score: 0,\r\n        required: false,\r\n        options: [{\r\n          label: \"éé¡¹1\",\r\n          value: \"1\",\r\n          score: 0,\r\n          input: false\r\n        },\r\n        {\r\n          label: \"éé¡¹2\",\r\n          value: \"2\",\r\n          score: 0,\r\n          input: false\r\n        }]\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //è¯ä»·é¢\r\n  create_evaluation() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"evaluation\",\r\n      templateOptions: { \r\n        label: \"è¯·éæ©ä¸ä¸ªé\",\r\n        required: false,\r\n        setting:{ \r\n          score: 0 \r\n        },\r\n        options: [{\r\n          label: \"éå¸¸ä¸æ»¡æ\",\r\n          value: \"1\",\r\n          tag:\"æåº¦å·æ·¡\\næ¨éå¤\\nææ¯å·®\"\r\n        },\r\n        {\r\n          label: \"æ¯è¾ä¸æ»¡æ\",\r\n          value: \"2\",\r\n          tag:\"éåº¦æ¢\\nä»ªè¡¨ä¹±\\nä¸ä¸ä¸\"\r\n        },\r\n        {\r\n          label: \"ä¸è¬\",\r\n          value: \"3\",\r\n          tag:\"æ äºå¨\\nä¸ç§¯æ\\nä¸å¡ä¸ç²¾\"\r\n        },\r\n        {\r\n          label: \"æ¯è¾æ»¡æ\",\r\n          value: \"4\",\r\n          tag:\"ææç¤¼è²\\néåº¦å¿«\\nè¾ä¸ä¸\"\r\n        },\r\n        {\r\n          label: \"éå¸¸æ»¡æ\",\r\n          value: \"5\",\r\n          tag:\"ç­æå¥½å®¢\\næ¬ä¸ç²¾ç¥\\næè½ä¸ä¸\"\r\n        },]\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n\r\n  //å¤é¡¹å¡«ç©º\r\n  create_inputGroup() {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: \"input_group\",\r\n      templateOptions: { \r\n        label: \"è¯·å¡«åä»¥ä¸åå®¹\", \r\n        required: false,\r\n        options: [{\r\n          label: \"å¡«ç©º1\",\r\n          value: \"1\"\r\n        },\r\n        {\r\n          label: \"å¡«ç©º2\",\r\n          value: \"2\"\r\n        }]\r\n      }\r\n    };\r\n    return question;\r\n  }\r\n  \r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, Guid } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXMatrixService {\r\n  constructor() { }\r\n\r\n  /*\r\n     ç©éµ\r\n  */\r\n  create_matrix(questionType: any) {\r\n    let question: VXFormFieldConfig = {\r\n      status: 1,\r\n      key: Guid.create()[\"value\"],\r\n      type: questionType.type\r\n    }\r\n    switch (questionType.type) {\r\n      case \"matrix_radio\":\r\n        this.createMatrix_radio(question);\r\n        break;\r\n      case \"matrix_checkbox\":\r\n        this.createMatrix_radio(question);\r\n        break;\r\n      case \"matrix_score\":\r\n        this.createMatrix_score(question);\r\n        break;\r\n      case \"matrix_input\":\r\n        this.createMatrix_input(question);\r\n        break;\r\n      default:\r\n        question.type = \"matrix_radio\";\r\n        this.createMatrix_radio(question);\r\n        break;\r\n    } \r\n    return question;\r\n  }\r\n\r\n  //ç©éµåé\r\n  private createMatrix_radio(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·éæ©ä»¥ä¸éé¡¹\",\r\n      required: false,\r\n      subtitle: [{\r\n        label: \"ç©éµè¡1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"ç©éµè¡2\",\r\n        value: \"2\",\r\n      }],\r\n      options: [{\r\n        label: \"éé¡¹1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"éé¡¹2\",\r\n        value: \"2\"\r\n      }]\r\n    }\r\n    return question;\r\n  }\r\n\r\n  //ç©éµæå\r\n  private createMatrix_score(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·ç»ä»¥ä¸åé¡¹æå\", \r\n      required: false,\r\n      subtitle: [{\r\n        label: \"ç©éµè¡1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"ç©éµè¡2\",\r\n        value: \"2\",\r\n      }],\r\n      options: [{\r\n        label: \"æå1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"æå1\",\r\n        value: \"2\"\r\n      }]\r\n    }\r\n    return question;\r\n  }\r\n\r\n  //ç©éµå¡«ç©º\r\n  private createMatrix_input(question: VXFormFieldConfig) {\r\n    question.templateOptions = {\r\n      label: \"è¯·å¡«åä»¥ä¸åå®¹\", \r\n      required: false,\r\n      subtitle: [{\r\n        label: \"ç©éµè¡1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"ç©éµè¡2\",\r\n        value: \"2\",\r\n      }], \r\n      options: [{\r\n        label: \"å¡«ç©º1\",\r\n        value: \"1\"\r\n      },\r\n      {\r\n        label: \"å¡«ç©º1\",\r\n        value: \"2\"\r\n      }]\r\n    }\r\n    return question;\r\n  }\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  VXTableFieldConfig,\r\n  VXFormFieldConfig,\r\n  Guid,\r\n  clone\r\n} from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { VXRadioService } from './radio_Service';\r\nimport { VXCheckboxService } from './checkbox_Service';\r\nimport { VXInputService } from './input_Service';\r\nimport { VXCascaderService } from './cascader_Service';\r\nimport { VXOtherService } from './other_Service';\r\nimport { VXMatrixService } from './matrix_Service';\r\n\r\n@Injectable()\r\nexport class VXTransferService {\r\n  constructor(\r\n    private vxRadioService: VXRadioService,\r\n    private vxCheckboxService: VXCheckboxService,\r\n    private vxInputService: VXInputService,\r\n    private vxCascaderService: VXCascaderService,\r\n    private vxOtherService: VXOtherService,\r\n    private vxMatrixService: VXMatrixService\r\n  ) { }\r\n\r\n  transferQuestionByType(questionType: any, form_fields: VXFormFieldConfig[], currentIndex: number) {\r\n\r\n    if (questionType != undefined && questionType != null && questionType.type != undefined && questionType.type != null) {\r\n      let obj: VXFormFieldConfig = this.initQuestion(questionType);\r\n      if (currentIndex > -1) {\r\n        form_fields.splice(currentIndex, 0, obj);\r\n      } else {\r\n        form_fields.push(obj);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initQuestion(questionType: any) {\r\n    let question: VXFormFieldConfig = {};\r\n    switch (questionType.type) {\r\n      case \"radio\":\r\n        question = this.vxRadioService.create_radio(questionType);\r\n        break;\r\n\r\n      case \"checkbox\":\r\n        question = this.vxCheckboxService.create_checkbox(questionType);\r\n        break;\r\n\r\n      case \"cascader\":\r\n        question = this.vxCascaderService.create_cascader(questionType);\r\n        break;\r\n\r\n      case \"input\":\r\n        question = this.vxInputService.create_input(questionType);\r\n        break;\r\n\r\n      case \"line\":\r\n        question = this.vxOtherService.create_line();\r\n        break;\r\n\r\n      case \"remark\":\r\n        question = this.vxOtherService.create_remark();\r\n        break;\r\n\r\n      case \"date\":\r\n        question = this.vxOtherService.create_date();\r\n        break;\r\n\r\n      case \"time\":\r\n        question = this.vxOtherService.create_time();\r\n        break;\r\n\r\n      case \"dropdown\":\r\n        question = this.vxOtherService.create_dropdown();\r\n        break;\r\n\r\n      case \"score\":\r\n        question = this.vxOtherService.create_score();\r\n        break;\r\n\r\n      case \"nps\":\r\n        question = this.vxOtherService.create_nps();\r\n        break;\r\n\r\n      case \"proportion\":\r\n        question = this.vxOtherService.create_proportion();\r\n        break;\r\n\r\n      case \"evaluation\":\r\n        question = this.vxOtherService.create_evaluation();\r\n        break;\r\n\r\n      case \"matrix_radio\": \r\n      case \"matrix_checkbox\":\r\n      case \"matrix_score\":\r\n      case \"matrix_input\":\r\n        question = this.vxMatrixService.create_matrix(questionType);\r\n        break;\r\n\r\n      case \"input_group\":\r\n          question = this.vxOtherService.create_inputGroup();\r\n      break;\r\n\r\n    }\r\n    return question;\r\n  }\r\n\r\n\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig,\r\n  VXSurveyInfo,\r\n  VXSurveyPage,\r\n  clone,\r\n  VXTableConfig,\r\n  VXFormCommonService\r\n} from \"@vx-form/core\";\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\nimport * as _ from \"lodash\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {\r\n  FormLayout,\r\n  LayoutPanel,\r\n  LayoutColumn,\r\n  VXTableBusiness,\r\n  ICheckedField,\r\n  IBusinessTable,\r\n  Itable,\r\n  IDesignFormAPI\r\n} from \"../../tools/util\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXDialogService } from \"../../service/dialog.service\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport { VXTransferService } from \"../../tools/transferService\";\r\nimport { group } from \"@angular/animations\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { Guid } from \"@vx-form/core\";\r\nimport { NzTreeHigherOrderServiceToken } from \"ng-zorro-antd\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-design-detail\",\r\n  templateUrl: \"./detail.component.html\",\r\n  styleUrls: [\"./detail.component.less\"],\r\n  providers: [DataService, VXTransferService]\r\n})\r\nexport class VXSurveyDesignDetail implements OnInit, OnChanges, OnDestroy {\r\n  @Input() formCode: string = \"\";\r\n  @Input() api: IDesignFormAPI = {\r\n    form: { url: \"assets/mockData/survey.json\" }\r\n  };\r\n  @Output() saveEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancelEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() previewEvent: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  pageStatus: number = 1;\r\n\r\n  form_model: any = {};\r\n  form_group = new FormGroup({});\r\n  form_fields: VXFormFieldConfig[] = [];\r\n\r\n  vxSurveyInfo: VXSurveyInfo = {\r\n    code: \"\",\r\n    name: \"\",\r\n    first: {\r\n      title: \"\",\r\n      text: \"\"\r\n    },\r\n    last: {\r\n      title: \"\",\r\n      text: \"\"\r\n    },\r\n    pages: [\r\n      {\r\n        code: \"page1\",\r\n        name: \"ç¬¬1é¡µ\",\r\n        questions: []\r\n      }\r\n    ]\r\n  };\r\n  show_setting = false;\r\n  questionField: VXFormFieldConfig = {};\r\n  pageSelectedIndex: number = 0;\r\n  constructor(\r\n    private message: NzMessageService,\r\n    private modalService: NzModalService,\r\n    private vxFormAntService: VXFormAntService,\r\n    public vxDialogService: VXDialogService,\r\n    public dataService: DataService,\r\n    public vxTransferService: VXTransferService,\r\n    public vxFormCommonService: VXFormCommonService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.vxFormAntService.questionEvent.subscribe((res: any) => {\r\n      this.questionOperational(res);\r\n    });\r\n\r\n    this.vxFormAntService.optionEvent.subscribe((res: any) => {\r\n      this.optionOperational(res);\r\n    });\r\n\r\n    this.vxFormAntService.dragDropEvent.subscribe((res: any) => {\r\n      this.addQuestionDragDrop(res);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formCode) {\r\n      this.initFormInfo();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() { }\r\n\r\n  /*æé®åºå---begin*/\r\n\r\n  saveSurvey() {\r\n    let objSurvey = clone(this.vxSurveyInfo);\r\n    objSurvey.pages.forEach((item: any) => {\r\n      this.vxFormCommonService.initFormFieldProperty(item.questions);\r\n    })\r\n    this.saveEvent.emit(JSON.stringify(objSurvey));\r\n  }\r\n\r\n\r\n  initFormInfo() {\r\n    this.dataService.getFormInfo(this.api.form.url, { formcode: this.formCode }).subscribe(res => {\r\n      this.vxSurveyInfo = {\r\n        code: res.code,\r\n        name: res.name,\r\n        type: res.type,\r\n        first: res.first,\r\n        last: res.last,\r\n        pages: res.pages\r\n      };\r\n      if (this.vxSurveyInfo.pages != undefined && (this.vxSurveyInfo.pages == null || this.vxSurveyInfo.pages.length == 0)) {\r\n        this.vxSurveyInfo.pages.push({\r\n          \"code\": \"pageCode1\",\r\n          \"name\": \"ç¬¬1é¡µ\",\r\n          \"questions\": []\r\n        })\r\n      }\r\n      this.getQuestionListByPageIndex(0);\r\n    });\r\n  }\r\n\r\n  pageClick(e: number) {\r\n    // if (this.vxSurveyInfo.pages != undefined) {\r\n    //   if (e == 0 || this.vxSurveyInfo.pages.length == e - 1) {\r\n    //     this.show_setting = false;\r\n    //   }\r\n    //   else {\r\n    //     if (e > 0) {\r\n    //       this.getQuestionListByPageIndex(e - 1);\r\n    //     }\r\n    //   }\r\n    // }\r\n    this.getQuestionListByPageIndex(e);\r\n  }\r\n\r\n  addPage() {\r\n    if (this.vxSurveyInfo.pages != undefined) {\r\n      let newPage = {\r\n        code: `pagecode_${this.vxSurveyInfo.pages.length + 1}`,\r\n        name: `ç¬¬${this.vxSurveyInfo.pages.length + 1}é¡µ`,\r\n        questions: []\r\n      }\r\n      this.vxSurveyInfo.pages.push(newPage);\r\n    }\r\n  }\r\n\r\n  deletePage(index: number) {\r\n    if (this.vxSurveyInfo.pages != undefined) {\r\n      this.vxSurveyInfo.pages.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  getQuestionListByPageIndex(pageIndex: number) {\r\n    if (this.vxSurveyInfo.pages != undefined && this.vxSurveyInfo.pages.length > 0 && this.vxSurveyInfo.pages[pageIndex].questions != undefined) {\r\n      this.form_fields = [{\r\n        \"type\": \"drag-drop\",\r\n        \"key\": \"drag-droplist\",\r\n        \"fieldGroup\": this.vxSurveyInfo.pages[pageIndex].questions\r\n      }]\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //é¢ç®\r\n  questionOperational(res: any) {\r\n    let resType: any = res[\"sign\"];\r\n    let resField: any = res[\"field\"];\r\n    let rQuestion: any;\r\n    let rIndex: any;\r\n    this.formFieldGroup.forEach((item: any, index: any, object: any) => {\r\n      item.active = false;\r\n      if (item.key == resField.key) {\r\n        item.active = true;\r\n        rQuestion = item;\r\n        rIndex = index;\r\n      }\r\n    });\r\n\r\n    switch (resType) {\r\n      case \"active\":\r\n        this.questionField = rQuestion;\r\n        this.show_setting = true;\r\n        break;\r\n      case \"logic\":\r\n        this.message.success(\"é»è¾è®¾ç½®\")\r\n        break;\r\n      case \"copy\":\r\n        let copyQuestion = _.cloneDeep(rQuestion);\r\n        copyQuestion.key = Guid.create()[\"value\"];\r\n        copyQuestion.active = false;\r\n        this.formFieldGroup.splice(rIndex + 1, 0, copyQuestion);\r\n        this.message.success(\"æ·è´é¢ç®\")\r\n        break;\r\n      case \"delete\":\r\n        this.formFieldGroup.splice(rIndex, 1)\r\n        this.message.success(\"å é¤é¢ç®\");\r\n        this.questionField = {};\r\n        this.show_setting = false;\r\n        break;\r\n    }\r\n  }\r\n\r\n  //é¢ç®éé¡¹\r\n  optionOperational(res: any) {\r\n    let resType: any = res[\"sign\"];\r\n    let resOption: any = res[\"option\"];\r\n    let resField: any = res[\"field\"];\r\n    let rQuestion: any;\r\n    let rIndex: any;\r\n    this.formFieldGroup.forEach((item: any, index: any, object: any) => {\r\n      item.active = false;\r\n      rIndex = index;\r\n      if (item.key == resField.key) {\r\n        item.active = true;\r\n        rQuestion = item;\r\n      }\r\n    });\r\n    switch (resType) {\r\n      case \"add\":\r\n        resField.templateOptions.options.push({\r\n          \"label\": \"éé¡¹\",\r\n          \"value\": Guid.create()[\"value\"],\r\n          \"score\": 0,\r\n          \"input\": false\r\n        });\r\n        this.message.success(\"æ·»å éé¡¹\")\r\n        break;\r\n      case \"adds\":\r\n        this.message.success(\"æ¹éæ·»å \")\r\n        break;\r\n      case \"delete\":\r\n        resField.templateOptions.options.forEach((item: any, index: any, object: any) => {\r\n          if (item.value == resOption.value) {\r\n            object.splice(index, 1);\r\n          }\r\n        });\r\n        this.message.success(\"å é¤éé¡¹\")\r\n        break;\r\n\r\n      case \"subtitle\":\r\n        resField.templateOptions.subtitle.push({\r\n          \"label\": \"ç©éµè¡\",\r\n          \"value\": Guid.create()[\"value\"]\r\n        });\r\n        this.message.success(\"æ·»å ç©éµè¡\")\r\n        break;\r\n    }\r\n  }\r\n\r\n  //æ·»å é¢ç®\r\n  addQuestionType(data: any, index: any = -1) {\r\n    this.vxTransferService.transferQuestionByType(data, this.formFieldGroup, index);\r\n  }\r\n\r\n  //ææ½æ·»å é¢ç®\r\n  addQuestionDragDrop(res: any) {\r\n    let data = res[\"previousData\"][res[\"previousIndex\"]];\r\n    this.vxTransferService.transferQuestionByType(data, this.formFieldGroup, res[\"currentIndex\"])\r\n  }\r\n\r\n  get formFieldGroup() {\r\n    let result: any[] = [];\r\n    if (this.form_fields != null && this.form_fields.length > 0 && this.form_fields[0].fieldGroup != undefined) {\r\n      result = this.form_fields[0].fieldGroup;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vx-question-type\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXQuestionType implements OnInit, OnChanges {\r\n  \r\n  @Output() questionTypeEvent = new EventEmitter<any>();\r\n  @Output() addPageEvent = new EventEmitter<any>();\r\n  @Output() saveSurveyEvent = new EventEmitter<any>();\r\n\r\n  questionTypeList:any=[\r\n    {\r\n      label:\"éæ©é¢\",\r\n      child:[ \r\n        {\r\n          type:\"radio\",\r\n          label:\"å é é¢\",\r\n          tag:\"default\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"checkbox\",\r\n          label:\"å¤ é é¢\",\r\n          show:true\r\n        },\r\n        // {\r\n        //   type:\"select_image\",\r\n        //   label:\"å¾çéæ©\"\r\n        // },\r\n        // {\r\n        //   type:\"select_voteimage\",\r\n        //   label:\"å¾çæç¥¨\"\r\n        // },\r\n        {\r\n          type:\"radio\",\r\n          label:\"æå­æç¥¨\",\r\n          tag:\"votefont\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"dropdown\",\r\n          label:\"ä¸ æ é¢\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"cascader\",\r\n          label:\"çº§ è é¢\",\r\n          tag:\"default\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"scaler\",\r\n          label:\"é è¡¨ é¢\",\r\n          tag:\"default\"\r\n        },\r\n        // {\r\n        //   type:\"select_classification\",\r\n        //   label:\"å ç±» é¢\"\r\n        // }\r\n      ]\r\n    },\r\n    {\r\n      label:\"å¡«ç©ºé¢\",\r\n      child:[\r\n        {\r\n          type:\"input\",\r\n          label:\"å¡« ç©º é¢\",\r\n          tag:\"default\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"input_group\",\r\n          label:\"å¤é¡¹å¡«ç©º\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"input\",\r\n          label:\"å¤è¡ææ¬\",\r\n          tag:\"remark\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"blank_horizontal\",\r\n          label:\"æ¨ªåå¡«ç©º\"\r\n        },\r\n        {\r\n          type:\"blank_table\",\r\n          label:\"èªå¨è¡¨æ ¼\"\r\n        }\r\n      ]\r\n    }, \r\n    {\r\n      label:\"æåæåº\",\r\n      child:[\r\n        {\r\n          type:\"score\",\r\n          label:\"æ å é¢\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"evaluation\",\r\n          label:\"è¯ ä»· é¢\",\r\n          show:true \r\n        },\r\n        {\r\n          type:\"score_sort\",\r\n          label:\"æ åº é¢\"\r\n        },\r\n        {\r\n          type:\"nps\",\r\n          label:\"NPS é¢\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"proportion\",\r\n          label:\"æ¯ é é¢\",\r\n          show:false\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      label:\"å¤æ³¨è¯´æ\",\r\n      child:[\r\n        {\r\n          type:\"line\",\r\n          label:\"å å² çº¿\",\r\n          show:true\r\n        }, \r\n        {\r\n          type:\"remark\",\r\n          label:\"å¤æ³¨è¯´æ\",\r\n          show:true\r\n        }, \r\n        {\r\n          type:\"other_upload\",\r\n          label:\"æä»¶ä¸ä¼ \"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      label:\"ä¸ªäººä¿¡æ¯\",\r\n      child:[\r\n        {\r\n          type:\"input\",\r\n          label:\"å§ å\",\r\n          tag:\"name\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"input\",\r\n          label:\"æ æº\",\r\n          tag:\"mobile\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"input\",\r\n          label:\"é® ç®±\",\r\n          tag:\"email\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"radio\",\r\n          label:\"æ§ å«\",\r\n          tag:\"gender\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"date\",\r\n          label:\"æ¥ æ\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"time\",\r\n          label:\"æ¶ é´\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"radio\",\r\n          label:\"å¹´ é¾\",\r\n          tag:\"age\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"radio\",\r\n          label:\"å­¦ å\",\r\n          tag:\"education\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"cascader\",\r\n          label:\"ä¸ ä¸\", \r\n          tag:\"major\",\r\n          show:true\r\n        },\r\n        { \r\n          type:\"cascader\",\r\n          label:\"é¢ æ ¡\",\r\n          tag:\"university\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"cascader\",\r\n          label:\"è¡ ä¸\",\r\n          tag:\"industry\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"radio\",\r\n          label:\"è ä¸\",\r\n          tag:\"occupation\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"emp_address\",\r\n          label:\"åå¸å°å\"\r\n        },\r\n        {\r\n          type:\"emp_geography\",\r\n          label:\"å°çä½ç½®\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      label:\"å¶ä»é¢å\",\r\n      child:[ \r\n        {\r\n          type:\"matrix_radio\",\r\n          label:\"ç©éµåé\", \r\n          show:true\r\n        },\r\n        {\r\n          type:\"matrix_checkbox\",\r\n          label:\"ç©éµå¤é\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"matrix_score\",\r\n          label:\"ç©éµæå\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"matrix_input\",\r\n          label:\"ç©éµå¡«ç©º\",\r\n          show:true\r\n        },\r\n        {\r\n          type:\"matrix_scale\",\r\n          label:\"ç©éµéè¡¨\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  \r\n\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n     \r\n  }\r\n \r\n  addQuestionType(type:any){\r\n    this.questionTypeEvent.emit(type);\r\n  } \r\n\r\n  addPage(){\r\n    this.addPageEvent.emit();\r\n  }\r\n  \r\n  saveSurvey(){\r\n    this.saveSurveyEvent.emit();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig, VXSurveyInfo } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vx-question-list\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXQuestionList implements OnInit, OnChanges {\r\n  @Input() vxSurveyInfo: VXSurveyInfo = {};\r\n  @Output() questionTypeEvent = new EventEmitter<any>();\r\n  @Output() addPageEvent = new EventEmitter<any>();\r\n\r\n\r\n\r\n  constructor(public dataService: DataService) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n\r\n  }\r\n\r\n  dropQuestion(event: CdkDragDrop<string[]>) { \r\n    if (_.get(event, \"container.data.questions\")) {\r\n      if (event.previousContainer === event.container) {\r\n        moveItemInArray(_.get(event, \"container.data.questions\"), event.previousIndex, event.currentIndex);\r\n      } else {\r\n        if (_.get(event, \"previousContainer.data.questions\")) {\r\n          transferArrayItem( \r\n            _.get(event, \"previousContainer.data.questions\"),\r\n            _.get(event, \"container.data.questions\"),\r\n            event.previousIndex,\r\n            event.currentIndex);\r\n        }\r\n      }\r\n    } \r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-cascader\",\r\n  template: ` \r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div>\r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>{{field|json}}\r\n      </div>    \r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingCascader implements OnInit, OnChanges {\r\n\r\n  questionField:any = { \r\n    key: \"\",\r\n    type: \"cascader\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      required: false\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() {\r\n   this.questionField = { \r\n      key: \"\",\r\n      type: \"cascader\",\r\n      templateOptions: {\r\n        label: \"\",\r\n        required: false\r\n      }\r\n    };\r\n   }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-checkbox\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div  class=\"item\">\r\n          <span>å¸å±</span>\r\n          <nz-radio-group [nzSize]=\"'small'\" [(ngModel)]=\"questionField['templateOptions']['setting']['layout']\">\r\n              <label nz-radio-button nzValue=\"1\">åå</label>\r\n              <label nz-radio-button nzValue=\"2\">2å</label>\r\n              <label nz-radio-button nzValue=\"3\">3å</label>\r\n            </nz-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>éæºæå</span> \r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['setting']['random']\"></nz-switch>\r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div> \r\n      <div class=\"item\">\r\n          <span>é¢ç®æ»åæ°</span> \r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['setting']['score']\"></nz-input-number>\r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>æå°å¯é</span> \r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['setting']['min']\"></nz-input-number>\r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>æå¤å¯é</span> \r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\"  [(ngModel)]=\"questionField.templateOptions['setting']['max']\"></nz-input-number>\r\n      </div>  \r\n    </div> \r\n    <div class=\"setting_wrap_option\"> \r\n      <div class=\"title\">éé¡¹è®¾ç½®</div>\r\n      <ng-container *ngFor=\"let item of questionField.templateOptions['options']\">\r\n      <div class=\"item q_title\">\r\n          <span>{{item.label}}</span>\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>éé¡¹åæ°</span>\r\n          <span>å</span>\r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"item['score']\"></nz-input-number>\r\n      </div> \r\n      </ng-container>\r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingCheckBox implements OnInit, OnChanges { \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"checkbox\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false,\r\n      setting:{ \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\", \r\n        min: 0, //æå°éNé¡¹\r\n        max: 0, //æå¤éNé¡¹ \r\n      }, \r\n      options: []\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-dropdown\",\r\n  template: `\r\n  <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>é¢ç®æ»åæ°</span> \r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['setting']['score']\"></nz-input-number>\r\n      </div>  \r\n    </div> \r\n    <div class=\"setting_wrap_option\"> \r\n      <div class=\"title\">éé¡¹è®¾ç½®</div>\r\n      <ng-container *ngFor=\"let item of questionField.templateOptions['options']\">\r\n      <div class=\"item q_title\">\r\n          <span>{{item.label}}</span>\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>éé¡¹åæ°</span>\r\n          <span>å</span>\r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" style=\"width: 40px;\"  [(ngModel)]=\"item['score']\"></nz-input-number>\r\n      </div> \r\n      </ng-container>\r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingDropdown implements OnInit, OnChanges { \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"dropdown\",\r\n    templateOptions: {\r\n      label: \"\",  \r\n      setting:{ \r\n        score: 0\r\n      }, \r\n      options: []\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-input\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div>\r\n      <div class=\"item\">\r\n          <span>è¾å¥æ¡å¤§å°</span>\r\n          <nz-radio-group [nzSize]=\"'small'\" [(ngModel)]=\"questionField['templateOptions']['setting']['size']\">\r\n              <label nz-radio-button nzValue=\"large\">å¤§</label>\r\n              <label nz-radio-button nzValue=\"default\">ä¸­</label>\r\n              <label nz-radio-button nzValue=\"small\">å°</label>\r\n            </nz-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>{{field|json}}\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>åå®¹éå¶</span> \r\n          <nz-select [nzSize]=\"'small'\" [(ngModel)]=\"questionField['templateOptions']['type']\">\r\n            <nz-option nzValue=\"default\" nzLabel=\"ä¸é\"></nz-option>\r\n            <nz-option nzValue=\"number\" nzLabel=\"æ°å­\"></nz-option>\r\n            <nz-option nzValue=\"alphabet\" nzLabel=\"å­æ¯\"></nz-option> \r\n            <nz-option nzValue=\"chinese\" nzLabel=\"ä¸­æ\"></nz-option> \r\n            <nz-option nzValue=\"email\" nzLabel=\"é®ç®±\"></nz-option> \r\n            <nz-option nzValue=\"mobile\" nzLabel=\"ææº\"></nz-option> \r\n          </nz-select>\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>æå°å¡«å</span>\r\n          <span>å­</span>\r\n          <nz-input-number [nzMin]=\"0\"  [nzMax]=\"9999999\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['setting']['minLength']\"></nz-input-number>\r\n      </div>  \r\n      <div class=\"item q_sore\">\r\n          <span>æå¤å¡«å</span>\r\n          <span>å­</span>\r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"9999999\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['setting']['maxLength']\"></nz-input-number>\r\n      </div> \r\n    </div>  \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingInput implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"input\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      type:\"default\", \r\n      setting:{    \r\n        minLength: 0, \r\n        maxLength: 0, \r\n      }\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-line\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n    <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n    <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>ææ </span> \r\n      </div> \r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingLine implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"line\"\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-radio\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div  class=\"item\">\r\n          <span>å¸å±</span>\r\n          <nz-radio-group [nzSize]=\"'small'\" [(ngModel)]=\"questionField['templateOptions']['setting']['layout']\">\r\n              <label nz-radio-button nzValue=\"1\">åå</label>\r\n              <label nz-radio-button nzValue=\"2\">2å</label>\r\n              <label nz-radio-button nzValue=\"3\">3å</label>\r\n            </nz-radio-group>\r\n      </div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>éæºæå</span> \r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['setting']['random']\"></nz-switch>\r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div> \r\n      <div  class=\"item\">\r\n          <span>é¢ç®æ»åæ°</span> \r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['setting']['score']\"></nz-input-number>\r\n      </div>  \r\n    </div> \r\n    <div class=\"setting_wrap_option\"> \r\n      <div class=\"title\">éé¡¹è®¾ç½®</div>\r\n      <ng-container *ngFor=\"let item of questionField.templateOptions['options']\">\r\n      <div class=\"item q_title\">\r\n          <span>{{item.label}}</span>\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>éé¡¹åæ°</span>\r\n          <span>å</span>\r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" style=\"width: 40px;\"  [(ngModel)]=\"item['score']\"></nz-input-number>\r\n      </div> \r\n      </ng-container> \r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingRadio implements OnInit, OnChanges {\r\n \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"radio\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false,\r\n      setting:{ \r\n        score: 0, \r\n        random: false,\r\n        layout:\"1\"\r\n      }, \r\n      options: []\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-remark\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingRemark implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"remark\",\r\n    templateOptions: {\r\n      label: \"\" \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-scaler\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div>\r\n      <div class=\"item\">\r\n          <span>é¢å</span>\r\n          <nz-radio-group [nzSize]=\"'small'\">\r\n              <label nz-radio-button nzValue=\"A\">åé</label>\r\n              <label nz-radio-button nzValue=\"B\">å¤é</label>\r\n            </nz-radio-group>\r\n      </div>\r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>{{field|json}}\r\n      </div>  \r\n    </div>\r\n    <div class=\"setting_wrap_model\"> \r\n      <div class=\"title\">éé¡¹è®¾ç½®</div>\r\n      <div  class=\"item\">\r\n          <span>å¸å±</span>\r\n          <nz-radio-group [nzSize]=\"'small'\" [(ngModel)]=\"questionField['templateOptions']['layout']\">\r\n              <label nz-radio-button nzValue=\"row1\">åå</label>\r\n              <label nz-radio-button nzValue=\"row2\">2å</label>\r\n              <label nz-radio-button nzValue=\"row3\">3å</label>\r\n            </nz-radio-group>\r\n      </div>\r\n      <div  class=\"item\">\r\n          <span>éæºæå</span> \r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['order']\"></nz-switch>\r\n      </div>\r\n    </div>\r\n    <div class=\"setting_wrap_option\"> \r\n      <div class=\"title\">éé¡¹åè¡¨</div>\r\n      <ng-container *ngFor=\"let item of questionField.templateOptions['options']\">\r\n      <div class=\"item q_title\">\r\n          <span>{{item.label}}</span>\r\n      </div>\r\n      <div class=\"item q_sore\">\r\n          <span>éé¡¹åæ°</span>\r\n          <span>å</span>\r\n          <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" style=\"width: 40px;\"  [(ngModel)]=\"item['score']\"></nz-input-number>\r\n      </div>\r\n      <div class=\"item q_other\">\r\n          <span>æ·»å è¾å¥æ¡</span>\r\n          <nz-switch nzSize=\"small\"  [(ngModel)]=\"item['input']\"></nz-switch>\r\n      </div>\r\n      </ng-container>\r\n    </div>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingScaler implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"scaler\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\", \r\n      maxLength: 500,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\",\r\n      options:[] \r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-score\",\r\n  template: `\r\n  <div class=\"setting_wrap_title\">\r\n    <span>é¢ç®è®¾ç½®</span>\r\n  </div> \r\n  <div class=\"setting_wrap_block\">\r\n    <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n    <div class=\"item\">\r\n        <span>æ­¤é¢å¿å¡«</span>\r\n        <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions.required\"></nz-switch> \r\n    </div>\r\n    <div class=\"item\">\r\n        <span>é»è¾è®¾ç½®</span>\r\n        <label>è®¾ç½®</label>\r\n    </div>\r\n    <div  class=\"item\">\r\n        <span>é¢ç®æ»åæ°</span> \r\n        <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions.setting.score\"></nz-input-number>\r\n    </div>\r\n    <div  class=\"item\">\r\n        <span>æä½åæ°</span> \r\n        <nz-input-number [nzMin]=\"0\" [nzMax]=\"10\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions.setting.min\"></nz-input-number>\r\n    </div>\r\n    <div  class=\"item\">\r\n        <span>æé«åæ°</span> \r\n        <nz-input-number [nzMin]=\"0\" [nzMax]=\"10\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions.setting.max\"></nz-input-number>\r\n    </div>\r\n    <div class=\"item\">\r\n      <span>å¾æ </span>\r\n        <nz-radio-group [nzSize]=\"'small'\" [(ngModel)]=\"questionField.templateOptions.type\">\r\n            <label nz-radio-button nzValue=\"start\">æ</label>\r\n            <label nz-radio-button nzValue=\"heart\">å¿</label>\r\n            <label nz-radio-button nzValue=\"good\">èµ</label> \r\n            <label nz-radio-button nzValue=\"other\">å¶</label>\r\n          </nz-radio-group>\r\n    </div>\r\n    <div class=\"item\" *ngIf=\"questionField.templateOptions.type=='other'\">\r\n      <span>èªå®ä¹æå­</span>  \r\n      <input nz-input [(ngModel)]=\"questionField.templateOptions.setting.label\" maxlength=\"1\" nzSize=\"small\" />\r\n    </div> \r\n  </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingScore implements OnInit, OnChanges {\r\n  \r\n  questionField:any={ \r\n    key: \"\",\r\n    type: \"score\",\r\n    templateOptions: {\r\n      type:\"start\",\r\n      label: \"\", \r\n      required: false,\r\n      setting:{\r\n        label:\"\", \r\n        score: 0,   \r\n        min: 0, \r\n        max: 5\r\n      },\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-date\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div> \r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingDate implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"date\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      required:false \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-time\",\r\n  template: `\r\n  <div class=\"setting_wrap_title\">\r\n    <span>é¢ç®è®¾ç½®</span>\r\n  </div> \r\n  <div class=\"setting_wrap_block\">\r\n    <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n    <div class=\"item\">\r\n        <span>æ­¤é¢å¿å¡«</span>\r\n        <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n    </div>  \r\n    <div class=\"item\">\r\n        <span>é»è¾è®¾ç½®</span>\r\n        <label>è®¾ç½®</label>\r\n    </div>  \r\n  </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingTime implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"time\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      required:false \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-nps\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>  \r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingNPS implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"nps\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      required: false,\r\n      options:[] \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-proportion\",\r\n  template: `\r\n  <div class=\"setting_wrap_title\">\r\n    <span>é¢ç®è®¾ç½®</span>\r\n  </div> \r\n  <div class=\"setting_wrap_block\">\r\n    <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n    <div class=\"item\">\r\n        <span>æ­¤é¢å¿å¡«</span>\r\n        <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n    </div> \r\n    <div  class=\"item\">\r\n        <span>é¢ç®æ»åæ°</span> \r\n        <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['score']\"></nz-input-number>\r\n    </div>\r\n    <div class=\"item\">\r\n        <span>é»è¾è®¾ç½®</span>\r\n        <label>è®¾ç½®</label>\r\n    </div>  \r\n  </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingProportion implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"proportion\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\", \r\n      maxLength: 500,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\",\r\n      score: 0,\r\n      options:[] \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-evaluation\",\r\n  template: `\r\n  <div class=\"setting_wrap_title\">\r\n    <span>é¢ç®è®¾ç½®</span>\r\n  </div> \r\n  <div class=\"setting_wrap_block\">\r\n    <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n    <div class=\"item\">\r\n        <span>æ­¤é¢å¿å¡«</span>\r\n        <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n    </div> \r\n    <div  class=\"item\">\r\n        <span>é¢ç®æ»åæ°</span> \r\n        <nz-input-number [nzMin]=\"0\" [nzMax]=\"100\" [nzStep]=\"1\"  nzSize=\"small\" [(ngModel)]=\"questionField.templateOptions['setting']['score']\"></nz-input-number>\r\n    </div>\r\n    <div class=\"item\">\r\n        <span>é»è¾è®¾ç½®</span>\r\n        <label>è®¾ç½®</label>\r\n    </div>  \r\n  </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingEvaluation implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"evaluation\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false,\r\n      setting:{\r\n        score: 0,\r\n      },\r\n      options:[] \r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-matrix_radio\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingMatrixRadio implements OnInit, OnChanges {\r\n \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"matrix_radio\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false, \r\n      options: [],\r\n      subtitle:[]\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-matrix_checkbox\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingMatrixCheckBox implements OnInit, OnChanges {\r\n \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"matrix_checkbox\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false, \r\n      options: [],\r\n      subtitle:[]\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-matrix_score\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingMatrixScore implements OnInit, OnChanges {\r\n \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"matrix_score\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false, \r\n      options: [],\r\n      subtitle:[]\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-matrix_input\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>\r\n      </div>  \r\n    </div> \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingMatrixInput implements OnInit, OnChanges {\r\n \r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"matrix_input\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false, \r\n      options: [],\r\n      subtitle:[]\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\"; \r\n\r\n@Component({\r\n  selector: \"vxsurvey-setting-input_group\",\r\n  template: `\r\n    <div class=\"setting_wrap_title\">\r\n      <span>é¢ç®è®¾ç½®</span>\r\n    </div> \r\n    <div class=\"setting_wrap_block\">\r\n      <div class=\"title\">æ´é¢è®¾ç½®</div> \r\n      <div class=\"item\">\r\n          <span>æ­¤é¢å¿å¡«</span>\r\n          <nz-switch nzSize=\"small\" [(ngModel)]=\"questionField['templateOptions']['required']\"></nz-switch> \r\n      </div>\r\n      <div class=\"item\">\r\n          <span>é»è¾è®¾ç½®</span>\r\n          <label>è®¾ç½®</label>{{field|json}}\r\n      </div>  \r\n    </div> \r\n     \r\n  `\r\n\r\n})\r\nexport class VXSurveySettingInputGroup implements OnInit, OnChanges {\r\n  \r\n  questionField:any={\r\n    key: \"\",\r\n    type:\"input_group\",\r\n    templateOptions: {\r\n      label: \"\", \r\n      required: false, \r\n      options:[] \r\n    } \r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {  \r\n    if(value!=null && value!=undefined){\r\n      this.questionField = value; \r\n    }\r\n  } \r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewContainerRef,\r\n  ViewChild,\r\n  ComponentRef,\r\n  ComponentFactory,\r\n  ChangeDetectorRef,\r\n  ComponentFactoryResolver\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport { VXSurveySettingCascader } from \"./basic/setting_cascader\";\r\nimport { VXSurveySettingCheckBox } from \"./basic/setting_checkbox\";\r\nimport { VXSurveySettingDropdown } from \"./basic/setting_dropdown\";\r\nimport { VXSurveySettingInput } from \"./basic/setting_input\";\r\nimport { VXSurveySettingLine } from \"./basic/setting_line\";\r\nimport { VXSurveySettingRadio } from \"./basic/setting_radio\";\r\nimport { VXSurveySettingRemark } from \"./basic/setting_remark\";\r\nimport { VXSurveySettingScaler } from \"./basic/setting_scaler\";\r\nimport { VXSurveySettingScore } from \"./basic/setting_score\";\r\nimport { VXSurveySettingDate } from \"./basic/setting_date\";\r\nimport { VXSurveySettingTime } from \"./basic/setting_time\";\r\nimport { VXSurveySettingNPS } from \"./basic/setting_nps\";\r\nimport { VXSurveySettingProportion } from \"./basic/setting_proportion\";\r\nimport { VXSurveySettingEvaluation } from \"./basic/setting_evaluation\";\r\nimport { VXSurveySettingMatrixRadio } from \"./basic/setting_matrix_radio\";\r\nimport { VXSurveySettingMatrixCheckBox } from \"./basic/setting_matrix_checkbox\";\r\nimport { VXSurveySettingMatrixScore } from \"./basic/setting_matrix_score\";\r\nimport { VXSurveySettingMatrixInput } from \"./basic/setting_matrix_input\";\r\nimport { VXSurveySettingInputGroup } from \"./basic/setting_input_group\";\r\n\r\n@Component({\r\n  selector: \"setting-template\",\r\n  template: `\r\n    \r\n  \r\n  <ng-container #componentHost></ng-container>\r\n  `\r\n\r\n})\r\nexport class VXSurveySettingTemplate implements OnInit, OnChanges {\r\n\r\n  dynamicComponents: any = {\r\n    \"radio\": VXSurveySettingRadio,\r\n    \"checkbox\": VXSurveySettingCheckBox,\r\n    \"dropdown\": VXSurveySettingDropdown,\r\n    \"input\": VXSurveySettingInput,\r\n    \"line\": VXSurveySettingLine,\r\n    \"remark\": VXSurveySettingRemark,\r\n    \"cascader\": VXSurveySettingCascader,\r\n    \"scaler\": VXSurveySettingScaler,\r\n    \"score\": VXSurveySettingScore,\r\n    \"date\": VXSurveySettingDate,\r\n    \"time\": VXSurveySettingTime,\r\n    \"nps\": VXSurveySettingNPS,\r\n    \"proportion\": VXSurveySettingProportion,\r\n    \"evaluation\": VXSurveySettingEvaluation,\r\n    \"matrix_radio\": VXSurveySettingMatrixRadio,\r\n    \"matrix_checkbox\": VXSurveySettingMatrixCheckBox,\r\n    \"matrix_score\": VXSurveySettingMatrixScore,\r\n    \"matrix_input\": VXSurveySettingMatrixInput,\r\n    \"input_group\": VXSurveySettingInputGroup\r\n    // \"select_single\": VXSettingSelectSingle,\r\n    // \"select_multiple\": VXSettingSelectMultiple,\r\n    // \"select_image\": VXSettingSelectImage,\r\n    // \"select_voteimage\": VXSettingSelectVoteImage,\r\n    // \"select_votefont\": VXSettingSelectVoteFont,\r\n    // \"select_dropdown\": VXSettingSelectDropdown,\r\n    // \"select_cascader\": VXSettingSelectCascader,\r\n    // \"select_scaler\": VXSettingSelectScaler,\r\n    // \"select_classification\": VXSettingSelectClassification,\r\n\r\n    // \"blank\": VXSettingBlank,\r\n    // \"blank_multiple\": VXSettingBlankMultiple,\r\n    // \"blank_horizontal\": VXSettingBlankHorizontal,\r\n    // \"blank_table\": VXSettingBlankTable,\r\n    // //\"score\": VXSettingScore,\r\n    // \"score_sort\": VXSettingScoreSort,\r\n    // \"score_nps\": VXSettingScoreNPS,\r\n    // \"score_proportion\": VXSettingScoreProportion,\r\n    // \"score_evaluation\": VXSettingScoreEvaluation,\r\n    // \"other_page\": VXSettingOtherPage,\r\n    // \"other_line\": VXSettingOtherLine,\r\n    // \"other_upload\": VXSettingOtherUpload,\r\n    // \"other_remark\": VXSettingOtherRemark,\r\n    // \"emp_name\": VXSettingEmpName,\r\n    // \"emp_mobile\": VXSettingEmpMobile,\r\n    // \"emp_email\": VXSettingEmpEmail,\r\n    // \"emp_gender\": VXSettingEmpGender,\r\n    // \"emp_date\": VXSettingEmpDate,\r\n    // \"emp_time\": VXSettingEmpTime,\r\n    // \"emp_age\": VXSettingEmpAge,\r\n    // \"emp_education\": VXSettingEmpEducation,\r\n    // \"emp_major\": VXSettingEmpmajor,\r\n    // \"emp_university\": VXSettingEmpUniversity,\r\n    // \"emp_industry\": VXSettingIndustry,\r\n    // \"emp_occupation\": VXSettingEmpOccupation,\r\n    // \"emp_address\": VXSettingEmpAddress,\r\n    // \"emp_geography\": VXSettingEmpGeography,\r\n    // \"matrix_select\": VXSettingMatrixSelect,\r\n    // \"matrix_score\": VXSettingMatrixScore,\r\n    // \"matrix_blank\": VXSettingMatrixBlank,\r\n    // \"matrix_scale\": VXSettingMatrixScale\r\n  };\r\n\r\n  component: ComponentRef<any> | undefined;\r\n\r\n  @ViewChild('componentHost', { read: ViewContainerRef, static: true }) componentHost: ViewContainerRef | undefined;\r\n  questionField: any = {\r\n    key: \"\",\r\n    type: \"radio\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\",\r\n      maxLength: 500,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\",\r\n      options: []\r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  };\r\n  @Input() set field(value: VXFormFieldConfig) {\r\n\r\n    if (value != null && value != undefined) {\r\n      this.questionField = value;\r\n    }\r\n    if (this.componentHost) {\r\n      this.componentHost.clear();\r\n      if (this.questionField != undefined && this.questionField != null && this.questionField.type != undefined && this.questionField.type != null) {\r\n        const compFactory: ComponentFactory<any> = this.componentFactoryResolver.resolveComponentFactory(\r\n          this.dynamicComponents[this.questionField.type],\r\n        );\r\n        this.component = this.componentHost.createComponent(compFactory);\r\n        this.component.instance.field = this.questionField;\r\n      }\r\n    }\r\n  }\r\n  constructor(\r\n    public componentFactoryResolver: ComponentFactoryResolver,\r\n    public changeDetectorRef: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-editcascader-item\",\r\n  template:`\r\n    <div class=\"cascader_col_title\">\r\n      {{title}}\r\n    </div>\r\n    <div class=\"cascader_col_item vxsurvey-scrollbar\">\r\n      <ng-container *ngFor=\"let item of row.data;let index=index;\">\r\n        <div class=\"cascader_col_wrap\" [ngClass]=\"{' wrap_active':item.value == row.current}\" (click)=\"itemClick(item)\">\r\n      \r\n                <div class=\"cascader_col_wrap_order\">{{index+1}}.</div>\r\n                <div class=\"cascader_col_wrap_input\">\r\n                    <input type=\"text\" [(ngModel)]=\"item.label\" maxlength=\"50\">\r\n                </div>\r\n                <div class=\"cascader_col_wrap_limit\">\r\n                    {{item.label.length}}/50\r\n                </div>\r\n                <div class=\"cascader_col_wrap_delete\" (click)=\"delOption(item)\">\r\n                    <span><i class=\"icon-KT-Close\"></i></span>\r\n                </div> \r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"cascader_col_add\" *ngIf=\"row?.showadd==true\"(click)=\"addOption()\">\r\n      <span></span>æ·»å éé¡¹\r\n    </div>  \r\n  `\r\n})\r\nexport class VXSurveyEditCascaderItem implements OnInit, OnChanges {\r\n  @Input() row:any={\r\n    cascader:1,\r\n    current:\"\",\r\n    showadd:false,\r\n    data:[]\r\n  };\r\n  @Input() title:string=\"\"; \r\n  @Output() itemEvent = new EventEmitter<any>();\r\n  @Output() addOptionEvent = new EventEmitter<any>();\r\n  @Output() delOptionEvent = new EventEmitter<any>();\r\n\r\n  constructor(public dataService: DataService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n     \r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n      \r\n  }\r\n\r\n  itemClick(e:any){\r\n    this.row.current = e.value;\r\n    this.itemEvent.emit(e);\r\n  }\r\n\r\n  addOption(){\r\n     \r\n    let index= 0;\r\n    if(this.row!=null && this.row.data!=null && this.row.data.length>0){\r\n      index= this.row.data.length;\r\n    }\r\n    index++;\r\n    let cascader = this.row.cascader;\r\n    this.row.data.push({\r\n      value:`${cascader}-${index}`,\r\n      label:`éé¡¹${index}`,\r\n      children:[]\r\n    });\r\n    this.addOptionEvent.emit();\r\n  }\r\n\r\n  delOption(e:any){\r\n    this.delOptionEvent.emit(e);\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  NgZone,\r\n  Output,\r\n  OnChanges,\r\n  HostListener,\r\n  ElementRef,\r\n  Directive,\r\n  EventEmitter,\r\n  OnInit,\r\n  Type,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\ndeclare var CKEDITOR: any; \r\nimport * as _ from 'lodash';\r\n\r\n@Directive({\r\n  selector: '[contenteditableModel]',\r\n})\r\nexport class ContenteditableModel implements OnChanges {\r\n  @Input('contenteditableModel') model: any={};\r\n  @Input() hasI18n = false;\r\n  @Output('contenteditableModelChange') change = new EventEmitter();\r\n  // @Output() limetValue: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() blur = new EventEmitter();\r\n  @Output() focus = new EventEmitter();\r\n  @Input() debounce: string=\"\";\r\n  @Input() placeholder = '';\r\n  @Input() brMode = false;\r\n\r\n  // changeBySelf = false;\r\n  // instance: any;\r\n  // cursor: any;\r\n  // splitIndex;\r\n  // debounceTimeout: any;\r\n  // lastRange: any;\r\n  // editableEle: any;\r\n  // priousV: string;\r\n  // languagetype = 1;\r\n  // private lastViewModel: any;\r\n  constructor(private elRef: ElementRef, public zone: NgZone) {}\r\n\r\n  ngAfterViewInit() {\r\n    //this.initEditor();\r\n  }\r\n\r\n  // initEditor() {\r\n  //   let config = {\r\n  //     startupFocus: false,\r\n  //     toolbar: 'Basic',\r\n  //     allowedContent: true,\r\n  //     placeholder: this.placeholder,\r\n  //     extraPlugins: '',\r\n  //     toolbar_Basic: [\r\n  //       [\r\n  //         'Font',\r\n  //         'FontSize',\r\n  //         'Bold',\r\n  //         'Underline',\r\n  //         'Italic',\r\n  //         '-',\r\n  //         'JustifyLeft',\r\n  //         'JustifyCenter',\r\n  //         'JustifyRight',\r\n  //         'TextColor',\r\n  //         'BGColor',\r\n  //       ],\r\n  //     ]\r\n  //   };\r\n  //   if (this.hasI18n) {\r\n  //     const pluginName = (config.extraPlugins ? ',' : '') + 'i18n';\r\n  //     config.extraPlugins = config.extraPlugins + pluginName;\r\n  //     config.toolbar_Basic[0].unshift('Chinese', '-', 'English');\r\n  //   }\r\n  //   // console.log('config==', config);\r\n  //   if (this.brMode) {\r\n  //     config['enterMode'] = CKEDITOR.ENTER_BR;\r\n  //     config['shiftEnterMode'] = CKEDITOR.ENTER_BR;\r\n  //   }\r\n  //   this.instance = CKEDITOR.inline(this.elRef.nativeElement, config);\r\n  //   // console.log('this.instance==', this.instance);\r\n\r\n  //   // è®¾ç½®å½éåè¯­è¨åä¾¦å¬\r\n  //   // this.languagetype = this.instance.element.getAttribute('data-i18n') || this.languagetype;\r\n  //   // this.instance.on('i18n', (evt: any) => {\r\n  //   //   // console.log('i18n change= ', evt);\r\n  //   //   if (evt.data != this.languagetype) {\r\n  //   //     this.languagetype = evt.data;\r\n  //   //     this.updateEditorValue();\r\n  //   //   }\r\n  //   // });\r\n\r\n  //   // æ´æ°è¡¨åå¼\r\n  //   this.updateEditorValue();\r\n\r\n  //   // CKEditor blur event\r\n  //   this.instance.on('blur', (evt: any) => {\r\n  //     this.blur.emit(evt);\r\n  //   });\r\n\r\n  //   // CKEditor focus event\r\n  //   this.instance.on('focus', (evt: any) => {\r\n  //     this.focus.emit(evt);\r\n  //   });\r\n\r\n  //   this.instance.on('change', (evt: any) => {\r\n  //     // console.log('onchange == ', evt);\r\n  //     let value = this.instance.getData();\r\n  //     if (this.model !== value) {\r\n  //       // Debounce update\r\n  //       if (this.debounce) {\r\n  //         if (this.debounceTimeout) clearTimeout(this.debounceTimeout);\r\n  //         this.debounceTimeout = setTimeout(() => {\r\n  //           this.updateValue(this.instance.getData());\r\n  //           this.debounceTimeout = null;\r\n  //         }, parseInt(this.debounce, 10));\r\n  //       } else {\r\n  //         this.updateValue(value);\r\n  //       }\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // doFocus() {\r\n  //   setTimeout(() => {\r\n  //     this.instance.focus();\r\n  //   }, 0);\r\n  // }\r\n\r\n  // insertAfter(newElement, targetElement) {\r\n  //   var parent = targetElement.parentNode;\r\n  //   if (parent.lastChild == targetElement) {\r\n  //     parent.appendChild(newElement);\r\n  //   } else {\r\n  //     parent.insertBefore(newElement, targetElement.nextSibling);\r\n  //   }\r\n  // }\r\n\r\n  ngOnChanges(changes:any) {\r\n    // this.lastViewModel = this.model;\r\n    // this.updateEditorValue();\r\n  }\r\n\r\n  // onKeyup() {\r\n  //   var value = this.elRef.nativeElement.innerHTML;\r\n  //   this.lastViewModel = value;\r\n  //   this.change.emit(value);\r\n  // }\r\n\r\n  // updateValue(value: any) {\r\n  //   // this.zone.run(() => {\r\n  //   //   this.lastViewModel = value;\r\n  //   //   this.changeBySelf = true;\r\n  //   //   if (_.isArray(this.model)) {\r\n  //   //     const found = this.model.find(item => {\r\n  //   //       return item.languagetype == this.languagetype; //zhcn\r\n  //   //     });\r\n  //   //     if (found) {\r\n  //   //       found.name = value;\r\n  //   //     }\r\n  //   //     this.change.emit(this.model);\r\n  //   //   } else {\r\n  //   //     this.change.emit(value);\r\n  //   //   }\r\n  //   // });\r\n  // }\r\n\r\n  // refreshView() {\r\n  //   if (this.instance) this.instance.setData(this.lastViewModel);\r\n  //   // this.elRef.nativeElement.innerHTML = this.lastViewModel\r\n  // }\r\n\r\n  // updateEditorValue() {\r\n  //   // if (this.instance) {\r\n  //   //   let model = this.model;\r\n  //   //   // console.log('this.model==', this.model);\r\n  //   //   if (_.isArray(this.model)) {\r\n  //   //     let foundItem = this.model.find(item => {\r\n  //   //       return item.languagetype == this.languagetype; //zhcn\r\n  //   //     });\r\n  //   //     if (!foundItem) {\r\n  //   //       foundItem = { languagetype: this.languagetype, id: 0, name: '' };\r\n  //   //       this.model.push(foundItem);\r\n  //   //     }\r\n  //   //     model = foundItem.name;\r\n  //   //   }\r\n  //   //   this.instance.setData(model);\r\n  //   // }\r\n  // }\r\n\r\n  // empty() {\r\n  //   this.model = '';\r\n  //   this.lastViewModel = '';\r\n  //   this.instance.setData('');\r\n  // }\r\n\r\n  /**\r\n   * On component destroy\r\n   */\r\n  ngOnDestroy() {\r\n    // if (this.debounceTimeout) {\r\n    //   clearTimeout(this.debounceTimeout);\r\n    //   this.debounceTimeout = null;\r\n    // }\r\n    // if (this.instance) {\r\n    //   setTimeout(() => {\r\n    //     this.instance.removeAllListeners();\r\n    //     let dom = document.querySelector('#cke_' + this.instance.name);\r\n    //     if (dom) {\r\n    //       dom.parentNode.removeChild(dom);\r\n    //     }\r\n    //     CKEDITOR.instances[this.instance.name].destroy(true);\r\n    //     this.instance.destroy(true);\r\n    //     this.instance = null;\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  // repeatStr(str, count) {\r\n  //   var ret = '';\r\n  //   for (var i = 0; i < count; i++) {\r\n  //     ret += str;\r\n  //   }\r\n  //   return ret;\r\n  // }\r\n\r\n  // checkAllIsUndline(input) {\r\n  //   let ret = true;\r\n  //   for (var i = 0; i < input.length; i++) {\r\n  //     if (input[i] != '_') {\r\n  //       ret = false;\r\n  //     }\r\n  //   }\r\n  //   return ret;\r\n  // }\r\n\r\n  // getTextNode(parent) {\r\n  //   var childNodes = parent.childNodes;\r\n  //   var childLen = childNodes.length;\r\n  //   if (childLen > 0) {\r\n  //     var child = childNodes[0];\r\n  //     if (child.childNodes.length > 0) {\r\n  //       return child.childNodes[0];\r\n  //     } else return child;\r\n  //   }\r\n  //   return parent;\r\n  // }\r\n\r\n  // prepareReplace() {\r\n  //   // è®¾ç½®æååæ å¯¹è±¡\r\n  //   //console.log(lastRange)\r\n  //   var startOffset = this.lastRange.startOffset;\r\n  //   var startText = this.lastRange.startContainer.data;\r\n  //   var parentTagName = this.lastRange.startContainer.parentNode.nodeName;\r\n  //   var isBlank = this.lastRange.startContainer.parentNode.className.indexOf('mod_fillblank') >= 0;\r\n  //   //console.log(\"startText:\"+startText)\r\n  //   if (parentTagName == 'P' || (isBlank && parentTagName == 'SPAN')) {\r\n  //     if (this.checkAllIsUndline(startText)) {\r\n  //       this.cursor = startOffset;\r\n  //     } else if (startText.substr(-1, 1) == '_') {\r\n  //       //æåä¸ä¸ªæ¯_\r\n  //       var flagCount = 0;\r\n  //       for (var i = 0; i < startOffset; i++) {\r\n  //         if (startText[i] == '_') flagCount++;\r\n  //       }\r\n  //       this.cursor = flagCount;\r\n  //     } else if (startText.indexOf('_') >= 0) {\r\n  //       //check first is _\r\n  //       if (startText[0] == '_') {\r\n  //         var flagCount = 0;\r\n  //         for (var i = 0; i < startOffset; i++) {\r\n  //           if (startText[i] == '_') flagCount++;\r\n  //         }\r\n  //         this.cursor = startOffset - flagCount;\r\n  //       } else {\r\n  //         var flagCount = 0;\r\n  //         for (var i = 0; i < startOffset; i++) {\r\n  //           if (startText[i] != '_') flagCount++;\r\n  //         }\r\n  //         this.cursor = startOffset - flagCount;\r\n  //       }\r\n\r\n  //       //å¤æ­å·¦è¾¹æ¯éå­æ¯çæåµ\r\n  //     } else {\r\n  //       this.cursor = startOffset;\r\n  //     }\r\n  //   } else {\r\n  //     this.cursor = startOffset;\r\n  //   }\r\n\r\n  //   // console.log('last cursor:' + this.cursor);\r\n  //   //æä¹åæ®µ\r\n  //   var childNodes = this.editableEle.childNodes;\r\n  //   var childNodeLen = childNodes.length;\r\n  //   //console.log(childNodes)\r\n  //   var findIndex;\r\n  //   var textNode;\r\n  //   for (var i = 0; i < childNodeLen; i++) {\r\n  //     textNode = this.getTextNode(childNodes[i]);\r\n  //     // console.log(textNode)\r\n  //     if (textNode == this.lastRange.startContainer) {\r\n  //       //console.log(\"match\")\r\n  //       findIndex = i;\r\n  //       var parentTagName = textNode.parentNode.nodeName;\r\n  //       var isBlank = textNode.parentNode.className.indexOf('mod_fillblank') >= 0;\r\n  //       if (\r\n  //         !this.checkAllIsUndline(textNode.data) &&\r\n  //         ((parentTagName == 'SPAN' && isBlank) || parentTagName == 'P')\r\n  //       ) {\r\n  //         if (textNode.data.indexOf('_') >= 0) {\r\n  //           findIndex = i + 1;\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  //   this.splitIndex = findIndex;\r\n  //   // console.log('index:' + findIndex);\r\n  //   //this.doReplace()\r\n  // }\r\n\r\n  // doReplace() {\r\n  //   var innerHTML = this.editableEle.innerHTML;\r\n  //   //console.log(\"innerHTML:\"+innerHTML)\r\n  //   var replaceStr = this.getReplaceStr(innerHTML);\r\n  //   console.log(replaceStr);\r\n  //   // editableEle.innerHTML = replaceStr\r\n  //   //this.instance.setData(replaceStr);\r\n  //   var childNodes = this.editableEle.childNodes;\r\n  //   // console.log(childNodes);\r\n  //   //console.log(selection)\r\n  //   // å¤æ­æ¯å¦ææååæ å¯¹è±¡å­å¨\r\n  //   if (this.cursor) {\r\n  //     //console.log(\"exist range\")\r\n  //     //console.log(childNodes)\r\n  //     var selection = getSelection();\r\n  //     var textNode;\r\n  //     //var rangeNew = document.createRange();\r\n  //     var range = new CKEDITOR.dom.range(this.instance.document);\r\n  //     range.selectNodeContents(this.instance.document.getBody());\r\n  //     for (var i = 0; i < childNodes.length; i++) {\r\n  //       if (i == this.splitIndex) {\r\n  //         textNode = this.getTextNode(childNodes[i]);\r\n  //       }\r\n  //     }\r\n  //     // console.log('textNode:' + textNode);\r\n  //     if (textNode) {\r\n  //       //range.setStart(textNode, this.cursor)\r\n  //       // ä½¿åæ å¼å§ååæ ç»æéå \r\n  //       //range.collapse(true)\r\n  //     }\r\n\r\n  //     // æ¸é¤éå®å¯¹è±¡çææåæ å¯¹è±¡\r\n  //     //selection.removeAllRanges()\r\n  //     // æå¥æ°çåæ å¯¹è±¡\r\n  //     //selection.addRange(range)\r\n  //   }\r\n\r\n  //   // console.log(range)\r\n  // }\r\n\r\n  // getReplaceStr(str) {\r\n  //   // console.log(\"origin\")\r\n  //   //console.log(str)\r\n  //   var regex1 = /<span data-id=\"fillblank-[\\w]+\" class=\"mod_fillblank\">([\\w|\\u4e00-\\u9fa5a]+)<\\/span>/g;\r\n  //   // å®ä¹æååæ å¯¹è±¡\r\n  //   var lastEditRange;\r\n\r\n  //   str = str.replace(regex1, function(match, $1) {\r\n  //     // console.log(match)\r\n  //     //console.log($1)\r\n  //     // var formatStr = $1.replace(/[_]+/g,function(match){\r\n  //     // \t///console.log(match)\r\n  //     // \treturn '<span data-id=\"fillblank-w71E\" class=\"mod_fillblank\">'+match+'</span>'\r\n  //     // })\r\n  //     //console.log(str)\r\n  //     return $1;\r\n  //   });\r\n  //   //console.log(\"step1:\")\r\n  //   // console.log(str)\r\n  //   str = str.replace(/<([^>]+>)(\\w*[_]+\\w*)(<[^>]+>)/g, function(match, $1, $2) {\r\n  //     //console.log(match,$1,$2)\r\n  //     var formatStr = match.replace(/[_]+/g, function(match) {\r\n  //       // console.log(match)\r\n  //       return this.repeatStr('\\n', match.length);\r\n  //     });\r\n  //     return formatStr;\r\n  //   }); //å»æææçhtmlæ è®°\r\n  //   // console.log(str)\r\n  //   str = str.replace(/[_]+/g, function(match) {\r\n  //     //console.log(match)\r\n  //     return '<span data-id=\"fillblank-w71E\" class=\"mod_fillblank\">' + match + '</span>';\r\n  //   });\r\n  //   str = str.replace(/\\n+/g, function(match) {\r\n  //     return this.repeatStr('_', match.length);\r\n  //   });\r\n  //   //console.log(str)\r\n  //   return str;\r\n  // }\r\n\r\n  // insertText(text) {\r\n  //   this.instance.insertText(text);\r\n  // }\r\n}\r\n","import {\r\n  Component,\r\n  ViewChild,\r\n  EventEmitter,\r\n  ViewChildren,\r\n  Input,\r\n  Output,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\nimport { ContenteditableModel } from './contenteditable'; \r\n\r\nconst EDITOR_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => InlineEditorComponent),\r\n  multi: true,\r\n};\r\n\r\n// <div\r\n//       [(contenteditableModel)]=\"value\"\r\n//       [ngClass]=\"active==true?'inline_editor':'inline_editor_hidden'\"\r\n//       role=\"textbox\"\r\n//       [attr.contenteditable]=\"disabled ? 'false' : 'true'\"\r\n//       [class.disabled]=\"disabled\"\r\n//       (blur)=\"handleBlur($event)\"\r\n//       (focus)=\"handleFocus($event)\"\r\n//       [brMode]=\"brMode\"\r\n//       [placeholder]=\"placeholder\"\r\n//       [debounce]=\"debounce\"\r\n//       (contenteditableModelChange)=\"onContenteditableModelChange($event)\"\r\n//     ></div>\r\n\r\n@Component({\r\n  selector: 'inline-editor',\r\n  providers: [EDITOR_VALUE_ACCESSOR],\r\n  template: `\r\n    <input *ngIf=\"active==true\"  nz-input [(ngModel)]=\"value\" /> \r\n    <div *ngIf=\"active==false\" \r\n      class=\"inline_editor_show\"\r\n      [innerHTML]=\"value | safeHtml\">\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      :host ::ng-deep {\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class InlineEditorComponent implements ControlValueAccessor {\r\n  _value=\"\";\r\n  _classList = {};\r\n  @Input() debounce: string = '100';\r\n  @Input() placeholder: string = '';\r\n  @Input() className: string = 'inline_editor';\r\n  @Input() brMode = true;\r\n  @Output() blur = new EventEmitter();\r\n  @Output() focus = new EventEmitter();\r\n  @Input() disabled = false;\r\n  @Input() data:any=\"\";\r\n  @Input() active:boolean=false \r\n  //@ViewChild(ContenteditableModel,{static:true}) contenteditableModel: ContenteditableModel|undefined;\r\n\r\n  constructor() {}\r\n\r\n  //   focus() {\r\n  //     this.contenteditableModel.doFocus();\r\n  //   }\r\n\r\n  ngOnInit() {\r\n    // if (this.className) {\r\n    //   var splits = this.className.split(' ');\r\n    //   for (var i = 0; i < splits.length; i++) {\r\n    //     this._classList[splits[i]] = true;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  handleFocus(evt:any) {\r\n    this.focus.emit(evt);\r\n  }\r\n\r\n  handleBlur(evt:any) {\r\n    this.blur.emit(evt);\r\n  }\r\n\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n  @Input()\r\n  set value(v:any) {\r\n    if (v !== this._value) {\r\n      this._value = v;\r\n      this.onChange(v);\r\n    }\r\n  } \r\n  \r\n  onContenteditableModelChange(evt:any) {\r\n    this.onTouched();\r\n    this.onChange(evt);\r\n  }\r\n\r\n  /**\r\n   * Implements ControlValueAccessor\r\n   */\r\n  writeValue(value: any) {\r\n    this._value = value;\r\n    //if (this.contenteditableModel && this.contenteditableModel.instance) {\r\n      //this.contenteditableModel.instance.setData(value);\r\n    //}\r\n  }\r\n  onChange(_: any) {}\r\n  onTouched() {}\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-first-page\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXSurveyFirstPage implements OnInit, OnChanges {\r\n  \r\n  @Input() firstpage:any={\r\n    title:\"é®å·æ é¢\",\r\n    text:\"ä¸ºäºç»æ¨æä¾æ´å¥½çæå¡ï¼å¸ææ¨è½æ½åºå åéæ¶é´ï¼å°æ¨çæååå»ºè®®åè¯æä»¬ï¼æä»¬éå¸¸éè§æ¯ä½ç¨æ·çå®è´µæè§ï¼æå¾æ¨çåä¸ï¼ç°å¨æä»¬å°±é©¬ä¸å¼å§å§ï¼\"\r\n  }\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  }  \r\n}","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxsurvey-last-page\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXSurveyLastPage implements OnInit, OnChanges {\r\n    \r\n  @Input() lastpage:any={\r\n    title:\"\",\r\n    text:\"\"\r\n  }\r\n\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  } \r\n}","import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\n\r\n@Pipe({ name: \"replaceLine\" })\r\nexport class ReplaceLinePipe implements PipeTransform {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n  transform(value: string): string {\r\n    return value.replace(/\\n/g, \"<br/>\");\r\n  }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n\r\n@Pipe({ name: 'safeHtml'})\r\nexport class SafeHtmlPipe implements PipeTransform  {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n  transform(value:any) {\r\n    return this.sanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule, registerLocaleData } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\r\nimport {\r\n  HttpClient,\r\n  HTTP_INTERCEPTORS,\r\n  HttpClientModule\r\n} from \"@angular/common/http\";\r\nimport { TranslateLoader, TranslateModule } from \"@ngx-translate/core\";\r\nimport { OverlayModule } from \"@angular/cdk/overlay\";\r\nimport { NgZorroAntdModule, NZ_I18N, zh_CN, NZ_ICONS } from \"ng-zorro-antd\";\r\nimport {\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n} from \"@ant-design/icons-angular/icons\";\r\n//import { CKEditorModule } from '@ckeditor/ckeditor5-angular';\r\n\r\nimport zh from \"@angular/common/locales/zh\"; \r\n\r\nimport { VXFormModule } from \"@vx-form/core\";\r\nimport {\r\n  BOOTSTRAP_VXFORM_CONFIG,\r\n  FIELD_TYPE_COMPONENTS\r\n} from \"./bootstrap.config\";\r\n\r\nimport { validationConfig } from \"./validation.config\";\r\nimport { VXSurveyDesignDetail } from \"./design/detail/detail.component\"; \r\n \r\nimport { VXQuestionType } from \"./components/question-type/index.component\"; \r\nimport { VXQuestionList } from \"./components/question-list/index.component\"; \r\nimport { VXSurveySettingTemplate } from \"./components/setting.teplate\";\r\n\r\nimport { VXSurveySettingCascader } from \"./components/basic/setting_cascader\";\r\nimport { VXSurveySettingCheckBox } from \"./components/basic/setting_checkbox\";\r\nimport { VXSurveySettingDropdown } from \"./components/basic/setting_dropdown\";\r\nimport { VXSurveySettingInput } from \"./components/basic/setting_input\";\r\nimport { VXSurveySettingLine } from \"./components/basic/setting_line\";\r\nimport { VXSurveySettingRadio } from \"./components/basic/setting_radio\";\r\nimport { VXSurveySettingRemark } from \"./components/basic/setting_remark\";\r\nimport { VXSurveySettingScaler } from \"./components/basic/setting_scaler\";\r\nimport { VXSurveySettingScore } from \"./components/basic/setting_score\";\r\nimport { VXSurveySettingDate } from \"./components/basic/setting_date\";\r\nimport { VXSurveySettingTime } from \"./components/basic/setting_time\";\r\nimport { VXSurveySettingNPS } from \"./components/basic/setting_nps\";\r\nimport { VXSurveySettingProportion } from \"./components/basic/setting_proportion\";\r\nimport { VXSurveySettingEvaluation } from \"./components/basic/setting_evaluation\";\r\nimport { VXSurveySettingMatrixRadio } from \"./components/basic/setting_matrix_radio\";\r\nimport { VXSurveySettingMatrixCheckBox } from \"./components/basic/setting_matrix_checkbox\";\r\nimport { VXSurveySettingMatrixScore } from \"./components/basic/setting_matrix_score\";\r\nimport { VXSurveySettingMatrixInput } from \"./components/basic/setting_matrix_input\";\r\nimport { VXSurveySettingInputGroup } from \"./components/basic/setting_input_group\";\r\n\r\nimport { VXSurveyEditCascader } from \"./components/edit-cascader/index.component\";\r\nimport { VXSurveyEditEvaluation } from \"./components/edit-evaluation/index.component\";\r\nimport { VXSurveyEditCascaderItem } from \"./components/edit-cascader/cascader-item\";\r\n \r\nimport { ContenteditableModel } from \"./components/inline-editor/contenteditable\";\r\nimport { InlineEditorComponent } from \"./components/inline-editor/inline-editor.comonent\";\r\nimport { VXSurveyFirstPage } from \"./components/first-page/index.component\";\r\nimport { VXSurveyLastPage } from \"./components/last-page/index.component\";\r\n\r\nimport { VXFormAntService } from \"./tools/service\";\r\nimport { VXRadioService } from \"./tools/radio_Service\";\r\nimport { VXCheckboxService } from './tools/checkbox_Service';\r\nimport { VXInputService } from \"./tools/input_Service\";\r\nimport { VXOtherService } from \"./tools/other_Service\";\r\nimport { VXCascaderService } from \"./tools/cascader_Service\";\r\nimport { VXMatrixService } from \"./tools/matrix_Service\";\r\n\r\nimport { VXDialogService } from \"./service/dialog.service\"; \r\nimport { ReplaceLinePipe } from \"./tools/replaceLinePipe\"; \r\nimport { _HttpClient } from \"./net/http.client\";\r\nimport { SafeHtmlPipe } from './pipes/safehtml.pipe';\r\nconst icons = [\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n];\r\nregisterLocaleData(zh);\r\n\r\n//ç§æç\r\nconst entryComponent = [ \r\n  VXQuestionType,\r\n  VXQuestionList,\r\n  VXSurveySettingTemplate, \r\n  \r\n  VXSurveySettingCascader,\r\n  VXSurveySettingCheckBox,\r\n  VXSurveySettingDropdown,\r\n  VXSurveySettingInput,\r\n  VXSurveySettingLine,\r\n  VXSurveySettingRadio,\r\n  VXSurveySettingRemark,\r\n  VXSurveySettingScaler,\r\n  VXSurveySettingScore,\r\n  VXSurveySettingDate,\r\n  VXSurveySettingTime,\r\n  VXSurveySettingNPS,\r\n  VXSurveySettingProportion,\r\n  VXSurveySettingEvaluation,\r\n  VXSurveySettingMatrixRadio,\r\n  VXSurveySettingMatrixCheckBox,\r\n  VXSurveySettingMatrixScore,\r\n  VXSurveySettingMatrixInput,\r\n  VXSurveySettingInputGroup,\r\n  \r\n  VXSurveyEditEvaluation,\r\n  VXSurveyEditCascader,\r\n\r\n  VXSurveyEditCascaderItem,\r\n  \r\n  VXSurveyFirstPage,\r\n  VXSurveyLastPage\r\n];\r\n\r\n//å¬å¼ç\r\nconst publicComponent = [\r\n  VXSurveyDesignDetail,\r\n  VXSurveyEditEvaluation\r\n];\r\nconst PIPES = [\r\n  SafeHtmlPipe\r\n];\r\nconst PROVIDES=[\r\n  VXRadioService,\r\n  VXCheckboxService,\r\n  VXInputService,\r\n  VXOtherService,\r\n  VXCascaderService,\r\n  VXMatrixService\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FIELD_TYPE_COMPONENTS,\r\n    entryComponent,\r\n    publicComponent,\r\n    ReplaceLinePipe,\r\n    ContenteditableModel,\r\n    InlineEditorComponent,\r\n    ...PIPES,\r\n  ],\r\n  imports: [\r\n    HttpModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    DragDropModule,\r\n    OverlayModule,\r\n    NgZorroAntdModule,\r\n    VXFormModule.forChild(BOOTSTRAP_VXFORM_CONFIG),\r\n    VXFormModule.forRoot(validationConfig)\r\n  ],\r\n  entryComponents: [entryComponent],\r\n  exports: [TranslateModule, publicComponent,ContenteditableModel,InlineEditorComponent,\r\n    ...PIPES],\r\n  providers: [ \r\n    { provide: NZ_I18N, useValue: zh_CN },\r\n    { provide: NZ_ICONS, useValue: icons }, \r\n    _HttpClient, \r\n    VXFormAntService,\r\n    VXDialogService,\r\n    ...PROVIDES\r\n  ]\r\n})\r\nexport class VXSurveyModule {}\r\n"]}