/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from "@angular/core";
import { CommonModule, registerLocaleData } from "@angular/common";
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { HttpModule } from "@angular/http";
import { DragDropModule } from "@angular/cdk/drag-drop";
import { HttpClientModule } from "@angular/common/http";
import { TranslateModule } from "@ngx-translate/core";
import { OverlayModule } from "@angular/cdk/overlay";
import { NgZorroAntdModule, NZ_I18N, zh_CN, NZ_ICONS } from "ng-zorro-antd";
import { MenuFoldOutline, MenuUnfoldOutline, FormOutline, DashboardOutline, MinusSquareFill, MinusSquareOutline, MinusSquareTwoTone, MinusOutline, InboxOutline } from "@ant-design/icons-angular/icons";
//import { CKEditorModule } from '@ckeditor/ckeditor5-angular';
import zh from "@angular/common/locales/zh";
import { VXFormModule } from "@vx-form/core";
import { BOOTSTRAP_VXFORM_CONFIG, FIELD_TYPE_COMPONENTS } from "./bootstrap.config";
import { validationConfig } from "./validation.config";
import { VXSurveyDesignDetail } from "./design/detail/detail.component";
import { VXQuestionType } from "./components/question-type/index.component";
import { VXQuestionList } from "./components/question-list/index.component";
import { VXSurveySettingTemplate } from "./components/setting.teplate";
import { VXSurveySettingCascader } from "./components/basic/setting_cascader";
import { VXSurveySettingCheckBox } from "./components/basic/setting_checkbox";
import { VXSurveySettingDropdown } from "./components/basic/setting_dropdown";
import { VXSurveySettingInput } from "./components/basic/setting_input";
import { VXSurveySettingLine } from "./components/basic/setting_line";
import { VXSurveySettingRadio } from "./components/basic/setting_radio";
import { VXSurveySettingRemark } from "./components/basic/setting_remark";
import { VXSurveySettingScaler } from "./components/basic/setting_scaler";
import { VXSurveySettingScore } from "./components/basic/setting_score";
import { VXSurveySettingDate } from "./components/basic/setting_date";
import { VXSurveySettingTime } from "./components/basic/setting_time";
import { VXSurveySettingNPS } from "./components/basic/setting_nps";
import { VXSurveySettingProportion } from "./components/basic/setting_proportion";
import { VXSurveySettingEvaluation } from "./components/basic/setting_evaluation";
import { VXSurveySettingMatrixRadio } from "./components/basic/setting_matrix_radio";
import { VXSurveySettingMatrixCheckBox } from "./components/basic/setting_matrix_checkbox";
import { VXSurveySettingMatrixScore } from "./components/basic/setting_matrix_score";
import { VXSurveySettingMatrixInput } from "./components/basic/setting_matrix_input";
import { VXSurveySettingInputGroup } from "./components/basic/setting_input_group";
import { VXSurveyEditCascader } from "./components/edit-cascader/index.component";
import { VXSurveyEditEvaluation } from "./components/edit-evaluation/index.component";
import { VXSurveyEditCascaderItem } from "./components/edit-cascader/cascader-item";
import { ContenteditableModel } from "./components/inline-editor/contenteditable";
import { InlineEditorComponent } from "./components/inline-editor/inline-editor.comonent";
import { VXSurveyFirstPage } from "./components/first-page/index.component";
import { VXSurveyLastPage } from "./components/last-page/index.component";
import { VXFormAntService } from "./tools/service";
import { VXRadioService } from "./tools/radio_Service";
import { VXCheckboxService } from './tools/checkbox_Service';
import { VXInputService } from "./tools/input_Service";
import { VXOtherService } from "./tools/other_Service";
import { VXCascaderService } from "./tools/cascader_Service";
import { VXMatrixService } from "./tools/matrix_Service";
import { VXDialogService } from "./service/dialog.service";
import { ReplaceLinePipe } from "./tools/replaceLinePipe";
import { _HttpClient } from "./net/http.client";
import { SafeHtmlPipe } from './pipes/safehtml.pipe';
/** @type {?} */
const icons = [
    MenuFoldOutline,
    MenuUnfoldOutline,
    FormOutline,
    DashboardOutline,
    MinusSquareFill,
    MinusSquareOutline,
    MinusSquareTwoTone,
    MinusOutline,
    InboxOutline
];
registerLocaleData(zh);
//私有的
/** @type {?} */
const entryComponent = [
    VXQuestionType,
    VXQuestionList,
    VXSurveySettingTemplate,
    VXSurveySettingCascader,
    VXSurveySettingCheckBox,
    VXSurveySettingDropdown,
    VXSurveySettingInput,
    VXSurveySettingLine,
    VXSurveySettingRadio,
    VXSurveySettingRemark,
    VXSurveySettingScaler,
    VXSurveySettingScore,
    VXSurveySettingDate,
    VXSurveySettingTime,
    VXSurveySettingNPS,
    VXSurveySettingProportion,
    VXSurveySettingEvaluation,
    VXSurveySettingMatrixRadio,
    VXSurveySettingMatrixCheckBox,
    VXSurveySettingMatrixScore,
    VXSurveySettingMatrixInput,
    VXSurveySettingInputGroup,
    VXSurveyEditEvaluation,
    VXSurveyEditCascader,
    VXSurveyEditCascaderItem,
    VXSurveyFirstPage,
    VXSurveyLastPage
];
//公开的
/** @type {?} */
const publicComponent = [
    VXSurveyDesignDetail,
    VXSurveyEditEvaluation
];
/** @type {?} */
const PIPES = [
    SafeHtmlPipe
];
/** @type {?} */
const PROVIDES = [
    VXRadioService,
    VXCheckboxService,
    VXInputService,
    VXOtherService,
    VXCascaderService,
    VXMatrixService
];
const ɵ0 = zh_CN, ɵ1 = icons;
export class VXSurveyModule {
}
VXSurveyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FIELD_TYPE_COMPONENTS,
                    entryComponent,
                    publicComponent,
                    ReplaceLinePipe,
                    ContenteditableModel,
                    InlineEditorComponent,
                    ...PIPES,
                ],
                imports: [
                    HttpModule,
                    HttpClientModule,
                    FormsModule,
                    ReactiveFormsModule,
                    CommonModule,
                    DragDropModule,
                    OverlayModule,
                    NgZorroAntdModule,
                    VXFormModule.forChild(BOOTSTRAP_VXFORM_CONFIG),
                    VXFormModule.forRoot(validationConfig)
                ],
                entryComponents: [entryComponent],
                exports: [TranslateModule, publicComponent, ContenteditableModel, InlineEditorComponent,
                    ...PIPES],
                providers: [
                    { provide: NZ_I18N, useValue: ɵ0 },
                    { provide: NZ_ICONS, useValue: ɵ1 },
                    _HttpClient,
                    VXFormAntService,
                    VXDialogService,
                    ...PROVIDES
                ]
            },] }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,