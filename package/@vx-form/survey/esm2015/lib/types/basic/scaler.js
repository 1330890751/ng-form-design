/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from "@angular/core";
import { FieldType, Guid } from "@vx-form/core";
import { VXFormAntService } from "../../tools/service";
export class VXSurveyScaler extends FieldType {
    /**
     * @param {?} dyService
     */
    constructor(dyService) {
        super();
        this.guid = Guid.create()["value"];
        this.service = dyService;
    }
    /**
     * @return {?}
     */
    get scalerData() {
        /** @type {?} */
        let result = [];
        if (this.to != undefined && this.to != null && this.to.beginNumber != undefined && this.to.beginNumber != null && this.to.max != undefined && this.to.max != null) {
            /** @type {?} */
            let begin = this.to.beginNumber;
            for (let i = 0; i < this.to.max; i++) {
                result.push({
                    value: begin,
                    label: begin
                });
                begin = begin + 1;
            }
        }
        console.log(result);
        return result;
    }
}
VXSurveyScaler.decorators = [
    { type: Component, args: [{
                selector: "vxsurvey-scaler",
                template: `
    
  `
            }] }
];
/** @nocollapse */
VXSurveyScaler.ctorParameters = () => [
    { type: VXFormAntService }
];
if (false) {
    /** @type {?} */
    VXSurveyScaler.prototype.service;
    /** @type {?} */
    VXSurveyScaler.prototype.guid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZ4LWZvcm0vc3VydmV5LyIsInNvdXJjZXMiOlsibGliL3R5cGVzL2Jhc2ljL3NjYWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVN2RCxNQUFNLE9BQU8sY0FBZSxTQUFRLFNBQVM7Ozs7SUFHM0MsWUFBWSxTQUEyQjtRQUNyQyxLQUFLLEVBQUUsQ0FBQztRQUZWLFNBQUksR0FBUSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELElBQUksVUFBVTs7WUFDUixNQUFNLEdBQU8sRUFBRTtRQUNuQixJQUFHLElBQUksQ0FBQyxFQUFFLElBQUUsU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxJQUFHLFNBQVMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsSUFBRSxJQUFJLElBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFFLElBQUksRUFBRTs7Z0JBRW5KLEtBQUssR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVc7WUFDN0IsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxFQUFDO2dCQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNWLEtBQUssRUFBQyxLQUFLO29CQUNYLEtBQUssRUFBQyxLQUFLO2lCQUNaLENBQUMsQ0FBQztnQkFDSCxLQUFLLEdBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQzthQUNmO1NBQ0Y7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ25CLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OztZQTdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFOztHQUVUO2FBQ0Y7Ozs7WUFSUSxnQkFBZ0I7Ozs7SUFVdkIsaUNBQWE7O0lBQ2IsOEJBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRmllbGRUeXBlLCBHdWlkIH0gZnJvbSBcIkB2eC1mb3JtL2NvcmVcIjtcclxuaW1wb3J0IHsgVlhGb3JtQW50U2VydmljZSB9IGZyb20gXCIuLi8uLi90b29scy9zZXJ2aWNlXCI7XHJcbmltcG9ydCB7Q2RrRHJhZ0Ryb3AsIG1vdmVJdGVtSW5BcnJheX0gZnJvbSAnQGFuZ3VsYXIvY2RrL2RyYWctZHJvcCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogXCJ2eHN1cnZleS1zY2FsZXJcIixcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgXHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVlhTdXJ2ZXlTY2FsZXIgZXh0ZW5kcyBGaWVsZFR5cGUge1xyXG4gIHNlcnZpY2U6IGFueTtcclxuICBndWlkOiBhbnkgPSBHdWlkLmNyZWF0ZSgpW1widmFsdWVcIl07XHJcbiAgY29uc3RydWN0b3IoZHlTZXJ2aWNlOiBWWEZvcm1BbnRTZXJ2aWNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5zZXJ2aWNlID0gZHlTZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNjYWxlckRhdGEoKXtcclxuICAgIGxldCByZXN1bHQ6YW55W109W107XHJcbiAgICBpZih0aGlzLnRvIT11bmRlZmluZWQgJiYgdGhpcy50byE9bnVsbCAmJiB0aGlzLnRvLmJlZ2luTnVtYmVyICE9dW5kZWZpbmVkICYmIHRoaXMudG8uYmVnaW5OdW1iZXIhPW51bGwgICYmIHRoaXMudG8ubWF4ICE9dW5kZWZpbmVkICYmIHRoaXMudG8ubWF4IT1udWxsICl7XHJcbiAgICAgXHJcbiAgICAgIGxldCBiZWdpbj10aGlzLnRvLmJlZ2luTnVtYmVyO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPHRoaXMudG8ubWF4O2krKyl7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgdmFsdWU6YmVnaW4sXHJcbiAgICAgICAgICBsYWJlbDpiZWdpblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJlZ2luPWJlZ2luKzE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKHJlc3VsdClcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gXHJcbn1cclxuXHJcbi8vIDxuZy1jb250YWluZXIgKm5nSWY9XCJmb3JtU3RhdHVzICE9PSAwXCI+IFxyXG4vLyAgICAgICA8ZGl2IGNsYXNzPVwicXVlc3Rpb24td3JhcF90aXRsZVwiPlxyXG4vLyAgICAgICAgIDxkaXYgY2xhc3M9XCJyZXF1aXJlZFwiPlxyXG4vLyAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJ0by5yZXF1aXJlZFwiPio8L3NwYW4+XHJcbi8vICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgPGlubGluZS1lZGl0b3IgWyhuZ01vZGVsKV09XCJ0by5sYWJlbFwiIFthY3RpdmVdPVwiYWN0aXZlXCI+PC9pbmxpbmUtZWRpdG9yPiAgIFxyXG4vLyAgICAgICA8L2Rpdj5cclxuLy8gICAgICAgPGRpdiBjbGFzcz1cInF1ZXN0aW9uLXdyYXBfY29udGVudFwiPlxyXG4vLyAgICAgICAgIDxkaXYgY2xhc3M9XCJvcHRpb25fd3JhcCBiYXNpY19zY2FsZXJcIj5cclxuLy8gICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0by50eXBlPT0nbnVtYmVyJ1wiPlxyXG4vLyAgICAgICAgICAgICA8bnotcmFkaW8tZ3JvdXA+IFxyXG4vLyAgICAgICAgICAgICAgIDxsYWJlbCBuei1yYWRpbyBuelZhbHVlPVwiQVwiPkE8L2xhYmVsPlxyXG4vLyAgICAgICAgICAgICAgIDxsYWJlbCBuei1yYWRpbyBuelZhbHVlPVwiQlwiPkI8L2xhYmVsPlxyXG4vLyAgICAgICAgICAgICAgIDxsYWJlbCBuei1yYWRpbyBuelZhbHVlPVwiQ1wiPkM8L2xhYmVsPlxyXG4vLyAgICAgICAgICAgICAgIDxsYWJlbCBuei1yYWRpbyBuelZhbHVlPVwiRFwiPkQ8L2xhYmVsPiAgXHJcbi8vICAgICAgICAgICAgIDwvbnotcmFkaW8tZ3JvdXA+XHJcbi8vICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuLy8gICAgICAgICA8L2Rpdj5cclxuLy8gICAgICAgPC9kaXY+IFxyXG4vLyAgICAgICA8ZGl2IGNsYXNzPVwicXVlc3Rpb24td3JhcF9vcGVyYXRlXCI+XHJcbi8vICAgICAgICAgPHNwYW4gKGNsaWNrKT1cImFkZE9wdGlvbigpXCI+5re75Yqg5Y2V5Liq6YCJ6aG5PC9zcGFuPiBcclxuLy8gICAgICAgICA8c3BhbiAoY2xpY2spPVwiYWRkT3B0aW9ucygpXCI+5om56YeP5re75Yqg6YCJ6aG5PC9zcGFuPlxyXG4vLyAgICAgICA8L2Rpdj4gXHJcbi8vICAgICA8L25nLWNvbnRhaW5lcj5cclxuXHJcbi8vICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZm9ybVN0YXR1cyA9PT0gMFwiPlxyXG4vLyAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZWRpdG9yID09PSB0cnVlXCI+XHJcbi8vICAgICAgICAgPG56LXJhZGlvLWdyb3VwXHJcbi8vICAgICAgICAgICBbbnpOYW1lXT1cIidyYWRpb2dyb3VwLScgKyBndWlkXCJcclxuLy8gICAgICAgICAgIFtmb3JtQ29udHJvbF09XCJmb3JtQ29udHJvbFwiXHJcbi8vICAgICAgICAgICBbdnhGb3JtQXR0cmlidXRlc109XCJmaWVsZFwiXHJcbi8vICAgICAgICAgICBbY2xhc3MuaXMtaW52YWxpZF09XCJzaG93RXJyb3JcIlxyXG4vLyAgICAgICAgID5cclxuLy8gICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgdG8ub3B0aW9uc1wiPlxyXG4vLyAgICAgICAgICAgICA8bGFiZWwgbnotcmFkaW8gW256VmFsdWVdPVwiaXRlbS52YWx1ZVwiPnt7IGl0ZW0ubGFiZWwgfX08L2xhYmVsPlxyXG4vLyAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbi8vICAgICAgICAgPC9uei1yYWRpby1ncm91cD5cclxuLy8gICAgICAgICA8ZGl2IGNsYXNzPVwidGlwc1wiPlxyXG4vLyAgICAgICAgICAgPGlcclxuLy8gICAgICAgICAgICAgY2xhc3M9XCJpY29uLWJhbmd6aHVcIlxyXG4vLyAgICAgICAgICAgICBbbnpUb29sdGlwVGl0bGVdPVwidGlwc1wiXHJcbi8vICAgICAgICAgICAgIG56VG9vbHRpcFBsYWNlbWVudD1cInRvcFwiXHJcbi8vICAgICAgICAgICAgIG56LXRvb2x0aXBcclxuLy8gICAgICAgICAgICAgKm5nSWY9XCJ0aXBzICE9ICcnXCJcclxuLy8gICAgICAgICAgID48L2k+XHJcbi8vICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgIDwvbmctY29udGFpbmVyPlxyXG5cclxuLy8gICAgICAgPGRpdiBjbGFzcz1cImZpZWxkdGV4dFwiICpuZ0lmPVwiZWRpdG9yID09PSBmYWxzZVwiPnt7IHRleHRTaW5nbGUgfX08L2Rpdj5cclxuLy8gICAgIDwvbmctY29udGFpbmVyPiJdfQ==