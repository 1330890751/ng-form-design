{"version":3,"file":"vx-form-ant.js.map","sources":["ng://@vx-form/ant/lib/tools/service.ts","ng://@vx-form/ant/lib/types/text.ts","ng://@vx-form/ant/lib/types/texti18n.ts","ng://@vx-form/ant/lib/types/textarea.ts","ng://@vx-form/ant/lib/types/number.ts","ng://@vx-form/ant/lib/types/password.ts","ng://@vx-form/ant/lib/types/radio.ts","ng://@vx-form/ant/lib/types/radiogroup.ts","ng://@vx-form/ant/lib/types/checkbox.ts","ng://@vx-form/ant/lib/types/checkboxgroup.ts","ng://@vx-form/ant/lib/types/select.ts","ng://@vx-form/ant/lib/types/datetime.ts","ng://@vx-form/ant/lib/types/image.ts","ng://@vx-form/ant/lib/types/upload.ts","ng://@vx-form/ant/lib/service/dialog.service.ts","ng://@vx-form/ant/lib/net/http.client.ts","ng://@vx-form/ant/lib/service/data.service.ts","ng://@vx-form/ant/lib/components/tree/index.component.ts","ng://@vx-form/ant/lib/components/employee/index.component.ts","ng://@vx-form/ant/lib/components/org/index.component.ts","ng://@vx-form/ant/lib/components/postion/index.component.ts","ng://@vx-form/ant/lib/components/area/index.component.ts","ng://@vx-form/ant/lib/types/lookup.ts","ng://@vx-form/ant/lib/types/html.ts","ng://@vx-form/ant/lib/types/line.ts","ng://@vx-form/ant/lib/wrappers/form-field.wrapper.ts","ng://@vx-form/ant/lib/templates/group.ts","ng://@vx-form/ant/lib/templates/repeat.ts","ng://@vx-form/ant/lib/bootstrap.config.ts","ng://@vx-form/ant/lib/validation.config.ts","ng://@vx-form/ant/lib/tools/formFieldService.ts","ng://@vx-form/ant/lib/tools/commonService.ts","ng://@vx-form/ant/lib/tools/transferService.ts","ng://@vx-form/ant/lib/tools/tableFieldService.ts","ng://@vx-form/ant/lib/design/field/field.component.ts","ng://@vx-form/ant/lib/design/field-label/field.component.ts","ng://@vx-form/ant/lib/design/table/table.component.ts","ng://@vx-form/ant/lib/design/tables/table.component.ts","ng://@vx-form/ant/lib/design/detail/detail.component.ts","ng://@vx-form/ant/lib/design/drawer/index.component.ts","ng://@vx-form/ant/lib/components/private/tree/index.component.ts","ng://@vx-form/ant/lib/components/private/table/index.component.ts","ng://@vx-form/ant/lib/tools/replaceLinePipe.ts","ng://@vx-form/ant/lib/bootstrap.module.ts"],"sourcesContent":["import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXFormAntService {\r\n  btnEvent = new EventEmitter();\r\n  fieldEvent = new EventEmitter();\r\n\r\n  workList = [];\r\n\r\n  constructor() {}\r\n\r\n  fieldOperational(sign: string, field: VXFormFieldConfig) {\r\n    this.fieldEvent.emit({\r\n      sign: sign,\r\n      field: field\r\n    });\r\n  }\r\n\r\n  groupOperational(type: string, field: VXFormFieldConfig) {\r\n    this.btnEvent.emit({\r\n      type: type,\r\n      field: field\r\n    });\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-text\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <input\r\n          nz-input\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        />\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldText extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  ViewChild,\r\n  Input,\r\n  OnChanges,\r\n  DoCheck,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n  HostListener\r\n} from \"@angular/core\";\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from \"@angular/cdk/overlay\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-field-inputi18n\",\r\n  template: `\r\n    <ng-container *ngIf=\"editor === true\">\r\n      <div class=\"inputi18n\" cdkOverlayOrigin>\r\n        <input\r\n          nz-input\r\n          [(ngModel)]=\"language[0].resvalue\"\r\n          [vxFormAttributes]=\"field\"\r\n          (ngModelChange)=\"onChange(language[0].resvalue)\"\r\n          nz-popover\r\n          nzPopoverTrigger=\"click\"\r\n          [nzPopoverContent]=\"contentTemplate\"\r\n          nzOverlayClassName=\"inputi18n-template\"\r\n          nzPopoverPlacement=\"bottom\"\r\n          [nzOverlayStyle]=\"{ width: triggerWidth }\"\r\n          (nzVisibleChange)=\"visibleChange($event)\"\r\n        />\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <ng-template #contentTemplate>\r\n        <ul>\r\n          <ng-container *ngFor=\"let item of language; let i = index\">\r\n            <li *ngIf=\"i > 0\">\r\n              <label>{{ item.languagetype }}</label>\r\n              <input\r\n                nz-input\r\n                [(ngModel)]=\"item.resvalue\"\r\n                [vxFormAttributes]=\"field\"\r\n                (ngModelChange)=\"onChange(item.resvalue)\"\r\n              />\r\n            </li>\r\n          </ng-container>\r\n        </ul>\r\n      </ng-template>\r\n    </ng-container>\r\n    <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ langText }}</div>\r\n  `\r\n})\r\nexport class VXFormFieldTextI18n extends FieldType {\r\n  service: any;\r\n  triggerWidth = \"260px\";\r\n\r\n  @ViewChild(CdkOverlayOrigin, { static: false })\r\n  cdkOverlayOrigin: CdkOverlayOrigin | undefined;\r\n  @HostListener(\"window:resize\", [\"$event\"])\r\n  resize(event: any) {\r\n    this.visibleChange(event);\r\n  }\r\n  languageList: Array<any> = [\r\n    { languagetype: \"chinese\", resvalue: \"\" },\r\n    { languagetype: \"english\", resvalue: \"\" },\r\n    { languagetype: \"english2\", resvalue: \"\" }\r\n  ];\r\n\r\n  get language() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model.hasOwnProperty(this.key)\r\n    ) {\r\n      if (\r\n        this.formControl.value != undefined &&\r\n        this.formControl.value != null &&\r\n        this.formControl.value != [] &&\r\n        this.formControl.value.length > 0\r\n      ) {\r\n        if (this.formControl.value != this.languageList) {\r\n          this.languageList = this.formControl.value;\r\n        }\r\n      }\r\n    }\r\n    return this.languageList;\r\n  }\r\n\r\n  onChange(value: any) {\r\n    if (this.to.required) {\r\n      let empty = this.languageList.some((item: any) => {\r\n        return (\r\n          item.resvalue === null ||\r\n          item.resvalue === \"\" ||\r\n          item.resvalue === \" \"\r\n        );\r\n      });\r\n      if (empty) {\r\n        this.formControl.setValue([]);\r\n      } else {\r\n        this.formControl.setValue(this.languageList);\r\n      }\r\n    } else {\r\n      this.formControl.setValue(this.languageList);\r\n    }\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  visibleChange(event: any) {\r\n    if (event) {\r\n      if (this.cdkOverlayOrigin !== undefined) {\r\n        this.triggerWidth =\r\n          this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect()\r\n            .width -\r\n          24 +\r\n          \"px\";\r\n      }\r\n    }\r\n  }\r\n\r\n  get langText() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model[this.key] != undefined\r\n    ) {\r\n      let lang = this.model[this.key];\r\n      if (\r\n        lang != undefined &&\r\n        lang != null &&\r\n        lang != \"\" &&\r\n        lang instanceof Array &&\r\n        lang.length > 0\r\n      ) {\r\n        return lang[0][\"resvalue\"];\r\n      }\r\n      return \"\";\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-textarea\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <textarea nz-input disabled rows=\"4\"> </textarea>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <textarea\r\n          nz-input\r\n          [formControl]=\"formControl\"\r\n          class=\"form-control\"\r\n          [class.is-invalid]=\"showError\"\r\n          [vxFormAttributes]=\"field\"\r\n          rows=\"4\"\r\n        >\r\n        </textarea>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div\r\n        class=\"fieldtext\"\r\n        *ngIf=\"editor === false\"\r\n        [innerHTML]=\"text | replaceLine\"\r\n      ></div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldTextArea extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-number\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n    <div class=\"fieldOperational\">\r\n      <div class=\"fieldcheckbox\">\r\n        <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n      </div>\r\n      <div class=\"fieldControl\">\r\n        <div class=\"label\">\r\n          <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n        </div>\r\n        <div class=\"control\">\r\n          <input nz-input disabled />\r\n        </div>\r\n        <div class=\"fieldButton\">\r\n          <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n            <i class=\"icon-Edit03\"></i>ç¼è¾\r\n          </button>\r\n          <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n            <i class=\"icon-KT-Close\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"formStatus === 0\">\r\n    <ng-container *ngIf=\"editor === true\">\r\n      <nz-input-number\r\n        [formControl]=\"formControl\"\r\n        class=\"form-control\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\"\r\n        [nzPlaceHolder]=\"placeHolder\"\r\n        [nzPrecision]=\"precision\"\r\n      ></nz-input-number>\r\n      <div class=\"tips\">\r\n        <i\r\n          class=\"icon-bangzhu\"\r\n          [nzTooltipTitle]=\"tips\"\r\n          nzTooltipPlacement=\"top\"\r\n          nz-tooltip\r\n          *ngIf=\"tips != ''\"\r\n        ></i>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n  </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldNumber extends FieldType {\r\n  service: any;\r\n  \r\n  get precision(){\r\n    let result=0;\r\n    if(this.to!=undefined && this.to!=null && this.to[\"precision\"]!=undefined && this.to[\"precision\"]!=null){\r\n      result = this.to[\"precision\"];\r\n    }\r\n    return result;\r\n  }\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-password\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n  <div class=\"fieldOperational\">\r\n    <div class=\"fieldcheckbox\">\r\n      <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n    </div>\r\n    <div class=\"fieldControl\">\r\n      <div class=\"label\">\r\n        <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n      </div>\r\n      <div class=\"control\">\r\n        <input nz-input disabled />\r\n      </div>\r\n      <div class=\"fieldButton\">\r\n        <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n          <i class=\"icon-Edit03\"></i>ç¼è¾\r\n        </button>\r\n        <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n          <i class=\"icon-KT-Close\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"formStatus === 0\">\r\n  <ng-container *ngIf=\"editor === true\">\r\n    <input\r\n      nz-input\r\n      [formControl]=\"formControl\"\r\n      [vxFormAttributes]=\"field\"\r\n      [class.is-invalid]=\"showError\"\r\n      [type]=\"'password'\"\r\n    />\r\n    <div class=\"tips\">\r\n      <i\r\n        class=\"icon-bangzhu\"\r\n        [nzTooltipTitle]=\"tips\"\r\n        nzTooltipPlacement=\"top\"\r\n        nz-tooltip\r\n        *ngIf=\"tips != ''\"\r\n      ></i>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n</ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldPassWord extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n@Component({\r\n  selector: \"vxfield-radio\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <label nz-radio nzDisabled=\"true\"></label>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <label\r\n          nz-radio\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        ></label>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldRadio extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n@Component({\r\n  selector: \"vxfield-radiogroup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-radio-group\r\n              [nzName]=\"'radiogroup-' + guid\"\r\n              [formControl]=\"formControl\"\r\n              [vxFormAttributes]=\"field\"\r\n              [class.is-invalid]=\"showError\"\r\n            >\r\n              <ng-container *ngFor=\"let item of to.options\">\r\n                <label nz-radio [nzValue]=\"item.value\" nzDisabled=\"true\">{{\r\n                  item.label\r\n                }}</label>\r\n              </ng-container>\r\n            </nz-radio-group>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-radio-group\r\n          [nzName]=\"'radiogroup-' + guid\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\">\r\n            <label nz-radio [nzValue]=\"item.value\">{{ item.label }}</label>\r\n          </ng-container>\r\n        </nz-radio-group>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textSingle }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldRadioGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-checkbox\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <label nz-checkbox nzDisabled=\"true\"></label>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <label\r\n          nz-checkbox\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        ></label>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldCheckbox extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-checkboxgroup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-checkbox-wrapper\r\n              style=\"width: 100%;\"\r\n              (nzOnChange)=\"onChange($event)\"\r\n              [class.is-invalid]=\"showError\"\r\n            >\r\n              <ng-container *ngFor=\"let option of to.options; let i = index\">\r\n                <label\r\n                  nz-checkbox\r\n                  [nzValue]=\"option.value\"\r\n                  [ngModel]=\"getControlChecked(formControl.value, option)\"\r\n                  [vxFormAttributes]=\"field\"\r\n                  disabled\r\n                  >{{ option.label }}</label\r\n                >\r\n              </ng-container>\r\n            </nz-checkbox-wrapper>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-checkbox-wrapper\r\n          style=\"width: 100%;\"\r\n          (nzOnChange)=\"onChange($event)\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let option of to.options; let i = index\">\r\n            <label\r\n              nz-checkbox\r\n              [nzValue]=\"option.value\"\r\n              [ngModel]=\"getControlChecked(formControl.value, option)\"\r\n              [vxFormAttributes]=\"field\"\r\n              >{{ option.label }}</label\r\n            >\r\n          </ng-container>\r\n        </nz-checkbox-wrapper>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textMultiple }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldCheckboxGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  onChange(values: string[]) {\r\n    let res: any = [];\r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach(value => {\r\n        if (this.to.options !== undefined && this.to.options !== null) {\r\n          this.to.options.forEach((option: any) => {\r\n            if (option[\"value\"] === value) {\r\n              res.push(value);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getCheckStatus(option: any) {\r\n    this.formControl.value;\r\n  }\r\n\r\n  public getControlChecked(values: any, option: any) {\r\n    let result = false;\r\n    if (option && values) {\r\n      result = values.some((value: any) => {\r\n        return value == option.value;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ICheckValues {\r\n  value: any;\r\n}\r\n","import { Component, AfterViewChecked, AfterViewInit } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport { CodeSandboxOutline } from \"@ant-design/icons-angular/icons/public_api\";\r\nimport { elementAt } from \"rxjs/operators\";\r\n@Component({\r\n  selector: \"vxfield-select\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-select\r\n          nzShowSearch\r\n          nzAllowClear\r\n          [nzMode]=\"to.selecttype === 'multiple' ? 'multiple' : 'default'\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n          [nzPlaceHolder]=\"placeHolder\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\">\r\n            <nz-option\r\n              [nzLabel]=\"item.label\"\r\n              [nzValue]=\"item.value\"\r\n            ></nz-option>\r\n          </ng-container>\r\n        </nz-select>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">\r\n        {{ getSelectText() }}\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldSelect extends FieldType implements AfterViewChecked {\r\n  service: any;\r\n  defaultValue: string = \"\";\r\n  defaultValues: string[] = [];\r\n  selecttype = \"default\";\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n  ngAfterViewChecked() {\r\n    if (this.to.selecttype === \"multiple\") {\r\n      this.selecttype = \"multiple\";\r\n      if (this.field.defaultValue && this.field.defaultValue != null) {\r\n        this.defaultValues = this.field.defaultValue.split(\",\");\r\n      }\r\n    } else {\r\n      this.defaultValue = this.field.defaultValue;\r\n    }\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  getSelectText() {\r\n    let result: string = \"\";\r\n    if (this.to && this.to.selecttype) {\r\n      if (this.to.selecttype === \"single\") {\r\n        result = this.textSingle;\r\n      } else if (this.to.selecttype === \"multiple\") {\r\n        result = this.textMultiple;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as moment_ from \"moment\";\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: \"vxfield-datetime\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\"\r\n      ><ng-container *ngIf=\"editor === true\"> \r\n          <nz-date-picker \r\n            nzShowTime\r\n            [nzFormat]=\"format\"\r\n            [formControl]=\"formControl\"\r\n            [vxFormAttributes]=\"field\"\r\n            [class.is-invalid]=\"showError\"\r\n          ></nz-date-picker>\r\n \r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ getText() }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldDateTime extends FieldType {\r\n  service: any;\r\n  get format(){\r\n    let result=\"yyyy-MM-dd HH:mm:ss\"; \r\n    if(this.to[\"format\"]!=undefined && this.to[\"format\"]!=null && this.to[\"format\"]!=\"\"){\r\n      result = this.to[\"format\"];\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  getText() {\r\n    let result = \"\";\r\n    if (this.to.type != undefined && this.to.type != null) {\r\n      if (\r\n        this.model != undefined &&\r\n        this.model != null &&\r\n        this.field != undefined &&\r\n        this.field != null &&\r\n        this.field.key != undefined &&\r\n        this.field.key != null &&\r\n        this.model[this.field.key] != undefined &&\r\n        this.model[this.field.key] != null &&\r\n        this.model[this.field.key] != \"\"\r\n      ) {\r\n        switch (this.to.type) {\r\n          case \"datetime\":\r\n            result = moment(this.model[this.field.key]).format(\r\n              \"yyyy-MM-DD HH:mm:ss\"\r\n            );\r\n            break;\r\n          case \"date\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY-MM-DD\");\r\n            break;\r\n          case \"year\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY\");\r\n            break;\r\n          case \"month\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY-MM\");\r\n            break;\r\n          case \"time\":\r\n            result = moment(this.model[this.field.key]).format(\"HH:mm\");\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-image\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-avatar\r\n        nzIcon=\"user\"\r\n        nzSrc=\"//zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n      ></nz-avatar>\r\n      <div class=\"tips\">\r\n        <i\r\n          class=\"icon-bangzhu\"\r\n          [nzTooltipTitle]=\"tips\"\r\n          nzTooltipPlacement=\"top\"\r\n          nz-tooltip\r\n          *ngIf=\"tips != ''\"\r\n        ></i>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldImage extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\nimport { UploadChangeParam, UploadFile } from \"ng-zorro-antd/upload\";\r\nimport { Observable, Observer } from \"rxjs\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxfield-upload\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-upload nzType=\"drag\" [nzDisabled]=\"true\">\r\n              <p class=\"ant-upload-drag-icon\"></p>\r\n              <p class=\"ant-upload-text\">åå»ææå¨æä»¶å°æ­¤åºåä¸ä¼ </p>\r\n              <p class=\"ant-upload-hint\">\r\n                æ¯æåä¸ªææ¹éä¸ä¼ ãä¸¥ç¦ä¸ä¼ ä¸æ³æä»¶ï¼è°¢è°¢!\r\n              </p>\r\n            </nz-upload>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-upload\r\n        nzType=\"drag\"\r\n        nzAction=\"https://jsonplaceholder.typicode.com/posts/\"\r\n        [nzFileList]=\"defaultFileList\"\r\n        [nzMultiple]=\"true\"\r\n        (nzChange)=\"handleChange($event)\"\r\n        [class.is-invalid]=\"showError\"\r\n      >\r\n        <p class=\"ant-upload-drag-icon\"></p>\r\n        <p class=\"ant-upload-text\">åå»ææå¨æä»¶å°æ­¤åºåä¸ä¼ </p>\r\n        <p class=\"ant-upload-hint\">\r\n          æ¯æåä¸ªææ¹éä¸ä¼ ãä¸¥ç¦ä¸ä¼ ä¸æ³æä»¶ï¼è°¢è°¢!\r\n        </p>\r\n      </nz-upload>\r\n      <div class=\"tips\"></div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldUpload extends FieldType {\r\n  service: any;\r\n  defaultFileList = [];\r\n  constructor(dyService: VXFormAntService, public msg: NzMessageService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  handleChange({ file, fileList }: UploadChangeParam): void {\r\n    debugger;\r\n    const status = file.status;\r\n    if (status !== \"uploading\") {\r\n    }\r\n    if (status === \"done\") {\r\n      let values: any = fileList.map((item: any) => {\r\n        return {\r\n          uid: item.uid,\r\n          name: item.name,\r\n          url: item.url\r\n        };\r\n      });\r\n      /* this.model[this.field.key] = values;\r\n      this.formControl.markAsTouched(); */\r\n      this.formControl.patchValue(values);\r\n      this.formControl.markAsTouched();\r\n      this.msg.success(`æä»¶${file.name} ä¸ä¼ æåï¼`);\r\n    } else if (status === \"error\") {\r\n      this.msg.error(`æä»¶${file.name} ä¸ä¼ å¤±è´¥ï¼`);\r\n    }\r\n    if (status === \"removed\") {\r\n      let values: any = this.formControl.value;\r\n      values.forEach((item: any, index: any, object: any) => {\r\n        if (item.uid === file.uid) {\r\n          object.splice(index, 1);\r\n        }\r\n      });\r\n\r\n      //this.formControl.patchValue(values);\r\n      //this.formControl.markAsTouched();\r\n      this.msg.success(`æä»¶${file.name} å é¤æåï¼`);\r\n    }\r\n  }\r\n\r\n  handleRemove = (file: any) =>\r\n    new Observable<boolean>(observer => {\r\n      observer.next(true);\r\n      observer.complete();\r\n    });\r\n\r\n  beforeUpload = (file: File) => {\r\n    return new Observable((observer: Observer<boolean>) => {\r\n      const isJPG = file.type === \"image/jpeg\";\r\n      console.log(file);\r\n      if (!this.checkFileType(file)) {\r\n        this.msg.error(\"æ¨ä¸ä¼ çæä»¶ç±»åä¸ç¬¦åè¦æ±ï¼\");\r\n        observer.complete();\r\n        return;\r\n      }\r\n      if (!this.checkFileSize(file)) {\r\n        this.msg.error(\"æ¨ä¸ä¼ çæä»¶å¤§å°å·²ç»è¶åºæå¤§è®¾ç½®\");\r\n        observer.complete();\r\n        return;\r\n      }\r\n      observer.next(true);\r\n      observer.complete();\r\n    });\r\n  };\r\n\r\n  checkFileType(file: File) {\r\n    let result: boolean = true;\r\n    if (\r\n      this.field &&\r\n      this.field.templateOptions &&\r\n      this.field.templateOptions.attachment &&\r\n      this.field.templateOptions.attachment.type\r\n    ) {\r\n      let types: any = this.field.templateOptions.attachment.type;\r\n      if (types != undefined && types != null && types != \"\") {\r\n        result = types.split(\",\").some((item: any) => {\r\n          return file.type === item;\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  checkFileSize(file: File) {\r\n    let result: boolean = true;\r\n    if (\r\n      this.field &&\r\n      this.field.templateOptions &&\r\n      this.field.templateOptions.attachment &&\r\n      this.field.templateOptions.attachment.size\r\n    ) {\r\n      let size: any = this.field.templateOptions.attachment.size;\r\n      if (size != undefined && size != null) {\r\n        result = file.size / 1024 / 1024 <= size;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NzModalService, UploadFile } from \"ng-zorro-antd\";\r\n\r\ntype ModalSizeType = \"small\" | \"medium\" | \"large\";\r\nexport interface ModalOptions {\r\n  nzContent: any; //ç»ä»¶\r\n  size: ModalSizeType; //å°/ä¸­/å¤§\r\n  nzTitle?: string; //æ é¢\r\n  primaryLabel?: string; //æé®âlabelâ,ä¸ä¼ é»è®¤ä¸ºâç¡®å®â\r\n  vertical?: boolean; //å¼¹æ¡æ¯å¦ä¸ºåç´å±ä¸­ï¼é»è®¤ä¸åç´å±ä¸­\r\n  hideBtn?: boolean; //æ¯å¦éèfooteræé®\r\n  showResetBtn?: boolean; //æ¯å¦æ¾ç¤ºéç½®æé®\r\n}\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class VXDialogService {\r\n  constructor(public modalService: NzModalService) {}\r\n  switchSize(size: any) {\r\n    const obj = {\r\n      width: 700,\r\n      height: 500\r\n    };\r\n    switch (size) {\r\n      case \"small\":\r\n        obj.width = 530;\r\n        obj.height = 400;\r\n        break;\r\n      case \"medium\":\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n      case \"large\":\r\n        obj.width = 950;\r\n        obj.height = 600;\r\n        break;\r\n      default:\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n    }\r\n    return obj;\r\n  }\r\n  public CreateModelDialog(\r\n    modalOptions: ModalOptions,\r\n    params: any,\r\n    callback: any\r\n  ) {\r\n    const width = this.switchSize(modalOptions.size).width;\r\n    const height = this.switchSize(modalOptions.size).height;\r\n    const modal: any = this.modalService.create({\r\n      nzTitle: modalOptions.nzTitle ? modalOptions.nzTitle : \"æç¤º\",\r\n      nzWidth: width + \"px\",\r\n      nzClosable: true,\r\n      nzMaskClosable: false,\r\n      nzWrapClassName: modalOptions[\"vertical\"] ? \"vertical-center-modal\" : \"\",\r\n      nzBodyStyle: {\r\n        padding: \"0\",\r\n        height: !modalOptions[\"hideBtn\"]\r\n          ? height - 107 + \"px\"\r\n          : height - 54 + \"px\"\r\n      },\r\n      nzContent: modalOptions.nzContent,\r\n      nzFooter: !modalOptions[\"hideBtn\"]\r\n        ? [\r\n            {\r\n              show: true,\r\n              label: \"åæ¶\",\r\n              type: \"default\",\r\n              onClick: componentInstance => {\r\n                modal.destroy();\r\n              }\r\n            },\r\n            {\r\n              show: modalOptions[\"showResetBtn\"],\r\n              label: \"éç½®\",\r\n              type: \"default\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            },\r\n            {\r\n              show: true,\r\n              label: modalOptions[\"primaryLabel\"]\r\n                ? modalOptions[\"primaryLabel\"]\r\n                : \"ç¡®å®\",\r\n              type: \"primary\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            }\r\n          ]\r\n        : null,\r\n      nzOnOk: data => {},\r\n      nzOnCancel: data => {},\r\n      nzComponentParams: params\r\n    });\r\n\r\n    modal.afterClose.subscribe((result: any) => {\r\n      if (result) {\r\n        callback(result);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpResponse\r\n} from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { tap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class _HttpClient {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private _loading = false;\r\n\r\n  get loading(): boolean {\r\n    return this._loading;\r\n  }\r\n\r\n  parseParams(params: any): HttpParams {\r\n    /*const newParams = {};\r\n    Object.keys(params).forEach(key => {\r\n      let _data = params[key];\r\n\r\n      newParams[key] = _data;\r\n    });*/\r\n    if (params === undefined || params === null) {\r\n      params = {};\r\n    }\r\n    return new HttpParams({ fromObject: params });\r\n  }\r\n\r\n  formEncode(obj: any) {\r\n    var encodedString = \"\";\r\n    for (var key in obj) {\r\n      if (encodedString.length !== 0) {\r\n        encodedString += \"&\";\r\n      }\r\n      encodedString += key + \"=\" + encodeURIComponent(obj[key]);\r\n    }\r\n    return encodedString;\r\n  }\r\n\r\n  appliedUrl(url: string, params?: any) {\r\n    if (!params) return url;\r\n    url += ~url.indexOf(\"?\") ? \"\" : \"?\";\r\n    const arr: string[] = [];\r\n    for (const key in params) {\r\n      arr.push(`${key}=${params[key]}`);\r\n    }\r\n    return url + arr.join(\"&\");\r\n  }\r\n\r\n  begin() {\r\n    setTimeout(() => (this._loading = true));\r\n  }\r\n\r\n  end() {\r\n    setTimeout(() => (this._loading = false));\r\n  }\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `T` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<T>>;\r\n */\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * GET è¯·æ±\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"GET\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #region post\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /* post<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * POST è¯·æ±\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"POST\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * DELETE è¯·æ±\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"DELETE\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * `jsonp` è¯·æ±\r\n   *\r\n   * @param url URLå°å\r\n   * @param params è¯·æ±åæ°\r\n   * @param callbackParam CALLBACKå¼ï¼é»è®¤ï¼JSONP_CALLBACK\r\n   */\r\n  jsonp(\r\n    url: string,\r\n    params?: any,\r\n    callbackParam: string = \"JSONP_CALLBACK\"\r\n  ): Observable<any> {\r\n    return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n\r\n  // #region patch\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   patch<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PATCH è¯·æ±\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PATCH\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region put\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   put<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PUT è¯·æ±\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PUT\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request<R>(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<R>;\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    this.begin();\r\n    if (options) {\r\n      if (options.params) options.params = this.parseParams(options.params);\r\n      if (options.body) {\r\n        // options.body = this.formEncode(options.body)\r\n      }\r\n    }\r\n    return this.http.request(method, url, options).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { Observable, of } from \"rxjs\";\r\nimport { _HttpClient } from \"../net/http.client\"\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class DataService {\r\n  constructor(private _http: _HttpClient) { }\r\n\r\n  //æ ¹æ®Id|å¶ä» è·åç¸å³è¡¨ä¿¡æ¯\r\n  getBusinessTables(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  getFormInfo(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-äººå\r\n  getSysCtrEmployee(params = {}): Observable<any> {\r\n    //let url = \"emptable.json\";\r\n    let url = this.getWebAPIName(\"employee\");\r\n    let result = this._http.get(url, params);\r\n    return result;\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-ç»ç»\r\n  getSysCtrOrgTree(params = {}): Observable<any> {\r\n    //let url = \"org-tree.json\";\r\n    let url = this.getWebAPIName(\"organization\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  //ç³»ç»æ§ä»¶-èä½\r\n  getSysCtrPostionTable(params = {}): Observable<any> {\r\n    //let url = \"postiontable.json\";\r\n    let url = this.getWebAPIName(\"postion\");\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-å°åº\r\n  getSysCtrArea(params = {}): Observable<any> {\r\n    let url = \"tables.json\";\r\n\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //æ å½¢æ°æ®\r\n  getTreeData(params = {}): Observable<any> {\r\n    //let url = \"tree.json\";\r\n    let url = this.getWebAPIName(\"tree\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  getWebAPIName(type: string) {\r\n    let result = \"\";\r\n    let res = localStorage.getItem(\"VXFORM:WEBAPI\");\r\n    if (res != undefined && res != null && res != \"\") {\r\n      let webapi = JSON.parse(res);\r\n      result = webapi[type];\r\n    }\r\n    if (result == undefined || result == null) {\r\n      result = \"\";\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-tree\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormTree implements OnInit, OnChanges {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = false;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  treeData: ITreeData[] = [];\r\n  controlid: string = \"\";\r\n  selectData: ICheckedTree[] = [];\r\n\r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() {\r\n    let id = _.get(this.fieldConfig, \"templateOptions.treeid\");\r\n    if (id != undefined && id != null && id != \"\") {\r\n      this.controlid = _.get(this.fieldConfig, \"templateOptions.treeid\");\r\n    }\r\n    this.getTreeData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.defaultNode) {\r\n    }\r\n  }\r\n\r\n  //è·åTreeæ°æ®é\r\n  getTreeData() {\r\n    this.dataService.getTreeData({ id: this.controlid }).subscribe(res => {\r\n      this.treeData = res;\r\n\r\n      this.getSelectData();\r\n    });\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent, NzTreeNodeOptions } from \"ng-zorro-antd/core\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ISelectedNode, IOrgData, ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-employee\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormEmployee implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n\r\n  constructor(public dataService: DataService) { }\r\n\r\n  selectData: ICheckedTree[] = [];\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  tag: boolean = true;\r\n\r\n  //æ¯å¦è¦å¤é\r\n  check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  header: any[] = [\r\n    { \"key\": \"id\", \"name\": \"id\", \"hiden\": true },\r\n    { \"key\": \"code\", \"name\": \"å·¥å·\", \"width\": 150 },\r\n    { \"key\": \"name\", \"name\": \"å§å\", \"width\": 150 },\r\n    { \"key\": \"organization\", \"name\": \"é¨é¨\" }\r\n  ];\r\n\r\n  //table è¡æ°æ®\r\n  body: any[] = [];\r\n\r\n  buttonlist: any[] = [];\r\n\r\n  checkid: any[] = [];\r\n\r\n  query = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord: \"\"\r\n  }\r\n \r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n\r\n    console.log('[]',this.selectData)\r\n    if(this.selectData!=null && this.selectData.length>0){\r\n      this.checkid =this.selectData.map(item=>{\r\n        return {\r\n          \"id\":item.value,\r\n          \"name\":item.label\r\n        }\r\n      });\r\n    }else{\r\n      this.checkid=[];\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    if (this.selectType == \"multiple\") {\r\n      this.check = true;\r\n      this.action = 0;\r\n    }\r\n    if (this.selectType == \"single\") {\r\n      this.check = false;\r\n      this.action = 2;\r\n      this.header.push(\r\n        { \"key\": \"action\", \"name\": \"æä½\", \"hiden\": true, \"action\": true }\r\n      );\r\n    }\r\n    this.getEmployeeData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n\r\n  getEmployeeData() {\r\n    this.dataService.getSysCtrEmployee(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }\r\n    ).subscribe((res: any) => {\r\n      this.query.pageIndex = res.index;\r\n      this.query.total = res.total;\r\n      this.body = res.data;\r\n    });\r\n\r\n    this.getSelectData();\r\n  }\r\n\r\n  pageIndexChange(event: any) {\r\n    this.dataService.getSysCtrEmployee(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }).subscribe((res: any) => {\r\n        this.query.pageIndex = event.pageIndex;\r\n        this.query.total = res.total;\r\n        this.body = res.data;\r\n      });\r\n  }\r\n\r\n  checkChange(list: any[]) {\r\n    if (list != null && list.length > 0) {\r\n      this.selectData = list.map(item => {\r\n        return {\r\n          \"label\": item.name, \"value\": item.id\r\n        }\r\n      });\r\n    } else {\r\n      this.selectData = [];\r\n    } \r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  forwardRef,\r\n  ChangeDetectorRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport {\r\n  ISelectedNode,\r\n  IOrgData,\r\n  ITreeData,\r\n  ICheckedTree\r\n} from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\n@Component({\r\n  selector: \"vxform-org\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormOrg implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = true;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  //ç»ç»æ°æ®\r\n  data: ITreeData[] = [];\r\n  dimension: boolean = true;\r\n  selectData: ICheckedTree[] = [];\r\n  curOrgId: string = \"\";\r\n\r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  orgData: IOrgData[] = [];\r\n  treeData: ITreeData[] = [];\r\n\r\n  controlid: string = \"\";\r\n  treeid: string = \"\";\r\n\r\n\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  selectedKey: any[] = [];\r\n  skeletonStatus: number = 0;\r\n\r\n\r\n  constructor(public dataService: DataService, private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    let orgControl = _.get(this.fieldConfig, \"templateOptions.controlid\");\r\n    if (orgControl != undefined && orgControl != null && orgControl != \"\") {\r\n      this.controlid = _.get(this.fieldConfig, \"templateOptions.controlid\");\r\n    }\r\n    this.getOrgData();\r\n  }\r\n\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n\r\n  //è·åç»ç»æ°æ®é\r\n  getOrgData() {\r\n    this.dataService.getSysCtrOrgTree().subscribe((res: any) => {\r\n      this.data = res;\r\n      if (this.data != null && this.data.length > 0) {\r\n          if(this.data[0].children!=undefined){\r\n          this.curOrgId = this.data[0].key;\r\n          this.treeData = this.data[0].children;\r\n        }\r\n      }\r\n      this.getTreeSelectData();\r\n    });\r\n  }\r\n\r\n  getTreeSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n  }\r\n\r\n  orgChange(event: any) {\r\n    this.data.forEach((item: any) => {\r\n      if (item.key === event) {\r\n        this.treeData = item.children;\r\n      }\r\n    });\r\n    this.selectData.forEach((item: any) => {\r\n      this.setTreeChecked(this.data, item.value);\r\n    });\r\n  }\r\n\r\n  treeChange(event: any) {\r\n    if (this.dimension) {\r\n      this.data.forEach((item: any) => {\r\n        this.setTreeUnChecked(item.children, event.delete);\r\n      });\r\n    }\r\n    this.treeChangeEvent.emit(this.selectData);\r\n  }\r\n\r\n  setTreeUnChecked(tree: ITreeData[], key: string) {\r\n    if (tree && tree.length > 0) {\r\n      tree.forEach((item: any) => {\r\n        if (item.key === key) {\r\n          item.checked = false;\r\n        } else {\r\n          if (item.children && item.children.length > 0) {\r\n            this.setTreeUnChecked(item.children, key);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  setTreeChecked(tree: ITreeData[], key: string) {\r\n    if (tree && tree.length > 0) {\r\n      tree.forEach((item: any) => {\r\n        if (item.key === key) {\r\n          item.checked = true;\r\n        } else {\r\n          if (item.children && item.children.length > 0) {\r\n            this.setTreeChecked(item.children, key);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-postion\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormPostion implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = false;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  treeData: ITreeData[] = [];\r\n\r\n  controlid: string = \"\";\r\n  orgid:string =\"\";\r\n\r\n  selectData: ICheckedTree[] = [];\r\n   \r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n \r\n\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() { \r\n    this.getOrgData(); \r\n    this.action = 2;\r\n    if (this.selectType == \"multiple\") {\r\n      this.check = true;\r\n      this.action = 0;\r\n    }\r\n    if (this.selectType == \"single\") {\r\n      this.check = false;\r\n      this.action = 2;\r\n      this.header.push(\r\n        { \"key\": \"action\", \"name\": \"æä½\", \"hiden\": true, \"action\": true }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.defaultNode) {\r\n    }\r\n  }\r\n\r\n  //è·åOrgæ°æ®é\r\n  getOrgData() {\r\n    this.dataService.getTreeData({ id: this.controlid }).subscribe(res => {\r\n      this.treeData = res;  \r\n      this.getSelectData();\r\n    });\r\n  } \r\n\r\n  ////\r\n  //æ¯å¦è¦å¤é\r\n  check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  header: any[] = [\r\n    { \"key\": \"id\", \"name\": \"id\", \"hiden\": true },\r\n    { \"key\": \"code\", \"name\": \"èä½ç¼ç \", \"width\": 100 },\r\n    { \"key\": \"name\", \"name\": \"èä½åç§°\", \"width\": 150 },\r\n    { \"key\": \"number\", \"name\": \"å¨èäººæ°\", \"width\": 80  },\r\n    { \"key\": \"parent\", \"name\": \"ä¸çº§èä½\" }\r\n  ];\r\n\r\n  //table è¡æ°æ®\r\n  body: any[] = [];\r\n\r\n  buttonlist: any[] = [];\r\n\r\n  checkid: any[] = [];\r\n\r\n  query = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord: \"\"\r\n  }\r\n \r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n \r\n    if(this.selectData!=null && this.selectData.length>0){\r\n      this.checkid =this.selectData.map(item=>{\r\n        return {\r\n          \"id\":item.value,\r\n          \"name\":item.label\r\n        }\r\n      });\r\n    }else{\r\n      this.checkid=[];\r\n    }\r\n  }\r\n\r\n \r\n  getPostionData() {\r\n    this.dataService.getSysCtrPostionTable(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }\r\n    ).subscribe((res: any) => {\r\n      this.query.pageIndex = res.index;\r\n      this.query.total = res.total;\r\n      this.body = res.data;\r\n    });\r\n\r\n    this.getSelectData();\r\n  }\r\n\r\n  pageIndexChange(event: any) {\r\n    this.dataService.getSysCtrPostionTable(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }).subscribe((res: any) => { \r\n        this.query.pageIndex = event.pageIndex;\r\n        this.query.total = res.total;\r\n        this.body = res.data;\r\n      });\r\n  }\r\n\r\n  checkChange(list: any[]) {\r\n    if (list != null && list.length > 0) {\r\n      this.selectData = list.map(item => {\r\n        return {\r\n          \"label\": item.name, \"value\": item.id\r\n        }\r\n      });\r\n    } else {\r\n      this.selectData = [];\r\n    }\r\n  }\r\n\r\n  orgChange(event:any){ \r\n    if(event!=null && event!=undefined && event.checkData!=undefined && event.checkData.length>0){\r\n      this.orgid = event.checkData[0].value;\r\n      this.getPostionData();\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output, ViewChild } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent, NzTreeNodeOptions } from \"ng-zorro-antd/core\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\n@Component({\r\n  selector: \"vxform-area\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormArea implements OnInit {\r\n  @Output() fieldConfig: VXFormFieldConfig = {};\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  nodes = [];\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() {\r\n    this.dataService.getTreeData().subscribe((res: any) => {\r\n      this.nodes = res;\r\n    });\r\n  }\r\n  nzEvent(event: NzFormatEmitEvent): void {}\r\n  submitForm() {}\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { VXDialogService } from \"../service/dialog.service\";\r\n\r\n\r\nimport { VXFormTree } from \"../components/tree/index.component\";\r\nimport { VXFormEmployee } from \"../components/employee/index.component\";\r\nimport { VXFormOrg } from \"../components/org/index.component\";\r\nimport { VXFormPostion } from \"../components/postion/index.component\";\r\nimport { VXFormArea } from \"../components/area/index.component\";\r\n\r\n@Component({\r\n  selector: \"vxfield-lookup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-input-group [nzSuffix]=\"suffixTemplate\">\r\n          <input\r\n            nz-input\r\n            [class.is-invalid]=\"showError\"\r\n            [placeholder]=\"placeHolder\"\r\n            [value]=\"textLookUp\"\r\n            readonly=\"true\"\r\n          />\r\n        </nz-input-group>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n\r\n        <nz-input-group [nzSuffix]=\"suffixTemplate\" style=\"display:none;\">\r\n          <input\r\n            nz-input\r\n            [formControl]=\"formControl\"\r\n            [vxFormAttributes]=\"field\"\r\n            [class.is-invalid]=\"showError\"\r\n            readonly=\"true\"\r\n        /></nz-input-group>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textLookUp }}</div>\r\n    </ng-container>\r\n    <ng-template #suffixTemplate>\r\n      <i (click)=\"lookup()\" class=\"icon-tianjin\"></i>\r\n      <!--<i\r\n        nz-icon\r\n        nzType=\"close\"\r\n        nzTheme=\"outline\"\r\n        (click)=\"removeValue()\"\r\n        *ngIf=\"textLookUp != null && textLookUp != ''\"\r\n      ></i>-->\r\n    </ng-template>\r\n  `\r\n})\r\nexport class VXFormFieldLookUp extends FieldType {\r\n  service: any;\r\n\r\n  constructor(\r\n    dyService: VXFormAntService,\r\n    private modal: NzModalService,\r\n    public vxDialogService: VXDialogService\r\n  ) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  lookup() {\r\n    let template: any;\r\n    let type = _.get(this.field, \"templateOptions.type\");\r\n    let para = {\r\n      fieldConfig: this.field,\r\n      tag: false\r\n    };\r\n    switch (type) {\r\n      case \"tree\":\r\n        template = VXFormTree;\r\n        para.tag = true;\r\n        break;\r\n        break;\r\n      case \"employee\":\r\n        template = VXFormEmployee;\r\n        break;\r\n      case \"organizational\":\r\n        template = VXFormOrg;\r\n        para.tag = true;\r\n        break;\r\n      case \"position\":\r\n        template = VXFormPostion;\r\n        break;\r\n      case \"area\": \r\n        template = VXFormArea;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (template) {\r\n      this.vxDialogService.CreateModelDialog(\r\n        {\r\n          nzTitle: \"éæ© - \"+this.to[\"label\"],\r\n          size: \"large\",\r\n          nzContent: template\r\n        },\r\n        para,\r\n        (instance: any, modal: any) => {\r\n          let res: any = instance.selectedNode;\r\n          if (\r\n            this.model != undefined &&\r\n            this.model != null &&\r\n            this.key != undefined &&\r\n            this.key != null\r\n          ) { \r\n            if (res != null && res.length>0) {\r\n              this.model[this.key] = res;\r\n\r\n              this.formControl.markAsTouched();\r\n            } else {\r\n              this.model[this.key] = [];\r\n\r\n              this.formControl.markAsTouched();\r\n            }\r\n          } else {\r\n            this.model[this.key] = res;\r\n\r\n            this.formControl.markAsTouched();\r\n          }\r\n          modal.destroy();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  removeValue() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model[this.key] != undefined &&\r\n      this.model[this.key] != null\r\n    ) {\r\n      this.model[this.key] = [];\r\n\r\n      this.formControl.markAsTouched();\r\n    }\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-html\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n  <div class=\"fieldOperational\">\r\n    <div class=\"fieldcheckbox\">\r\n      <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n    </div>\r\n    <div class=\"fieldControl\">\r\n      <div class=\"control\">\r\n        {{ to.description }}\r\n      </div>\r\n      <div class=\"fieldButton\">\r\n        <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n          <i class=\"icon-Edit03\"></i>ç¼è¾\r\n        </button>\r\n        <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n           <i class=\"icon-KT-Close\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"formStatus === 0\">\r\n  <div class=\"fieldcontrol\">{{ to.description }}</div>\r\n</ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldHTML extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, FieldArrayType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-line\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"control\">\r\n            <hr />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n               <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div class=\"fieldContent\">\r\n        <div class=\"fieldcontrol\">\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldLine extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldWrapper } from \"@vx-form/core\";\r\n\r\n@Component({\r\n  selector: \"vxfield-wrapper\",\r\n  template: `\r\n    <ng-container\r\n      *ngIf=\"formStatus !== 0 || field.type == 'line' || field.type == 'html'\"\r\n    >\r\n      <ng-template #fieldComponent></ng-template>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngIf=\"formStatus === 0 && field.type != 'line' && field.type != 'html'\"\r\n    >\r\n      <div class=\"fieldlabel\">\r\n        <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n      </div>\r\n      <div class=\"fieldcontrol\" [class.has-error]=\"showError\">\r\n        <ng-template #fieldComponent></ng-template>\r\n        <div class=\"invalid-feedback\" [style.display]=\"'block'\">\r\n          <vxform-validation-message\r\n            *ngIf=\"showError\"\r\n            style=\"color:red\"\r\n            [field]=\"field\"\r\n          ></vxform-validation-message>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormWrapperFormField extends FieldWrapper {}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"group\",\r\n  template: `\r\n    <vxform-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></vxform-field>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldGroup extends FieldType {}\r\n","import { Component, AfterViewChecked, AfterViewInit } from \"@angular/core\";\r\nimport { FieldArrayType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxform-repeat\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <!--\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        -->\r\n        <div class=\"reportControl\">\r\n          <div class=\"report-header\">\r\n            <div class=\"left\">\r\n              <ul>\r\n                <li><label nz-checkbox [(ngModel)]=\"field.checked\"></label></li>\r\n                <li (click)=\"groupOperational('item')\">\r\n                  <i class=\"icon-TianJiaZiDuan\"></i>æ·»å å­æ®µ\r\n                </li>\r\n                <li (click)=\"groupOperational('remark')\">\r\n                  <i class=\"icon-other-WenBen\"></i>æ·»å ææ¬\r\n                </li>\r\n                <li (click)=\"groupOperational('line')\">\r\n                  <i class=\"icon-FenGeXian\"></i>æ·»å åå²çº¿\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"right\">\r\n              <ul>\r\n                <li (click)=\"groupOperational('delete')\">\r\n                  <i class=\"icon-N_delete2\"></i>å é¤\r\n                </li>\r\n                <li (click)=\"groupOperational('up')\">\r\n                  <i class=\"icon-ShangYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"groupOperational('down')\">\r\n                  <i class=\"icon-XiaYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"fieldOperational('delete')\">\r\n                  <button class=\"btnDel\">\r\n                    <i class=\"icon-KT-Close\"></i>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"report-body\">\r\n            <ng-container *ngFor=\"let field of field.fieldGroup; let i = index\">\r\n              <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div *ngFor=\"let field of field.fieldGroup; let i = index\" class=\"row\">\r\n        <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n\r\n        <span (click)=\"delete(i)\" class=\"del\">å é¤</span>\r\n\r\n        <div class=\"tips\"></div>\r\n      </div>\r\n      <div class=\"add\">\r\n        <span (click)=\"add()\">æ°å¢</span>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldRepeat extends FieldArrayType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  groupOperational(type: string) {\r\n    this.service.groupOperational(type, this.field);\r\n  }\r\n\r\n  delete(i: any) {\r\n    if (this.field.fieldGroup && this.field.fieldGroup.length > 1) {\r\n      this.remove(i);\r\n    } else {\r\n    }\r\n  }\r\n}\r\n","import { ConfigOption } from \"@vx-form/core\";\r\nimport { \r\n  VXFormFieldText,\r\n  VXFormFieldTextI18n,\r\n  VXFormFieldTextArea,\r\n  VXFormFieldNumber,\r\n  VXFormFieldPassWord,\r\n  VXFormFieldRadio,\r\n  VXFormFieldRadioGroup,\r\n  VXFormFieldCheckbox,\r\n  VXFormFieldCheckboxGroup,\r\n  VXFormFieldSelect,\r\n  VXFormFieldDateTime,\r\n  VXFormFieldImage,\r\n  VXFormFieldUpload,\r\n  VXFormFieldLookUp,\r\n  VXFormFieldHTML,\r\n  VXFormFieldLine\r\n\r\n} from \"./types/types\";\r\nimport { VXFormWrapperFormField } from \"./wrappers/wrappers\";\r\nimport { VXFormFieldGroup } from \"./templates/group\";\r\nimport { VXFormFieldRepeat } from \"./templates/repeat\";\r\n\r\nexport const FIELD_TYPE_COMPONENTS = [\r\n  // types\r\n  VXFormFieldText,\r\n  VXFormFieldTextI18n,\r\n  VXFormFieldTextArea,\r\n  VXFormFieldNumber,\r\n  VXFormFieldPassWord,\r\n  VXFormFieldRadio,\r\n  VXFormFieldRadioGroup,\r\n  VXFormFieldCheckbox,\r\n  VXFormFieldCheckboxGroup,\r\n  VXFormFieldSelect,\r\n  VXFormFieldDateTime,\r\n  VXFormFieldImage,\r\n  VXFormFieldUpload,\r\n  VXFormFieldLookUp,\r\n  VXFormFieldHTML,\r\n  VXFormFieldLine,\r\n\r\n  //templates\r\n  VXFormFieldGroup,\r\n  VXFormFieldRepeat,\r\n\r\n  // wrappers\r\n  VXFormWrapperFormField\r\n];\r\n\r\nexport const BOOTSTRAP_VXFORM_CONFIG: ConfigOption = {\r\n  types: [\r\n    {\r\n      name: \"text\",\r\n      component: VXFormFieldText,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"texti18n\",\r\n      component: VXFormFieldTextI18n,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"textarea\",\r\n      component: VXFormFieldTextArea,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"number\",\r\n      component: VXFormFieldNumber,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"password\",\r\n      component: VXFormFieldPassWord,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"radio\",\r\n      component: VXFormFieldRadio,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"radiogroup\",\r\n      component: VXFormFieldRadioGroup,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"checkbox\",\r\n      component: VXFormFieldCheckbox,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"checkboxgroup\",\r\n      component: VXFormFieldCheckboxGroup,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"select\",\r\n      component: VXFormFieldSelect,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"datetime\",\r\n      component: VXFormFieldDateTime,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"image\",\r\n      component: VXFormFieldImage,\r\n      wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"upload\",\r\n      component: VXFormFieldUpload,\r\n      wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"lookup\",\r\n      component: VXFormFieldLookUp,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"html\",\r\n      component: VXFormFieldHTML,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"line\",\r\n      component: VXFormFieldLine,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    { name: \"group\", component: VXFormFieldGroup },\r\n    { name: \"repeat\", component: VXFormFieldRepeat }\r\n  ],\r\n  wrappers: [{ name: \"form-field\", component: VXFormWrapperFormField }]\r\n};\r\n","import { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nexport function getFieldPro(field: VXFormFieldConfig, key: string) {\r\n  return _.get(field, \"templateOptions.\" + key + \"\");\r\n}\r\nexport function requiredValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}ä¸è½ä¸ºç©º`;\r\n}\r\nexport function minlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"minLength\"\r\n  )}`;\r\n}\r\nexport function maxlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"maxLength\"\r\n  )}`;\r\n}\r\nexport function minValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°å¼ä¸º${getFieldPro(field, \"min\")}`;\r\n}\r\nexport function maxValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§å¼ä¸º${getFieldPro(field, \"max\")}`;\r\n}\r\n\r\nexport let validationConfig = {\r\n  validationMessages: [\r\n    { name: \"required\", message: requiredValidationMessage },\r\n    { name: \"null\", message: \"ä¸è½ä¸ºNULL\" },\r\n    { name: \"minlength\", message: minlengthValidationMessage },\r\n    { name: \"maxlength\", message: maxlengthValidationMessage },\r\n    { name: \"min\", message: minValidationMessage },\r\n    { name: \"max\", message: maxValidationMessage },\r\n    { name: \"multipleOf\", message: \"ssss\" },\r\n    { name: \"exclusiveMinimum\", message: \"ssss\" },\r\n    { name: \"exclusiveMaximum\", message: \"ssss\" },\r\n    { name: \"minItems\", message: \"ssss\" },\r\n    { name: \"maxItems\", message: \"ssss\" },\r\n    { name: \"uniqueItems\", message: \"should NOT have duplicate items\" },\r\n    { name: \"const\", message: \"ssss\" },\r\n    { name: \"pattern\", message: \"ä¸æ»¡è¶³è¿åè¡¨è¾¾å¼\" }\r\n  ],\r\n  types: [\r\n    // { name: \"string\", extends: \"input\" },\r\n    // {\r\n    //   name: \"number\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // {\r\n    //   name: \"integer\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // { name: \"boolean\", extends: \"checkbox\" },\r\n    // { name: \"enum\", extends: \"select\" },\r\n     { name: \"array\", extends: \"array\" },\r\n     { name: \"object\", extends: \"object\" }\r\n  ]\r\n};\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXToFormFieldService {\r\n  constructor() { }\r\n\r\n  getVXFiledFunction(tableField: VXTableFieldConfig) {\r\n    let field: VXFormFieldConfig = {};\r\n    let fun: any;\r\n    switch (tableField.datatype) {\r\n      case \"text\":\r\n        field = this.text(tableField); \r\n        break;\r\n      case \"texti18n\":\r\n        field = this.textI18N(tableField);\r\n        break;\r\n      case \"textarea\":\r\n        field = this.textArea(tableField);\r\n        break;\r\n      case \"number\":\r\n        field = this.number(tableField);\r\n        break;\r\n      case \"password\":\r\n        field = this.passWord(tableField);\r\n        break;\r\n      case \"radio\":\r\n        field = this.radio(tableField);\r\n        break;\r\n      case \"checkbox\":\r\n        field = this.checkbox(tableField);\r\n        break;\r\n      case \"select\":\r\n        field = this.select(tableField);\r\n        break;\r\n      case \"datetime\":\r\n        field = this.datetime(tableField);\r\n        break;\r\n      case \"image\":\r\n        field = this.image(tableField);\r\n        break;\r\n      case \"upload\":\r\n        field = this.upload(tableField);\r\n        break;\r\n      case \"lookup\":\r\n        field = this.lookup(tableField);\r\n        break;\r\n      case \"html\":\r\n        field = this.html(tableField);\r\n        break;\r\n\r\n    }\r\n    /*if (tableField.refdatasourcetype === \"directinput\") {\r\n      fun = tableField.refdatasourcetype + \"_\" + tableField.datatype;\r\n      switch (fun) {\r\n        case \"directinput_nvarchar\":\r\n          field = this.directinput_nvarchar(tableField);\r\n          break;\r\n        case \"directinput_multilinetext\":\r\n          field = this.directinput_multilinetext(tableField);\r\n          break;\r\n        case \"directinput_int\":\r\n          field = this.directinput_int(tableField);\r\n          break;\r\n        case \"directinput_float\":\r\n          field = this.directinput_float(tableField);\r\n          break;\r\n        case \"directinput_datetime\":\r\n          field = this.directinput_datetime(tableField);\r\n          break;\r\n        case \"directinput_date\":\r\n          field = this.directinput_date(tableField);\r\n          break;\r\n        case \"directinput_month\":\r\n          field = this.directinput_month(tableField);\r\n          break;\r\n        case \"directinput_year\":\r\n          field = this.directinput_year(tableField);\r\n          break;\r\n        case \"directinput_time\":\r\n          field = this.directinput_time(tableField);\r\n          break;\r\n        case \"directinput_attachment\":\r\n          field = this.directinput_attachment(tableField);\r\n          break;\r\n        case \"directinput_image\":\r\n          field = this.directinput_image(tableField);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      fun = tableField.refdatasourcetype;\r\n      switch (fun) {\r\n        case \"refparameters\":\r\n          field = this.refparameters(tableField);\r\n          break;\r\n        case \"treeparameters\":\r\n          field = this.treeparameters(tableField);\r\n          break;\r\n        case \"systemcontrol\":\r\n          field = this.systemcontrol(tableField);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    */\r\n    return field;\r\n  }\r\n\r\n  //1ãå­ç¬¦ä¸²\r\n  text(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"text\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n        refdatasourcetype: \"directinput\",\r\n        datatype: \"nvarchar\"\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //2ãå¤è¯­è¨\r\n  textI18N(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"text\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //3ãå¤è¡ææ¬\r\n  textArea(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"textarea\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //4ãæ°å­\r\n  number(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"number\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        max: field.max,\r\n        min: field.min,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern,\r\n        precision: field.precision\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //5ãå¯ç \r\n  passWord(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"password\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //6ãåé\r\n  radio(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"radio\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //7ãå¤é\r\n  checkbox(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"checkbox\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //8ãä¸æ\r\n  select(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"select\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        selecttype: field.selecttype,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //9ãæ¥æ\r\n  datetime(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"datetime\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: \"datetime\",\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern,\r\n        format: field.format\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //10ãå¾ç\r\n  image(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"image\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //11ãéä»¶\r\n  upload(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"upload\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        attachment: {\r\n          size: field.attachmentsize,\r\n          type: field.attachmenttype,\r\n          limit: field.attachmentlimit\r\n        },\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n\r\n    return config;\r\n  }\r\n\r\n  //12ãå¼¹æ¡\r\n  lookup(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"lookup\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      defaultText: field.defaulttext,\r\n      templateOptions: {\r\n        type: field.controlid,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        controlid: field.controlid,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //13ãhtml\r\n  html(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"html\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultText: field.defaulttext,\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  // //ç´æ¥è¾å¥-1ãå­ç¬¦\r\n  // directinput_nvarchar(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"input\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"nvarchar\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       maxLength: field.maxlength,\r\n  //       minLength: field.minlength,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-2ãå¤è¡ææ¬\r\n  // directinput_multilinetext(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"textarea\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"multilinetext\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       maxLength: field.maxlength,\r\n  //       minLength: field.minlength,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-3ãæ´æ°\r\n  // directinput_int(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"inputnumber\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"int\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       max: field.max,\r\n  //       min: field.min,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-4ãæµ®ç¹\r\n  // directinput_float(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"inputnumber\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"float\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       max: field.max,\r\n  //       min: field.min,\r\n  //       precision: field.precision,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-5ãæ¥æï¼å¹´ææ¥æ¶åï¼\r\n  // directinput_datetime(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"datetime\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"datetime\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-6ãæ¥æï¼å¹´ææ¥ï¼\r\n  // directinput_date(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"date\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"date\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-7ãæ¥æï¼å¹´æï¼\r\n  // directinput_month(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"month\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"month\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-8ãæ¥æï¼å¹´ï¼\r\n  // directinput_year(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"year\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"year\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-9ãæ¥æï¼æ¶åç§ï¼\r\n  // directinput_time(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"time\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"time\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-10ãéä»¶\r\n  // directinput_attachment(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"upload\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"attachment\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       attachment: {\r\n  //         size: field.attachmentsize,\r\n  //         type: field.attachmenttype,\r\n  //         limit: field.attachmentlimit\r\n  //       },\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-11ãå¾ç\r\n  // directinput_image(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"image\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"image\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //å¸¸ç¨åæ°\r\n  // refparameters(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"select\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"refparameters\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: field.showtype,\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       selecttype: field.selecttype,\r\n  //       parameterid: field.parameterid,\r\n  //       options: field.parameterdata,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //æ å½¢åæ°\r\n  // treeparameters(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"lookup\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"treeparameters\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     defaultText: field.defaulttext,\r\n  //     templateOptions: {\r\n  //       type: \"tree\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       selecttype: field.selecttype,\r\n  //       treeid: field.treeid,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç³»ç»æ§ä»¶\r\n  // systemcontrol(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"lookup\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"systemcontrol\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     defaultText: field.defaulttext,\r\n  //     templateOptions: {\r\n  //       type: field.controlid,\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       controlid: field.controlid,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n}\r\n","import { Injectable, EventEmitter, Inject, forwardRef } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, clone } from \"@vx-form/core\";\r\nimport { VXTableBusiness } from \"./util\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\nimport { min } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class VXAntCommonService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  private findFieldConfig: any = {};\r\n  //æ ¹æ®Guidè·åField\r\n  getFormFieldByGuid(formFieldConfig: VXFormFieldConfig[], guid: string) {\r\n    if (formFieldConfig.length) {\r\n      formFieldConfig.forEach((item, index, object) => {\r\n        if (item.guid === guid) {\r\n          this.findFieldConfig = item;\r\n        }\r\n        if (item.type === \"repeat\") {\r\n          if (\r\n            item.fieldArray &&\r\n            item.fieldArray &&\r\n            item.fieldArray.fieldGroup &&\r\n            item.fieldArray.fieldGroup.length > 0\r\n          ) {\r\n            this.getFormFieldByGuid(item.fieldArray.fieldGroup, guid);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return this.findFieldConfig;\r\n  }\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  VXTableFieldConfig,\r\n  VXFormFieldConfig,\r\n  Guid,\r\n  clone\r\n} from \"@vx-form/core\";\r\nimport { FormLayout, ICheckedField, IBusinessTable } from \"./util\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Injectable()\r\nexport class VXTransferService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  transferLineToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[]\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldLineInfo();\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferLabelToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[]\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldRemarkInfo();\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferGroupToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[],\r\n    tableCode: string\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldGroupInfo();\r\n    obj.tablecode = tableCode;\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferSelectFieldToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[],\r\n    businessTable: IBusinessTable,\r\n    obj: any\r\n  ) {\r\n    let selectFields: any = [];\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    let addFields: VXFormFieldConfig[] = [];\r\n    let beginIndex: number = 0;\r\n    Object.getOwnPropertyNames(obj).forEach(item => {\r\n      if (obj[item]) {\r\n        selectFields.push(item);\r\n      }\r\n    });\r\n    if (!selectFields || selectFields.length < 1) return; \r\n    tableFields = this.getTableFiledList(businessTable);\r\n\r\n    if (!tableFields || tableFields.length < 1) return;\r\n\r\n    if (form_fields && form_fields.length > 0) {\r\n      beginIndex = form_fields.length;\r\n    }\r\n\r\n    selectFields.forEach((key: any) => {\r\n      let tableField: VXTableFieldConfig = this.getTableFiledInfo(\r\n        key,\r\n        tableFields\r\n      );\r\n      if (tableField != null) {\r\n        let formField: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n          tableField\r\n        );\r\n        if (formField && formField != null) {\r\n          addFields.push(formField);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      beginIndex = checkedField.index + 1;\r\n    }\r\n    addFields.forEach((item: any, index: any, object: any) => {\r\n      form_fields.splice(beginIndex + index, 0, item);\r\n    });\r\n  }\r\n\r\n  groupFieldMoveUpOrDown(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig,\r\n    type: string\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (checkedFields) {\r\n      if (type === \"up\") {\r\n        checkedFields.forEach((item: any) => {\r\n          if (item.index > 0) {\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(item.index, 1);\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n              item.index - 1,\r\n              0,\r\n              item.field\r\n            );\r\n          }\r\n        });\r\n      } else if (type === \"down\") {\r\n        checkedFields.reverse().forEach((item: any) => {\r\n          if (\r\n            item.index <\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").length - 1\r\n          ) {\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(item.index, 1);\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n              item.index + 1,\r\n              0,\r\n              item.field\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferLineToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let obj = this.getFieldLineInfo();\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (!cloneField) return null;\r\n    if (\r\n      !cloneField.fieldArray ||\r\n      !cloneField.fieldArray.fieldGroup ||\r\n      cloneField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      _.get(checkedField, \"checked\", true);\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n        checkedField.index + 1,\r\n        0,\r\n        obj\r\n      );\r\n    } else {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").push(obj);\r\n    }\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferRemarkToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let obj = this.getFieldRemarkInfo();\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (!cloneField) return null;\r\n    if (\r\n      !cloneField.fieldArray ||\r\n      !cloneField.fieldArray.fieldGroup ||\r\n      cloneField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      _.get(checkedField, \"checked\", true);\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n        checkedField.index + 1,\r\n        0,\r\n        obj\r\n      );\r\n    } else {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").push(obj);\r\n    }\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferSelectFieldToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    groupField: VXFormFieldConfig,\r\n    checkedFields: ICheckedField[],\r\n    businessTable: IBusinessTable,\r\n    obj: any\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneGroupField: VXFormFieldConfig = clone(groupField);\r\n    let selectFields: any = [];\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    let addFields: VXFormFieldConfig[] = [];\r\n    let beginIndex: number = 0;\r\n    Object.getOwnPropertyNames(obj).forEach((item: any) => {\r\n      if (obj[item]) {\r\n        selectFields.push(item);\r\n      }\r\n    });\r\n    if (!selectFields || selectFields.length < 1) return;\r\n\r\n    tableFields = this.getTableFiledList(businessTable);\r\n\r\n    if (!tableFields || tableFields.length < 1) return;\r\n\r\n    if (cloneFields && cloneFields.length > 0) {\r\n      beginIndex = cloneFields.length - 1;\r\n    }\r\n    if (\r\n      !cloneGroupField.fieldArray ||\r\n      !cloneGroupField.fieldArray.fieldGroup ||\r\n      cloneGroupField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n\r\n    selectFields.forEach((key: any) => {\r\n      let tableField: VXTableFieldConfig = this.getTableFiledInfo(\r\n        key,\r\n        tableFields\r\n      );\r\n      if (tableField != null) {\r\n        let formField: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n          tableField\r\n        );\r\n        if (formField && formField != null) {\r\n          addFields.push(formField);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      beginIndex = checkedField.index + 1;\r\n    }\r\n\r\n    addFields.forEach((item: any, index: any, object: any) => {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\").splice(\r\n        beginIndex + index,\r\n        0,\r\n        item\r\n      );\r\n    });\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneGroupField.guid) {\r\n        item.fieldArray = cloneGroupField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferDeleteForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    groupField: VXFormFieldConfig\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneGroupField: VXFormFieldConfig = clone(groupField);\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(\r\n      cloneGroupField\r\n    );\r\n    if (!checkedFields || checkedFields == null || checkedFields.length < 1) {\r\n      return;\r\n    }\r\n    if (\r\n      !cloneGroupField.fieldArray ||\r\n      !cloneGroupField.fieldArray.fieldGroup ||\r\n      cloneGroupField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    checkedFields.forEach((item: any) => {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\").forEach(\r\n        (field: any, index: any, object: any) => {\r\n          if (\r\n            field.key === item.field.key &&\r\n            field.templateOptions.isbutintin != true\r\n          ) {\r\n            object.splice(index, 1);\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneGroupField.guid) {\r\n        item.fieldArray = cloneGroupField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  editFormFieldInfo(\r\n    form_fields: VXFormFieldConfig[],\r\n    new_field: VXFormFieldConfig\r\n  ) {\r\n    if (!form_fields) return;\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let groupKey: string = \"\";\r\n    cloneFields.forEach((field: any, index: any, object: any) => {\r\n     if (field.type === \"repeat\") {\r\n        if (\r\n          field.fieldArray &&\r\n          field.fieldArray.fieldGroup &&\r\n          field.fieldArray.fieldGroup.length > 0\r\n        ) {\r\n          _.get(field, \"fieldArray.fieldGroup\").forEach(\r\n            (groupField: any, groupIndex: any, groupObject: any) => {\r\n              if (groupField.key === new_field.key) {\r\n                groupKey = field.key;\r\n                groupObject.splice(groupIndex, 1);\r\n                groupObject.splice(groupIndex, 0, new_field);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      } else {\r\n        if (field.key === new_field.key) {\r\n          object.splice(index, 1);\r\n          object.splice(index, 0, new_field);\r\n        }\r\n      }\r\n    });\r\n    if (groupKey != null && groupKey != \"\") {\r\n      cloneFields.forEach((item: any, index: any, object: any) => {\r\n        if (item.hasOwnProperty(\"fieldGroup\")) {\r\n          delete item.fieldGroup;\r\n        }\r\n      });\r\n    }\r\n    return {\r\n      groupKey: groupKey,\r\n      formFileds: cloneFields\r\n    };\r\n  }\r\n\r\n  deleteFormFieldInfo(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n    let groupKey: any;\r\n\r\n    if (\r\n      cloneFields != undefined &&\r\n      cloneFields != null &&\r\n      cloneField != undefined &&\r\n      cloneField != null &&\r\n      cloneFields.length > 0\r\n    ) {\r\n      if (cloneField.key != undefined && cloneField.key != null) {\r\n        cloneFields.forEach((item: any, index: any, object: any) => {\r\n          if (item.key === cloneField.key) {\r\n            object.splice(index, 1);\r\n          }\r\n          if (\r\n            item.fieldArray != undefined &&\r\n            item.fieldArray != null &&\r\n            item.fieldArray.fieldGroup != undefined &&\r\n            item.fieldArray.fieldGroup != null\r\n          ) {\r\n            let res = this.deleteGroupFormFieldInfo(item, field);\r\n            if (res != null && res != \"\") {\r\n              groupKey = res;\r\n              if (item.hasOwnProperty(\"fieldGroup\")) {\r\n                delete item.fieldGroup;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      groupKey: groupKey,\r\n      formFileds: cloneFields\r\n    };\r\n  }\r\n\r\n  private deleteGroupFormFieldInfo(\r\n    fields: VXFormFieldConfig,\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    let form_fields: VXFormFieldConfig[] = [];\r\n    let groupKey: string = \"\";\r\n    if (\r\n      fields.fieldArray != undefined &&\r\n      fields.fieldArray != null &&\r\n      fields.fieldArray.fieldGroup != undefined &&\r\n      fields.fieldArray.fieldGroup != null\r\n    ) {\r\n      form_fields = fields.fieldArray.fieldGroup;\r\n\r\n      if (\r\n        form_fields != undefined &&\r\n        form_fields != null &&\r\n        field != undefined &&\r\n        field != null &&\r\n        form_fields.length > 0\r\n      ) {\r\n        if (field.key != undefined && field.key != null) {\r\n          form_fields.forEach((item: any, index: any, object: any) => {\r\n            if (item.key === field.key) {\r\n              if (fields.key != undefined && fields.key != null) {\r\n                groupKey = fields.key;\r\n                object.splice(index, 1);\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return groupKey;\r\n  }\r\n\r\n  private getFieldLineInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"line\",\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  private getFieldRemarkInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"html\",\r\n      templateOptions: {\r\n        description: \"çæ®µææ¬æè¿°\"\r\n      },\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  private getFieldGroupInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"repeat\",\r\n      fieldArray: {\r\n        fieldGroup: []\r\n      },\r\n      tablecode: \"\",\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  //æ¸ç©ºéä¸­\r\n  private clearGroupChecked(field: VXFormFieldConfig) {\r\n    if (\r\n      !field ||\r\n      !field.fieldArray ||\r\n      !field.fieldArray.fieldGroup ||\r\n      !field.fieldGroup\r\n    )\r\n      return;\r\n    field.fieldArray.fieldGroup.forEach((item: any, index: any) => {\r\n      item.checked = false;\r\n    });\r\n  }\r\n\r\n  //è·åéä¸­\r\n  private getGroupCheckFields(field: VXFormFieldConfig) {\r\n    let checkedField: ICheckedField[] = [];\r\n    if (\r\n      !field ||\r\n      !field.fieldArray ||\r\n      !field.fieldArray.fieldGroup ||\r\n      !field.fieldGroup ||\r\n      field.fieldGroup.length < 1\r\n    ) {\r\n      return checkedField;\r\n    }\r\n    _.get(field, \"fieldGroup[0].fieldGroup\").forEach(\r\n      (item: any, index: any) => {\r\n        if (item.checked) {\r\n          checkedField.push({ index: index, field: item });\r\n          _.get(field, \"fieldArray.fieldGroup\")[index].checked = true;\r\n        }\r\n      }\r\n    );\r\n    return checkedField;\r\n  }\r\n\r\n  private getTableFiledList(businessTable: IBusinessTable) {\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    if (businessTable) {\r\n      if (\r\n        businessTable.primary &&\r\n        businessTable.primary != null &&\r\n        businessTable.primary.tablefields &&\r\n        businessTable.primary.tablefields != null &&\r\n        businessTable.primary.tablefields.length > 0\r\n      ) {\r\n        if (businessTable.primary.tablefields) {\r\n          tableFields = tableFields.concat(businessTable.primary.tablefields);\r\n        }\r\n      }\r\n      if (businessTable.child && businessTable.child != null) {\r\n        if (\r\n          businessTable.child.single &&\r\n          businessTable.child.single != null &&\r\n          businessTable.child.single.length > 0\r\n        ) {\r\n          businessTable.child.single.forEach((item: any) => {\r\n            if (item.tablefields) {\r\n              tableFields = tableFields.concat(item.tablefields);\r\n            }\r\n          });\r\n        }\r\n        if (\r\n          businessTable.child.multiple &&\r\n          businessTable.child.multiple != null &&\r\n          businessTable.child.multiple.length > 0\r\n        ) {\r\n          businessTable.child.multiple.forEach((item: any) => {\r\n            if (item.tablefields) {\r\n              tableFields = tableFields.concat(item.tablefields);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return tableFields;\r\n  }\r\n\r\n  private getTableFiledInfo(key: string, tableFields: VXTableFieldConfig[]) {\r\n    let resValue: VXTableFieldConfig = {};\r\n    if (key && tableFields && tableFields.length > 0) {\r\n      let filterFiled = tableFields.filter((item: any) => {\r\n        return item[\"fieldcode\"] === key;\r\n      });\r\n      if (filterFiled && filterFiled.length > 0) {\r\n        return filterFiled[0];\r\n      }\r\n      return resValue;\r\n    }\r\n    return resValue;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, Inject } from \"@angular/core\";\r\nimport {\r\n  VXTableFieldConfig,\r\n  VXFormFieldConfig,\r\n  VXTableConfig,\r\n  clone\r\n} from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"./util\";\r\nimport * as _ from \"lodash\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\n\r\n@Injectable()\r\nexport class VXDesginToFormService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  initTableStatus(tables: IBusinessTable, fields: VXFormFieldConfig[]) {\r\n    this.initTableFields(tables);\r\n    if (fields && fields != null && fields.length > 0) {\r\n      fields.forEach((field: any, index: any, object: any) => {\r\n        this.setTableStatus(tables, field);\r\n      });\r\n    }\r\n  }\r\n\r\n  initFormFieldByTables(tables: IBusinessTable, fields: VXFormFieldConfig[]) {\r\n    if (\r\n      tables != undefined &&\r\n      tables != null &&\r\n      tables.primary != undefined &&\r\n      tables.primary != null &&\r\n      tables.primary.tablefields != undefined &&\r\n      tables.primary.tablefields != null\r\n    ) {\r\n      let tableFileds: VXTableFieldConfig[] = tables.primary.tablefields.filter(\r\n        (item: any) => {\r\n          return item.isbutintin === true;\r\n        }\r\n      );\r\n      if (tableFileds != null) {\r\n        tableFileds.forEach((item: any) => {\r\n          if (!this.checkVXFormFieldConfig(item.fieldcode, fields)) {\r\n            this.addVXFormFieldConfig(item, fields);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private initTableFields(tables: IBusinessTable) {\r\n    if (!tables) {\r\n      return;\r\n    }\r\n\r\n    if (tables.primary) {\r\n      tables.primary.tablequote = false;\r\n      if (tables.primary.tablefields) {\r\n        tables.primary.tablefields.forEach((field: any) => {\r\n          field.fieldquote = false;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (tables.child) {\r\n      if (tables.child.single) {\r\n        tables.child.single.forEach((table: any) => {\r\n          table.tablequote = false;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((field: any) => {\r\n              field.fieldquote = false;\r\n            });\r\n          }\r\n        });\r\n      }\r\n      if (tables.child.multiple) {\r\n        tables.child.multiple.forEach((table: any) => {\r\n          table.tablequote = false;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((field: any) => {\r\n              field.fieldquote = false;\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTableStatus(tables: IBusinessTable, field: VXFormFieldConfig) {\r\n    if (tables) {\r\n      if (tables.primary) {\r\n        this.setTablePrimary(tables.primary, field);\r\n      }\r\n\r\n      if (tables.child) {\r\n        if (tables.child.single) {\r\n          this.setTableSingle(tables.child.single, field);\r\n        }\r\n        if (tables.child.multiple) {\r\n          this.setTableMultiple(tables.child.multiple, field);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTablePrimary(table: VXTableConfig, field: VXFormFieldConfig) {\r\n    if (field.tablecode === table.tablecode) {\r\n      table.tablequote = true;\r\n      if (table.tablefields) {\r\n        table.tablefields.forEach((item: any) => {\r\n          if (item.fieldcode === field.key) {\r\n            item.fieldquote = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTableSingle(tables: VXTableConfig[], field: VXFormFieldConfig) {\r\n    if (tables && tables != null && tables.length > 0) {\r\n      tables.forEach(table => {\r\n        if (table.tablecode === field.tablecode) {\r\n          table.tablequote = true;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((item: any) => {\r\n              if (item.fieldcode === field.key) {\r\n                item.fieldquote = true;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private setTableMultiple(\r\n    tables: VXTableConfig[],\r\n    groupField: VXFormFieldConfig\r\n  ) {\r\n    if (tables && tables != null && tables.length > 0) {\r\n      tables.forEach(table => {\r\n        if (table.tablecode === groupField.tablecode) {\r\n          table.tablequote = true;\r\n          if (\r\n            groupField.fieldArray &&\r\n            groupField.fieldArray.fieldGroup &&\r\n            groupField.fieldArray.fieldGroup.length > 0\r\n          ) {\r\n            if (table.tablefields) {\r\n              table.tablefields.forEach((item: any) => {\r\n                _.get(groupField, \"fieldArray.fieldGroup\").forEach(\r\n                  (field: any) => {\r\n                    if (item.fieldcode === field.key) {\r\n                      item.fieldquote = true;\r\n                    }\r\n                  }\r\n                );\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private checkVXFormFieldConfig(code: string, fields: VXFormFieldConfig[]) {\r\n    let result = false;\r\n    if (fields != undefined && fields != null && fields != []) {\r\n      result = fields.some((item: any) => {\r\n        return item.key === code;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private addVXFormFieldConfig(\r\n    tableField: VXTableFieldConfig,\r\n    fields: VXFormFieldConfig[]\r\n  ) {\r\n    let field: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n      tableField\r\n    );\r\n    if (fields == undefined || fields == null) {\r\n      fields = [];\r\n    }\r\n    fields.push(field);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { FieldWrapper, VXFormFieldConfig, clone } from \"@vx-form/core\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-field\",\r\n  templateUrl: \"./field.component.html\",\r\n  styleUrls: [\"./field.component.less\"]\r\n})\r\nexport class VXFormDesignField implements OnInit, OnChanges {\r\n  formField: any = {\r\n    key: \"\",\r\n    type:\"text\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\",\r\n      parameterid: \"\",\r\n      treeid: \"\",\r\n      controlid: \"\",\r\n      maxLength: 50,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\"\r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  };\r\n  lang: any[] = [\r\n    { languagetype: \"chinese\", resvalue: \"chinesechinese\" },\r\n    { languagetype: \"english\", resvalue: \"englishenglish\" },\r\n    { languagetype: \"english2\", resvalue: \"english2\" }\r\n  ];\r\n  @Input() set field(value: VXFormFieldConfig) { \r\n    this.formField = { ...this.formField, ...value }; \r\n  }\r\n\r\n  constructor(\r\n    public message: NzMessageService) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  checkSave(){\r\n    let type = this.formField.type;\r\n    if(type==\"text\" || type==\"textarea\"){\r\n      if(this.formField.templateOptions.minLength>=this.formField.templateOptions.maxLength){\r\n        this.message.error(\"æå¤§é¿åº¦å¿é¡»å¤§äºæå°é¿åº¦\");\r\n        return false;\r\n      }\r\n    }\r\n    if(type==\"number\"){\r\n      if(this.formField.templateOptions.min>=this.formField.templateOptions.max){\r\n        this.message.error(\"æå¤§å¼å¿é¡»å¤§äºæå°å¼\");\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig,\r\n  clone\r\n} from \"@vx-form/core\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-fieldlabel\",\r\n  templateUrl: \"./field.component.html\",\r\n  styleUrls: [\"./field.component.less\"]\r\n})\r\nexport class VXFormDesignFieldLabel implements OnInit {\r\n  formField: any = {\r\n    key: \"\",\r\n    type:\"html\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\",\r\n      parameterid: \"\",\r\n      treeid: \"\",\r\n      controlid: \"\",\r\n      maxLength: 50,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\"\r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  }; \r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    this.formField = { ...this.formField, ...value }; \r\n    console.log(this.formField);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  submitForm() {}\r\n\r\n  checkSave(){\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-table\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormDesignTable implements OnInit, OnChanges, OnDestroy {\r\n  @Input() tableType: string = \"\";\r\n  @Input() businessTable: IBusinessTable = {\r\n    primary: {},\r\n    child: {\r\n      single: [],\r\n      multiple: []\r\n    }\r\n  };\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n\r\n  tableData = [];\r\n\r\n  mapOfCheckedId: { [key: string]: boolean } = {};\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  initTableData() {\r\n    this.tableData = [];\r\n    this.mapOfCheckedId = {};\r\n    let business = clone(this.businessTable);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n    if (this.tableType === \"single\") {\r\n      if (business.primary && business.primary != null) {\r\n        tables = [...tables, business.primary];\r\n      }\r\n      if (\r\n        business.child &&\r\n        business.child != null &&\r\n        business.child.single &&\r\n        business.child.single != null &&\r\n        business.child.single.length > 0\r\n      ) {\r\n        tables = tables.concat(business.child.single);\r\n      }\r\n    } else if (this.tableType === \"multiple\") {\r\n      if (\r\n        business.child &&\r\n        business.child != null &&\r\n        business.child.multiple &&\r\n        business.child.multiple != null &&\r\n        business.child.multiple.length > 0\r\n      ) {\r\n        business.child.multiple.forEach((table: any) => {\r\n          if (table.tablecode === this.fieldConfig.tablecode) {\r\n            tables = [table];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    this.tableData = tables;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-tables\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormDesignTables implements OnInit, OnChanges, OnDestroy {\r\n  @Input() businessTable: IBusinessTable = {\r\n    primary: {},\r\n    child: {\r\n      single: [],\r\n      multiple: []\r\n    }\r\n  };\r\n  radioValue = \"\";\r\n  tableData = [];\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  initTableData() {\r\n    this.tableData = [];\r\n    let business = clone(this.businessTable);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.multiple &&\r\n      business.child.multiple != null &&\r\n      business.child.multiple.length > 0\r\n    ) {\r\n      this.tableData = business.child.multiple;\r\n    }\r\n    console.log(this.tableData);\r\n  }\r\n\r\n  selectOK(table: any) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig,\r\n  VXFormInfo,\r\n  clone,\r\n  VXTableConfig,\r\n  VXFormCommonService\r\n} from \"@vx-form/core\";\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\nimport * as _ from \"lodash\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {\r\n  FormLayout,\r\n  LayoutPanel,\r\n  LayoutColumn,\r\n  VXTableBusiness,\r\n  ICheckedField,\r\n  IBusinessTable,\r\n  Itable,\r\n  IDesignFormAPI\r\n} from \"../../tools/util\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXDialogService } from \"../../service/dialog.service\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport { VXAntCommonService } from \"../../tools/commonService\";\r\nimport { VXTransferService } from \"../../tools/transferService\";\r\nimport { VXDesginToFormService } from \"../../tools/tableFieldService\";\r\nimport { VXFormDesignField } from \"../field/field.component\";\r\nimport { VXFormDesignFieldLabel } from \"../field-label/field.component\";\r\nimport { VXFormDesignTable } from \"../table/table.component\";\r\nimport { VXFormDesignTables } from \"../tables/table.component\";\r\nimport { group } from \"@angular/animations\";\r\nimport { filter } from \"rxjs/operators\";\r\n\r\n\r\n@Component({\r\n  selector: \"vxform-design-detail\",\r\n  templateUrl: \"./detail.component.html\",\r\n  styleUrls: [\"./detail.component.less\"],\r\n  providers: [DataService, VXAntCommonService, VXTransferService]\r\n})\r\nexport class VXFormDesignDetail implements OnInit, OnChanges, OnDestroy {\r\n  @Input() formCode: string = \"\";\r\n  @Input() api: IDesignFormAPI = {\r\n    tables: { url: \"assets/mockData/business.json\" },\r\n    form: { url: \"assets/mockData/formInfo.json\" }\r\n  };\r\n  @Output() saveEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancelEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() previewEvent: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  pageStatus: number = 1;\r\n\r\n  form_model: any = {};\r\n  form_group = new FormGroup({});\r\n  form_fields: VXFormFieldConfig[] = [];\r\n\r\n  vxFormInfo: VXFormInfo = {};\r\n\r\n  business_tables: IBusinessTable = {\r\n    primary: {},\r\n    child: { single: [], multiple: [] }\r\n  };\r\n\r\n  layout_column: string = \"layout-column-3\";\r\n  layout_row: string = \"layout-row-1\";\r\n\r\n  table_Data: Itable[] = [];\r\n\r\n  constructor(\r\n    private message: NzMessageService,\r\n    private modalService: NzModalService,\r\n    private vxFormAntService: VXFormAntService,\r\n    public vxDialogService: VXDialogService,\r\n    public dataService: DataService,\r\n    public vxAntCommonService: VXAntCommonService,\r\n    public vxTransferService: VXTransferService,\r\n    public vxDesginToFormService: VXDesginToFormService,\r\n    public vxFormCommonService: VXFormCommonService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.vxFormAntService.btnEvent.subscribe((res: any) => {\r\n      switch (res[\"type\"]) {\r\n        case \"delete\":\r\n          this.modalService.confirm({\r\n            nzTitle: \"æç¤º\",\r\n            nzContent: \"æ¨ç¡®å®è¦å é¤éä¸­çå­æ®µï¼\",\r\n            nzOnOk: () => {\r\n              this.groupBtnDeleteFields(res[\"field\"]);\r\n            }\r\n          });\r\n          break;\r\n        case \"up\":\r\n        case \"down\":\r\n          this.groupBtnMoveUpOrDown(res[\"field\"], res[\"type\"]);\r\n          break;\r\n        case \"item\":\r\n          this.groupBtnTableFields(res[\"field\"]);\r\n          break;\r\n        case \"remark\":\r\n        case \"line\":\r\n          this.groupBtnAddLineRemark(res[\"field\"], res[\"type\"]);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.vxFormAntService.fieldEvent.subscribe((res: any) => {\r\n      let sign = res[\"sign\"];\r\n      if (sign == \"edit\") {\r\n        this.editFormFieldConfig(res[\"field\"]);\r\n      } else if (sign == \"delete\") {\r\n        this.modalService.confirm({\r\n          nzTitle: \"æç¤º\",\r\n          nzContent: \"æ¨ç¡®å®è¦å é¤è¯¥å­æ®µï¼\",\r\n          nzOnOk: () => {\r\n            this.deleteFormFieldConfig(res[\"field\"]);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formCode) {\r\n      this.initTablesInfo();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() { }\r\n\r\n  /*æé®åºå---begin*/\r\n\r\n  btnSave() {\r\n    this.vxFormInfo.fields = clone(this.form_fields);\r\n    if (\r\n      this.vxFormInfo.fields !== null &&\r\n      this.vxFormInfo.fields !== undefined\r\n    ) {\r\n      this.vxFormCommonService.initFormFieldProperty(this.vxFormInfo.fields);\r\n    }\r\n    console.log(JSON.stringify(this.vxFormInfo));\r\n    this.saveEvent.emit(JSON.stringify(this.vxFormInfo));\r\n  }\r\n\r\n  btnCancel() { }\r\n\r\n  btnPreview() {\r\n    this.vxFormInfo.fields = clone(this.form_fields);\r\n    if (\r\n      this.vxFormInfo.fields !== null &&\r\n      this.vxFormInfo.fields !== undefined\r\n    ) {\r\n      this.vxFormCommonService.initFormFieldProperty(this.vxFormInfo.fields);\r\n    }\r\n    this.previewEvent.emit(JSON.stringify(this.vxFormInfo));\r\n  }\r\n\r\n  btnDelete() {\r\n    this.modalService.confirm({\r\n      nzTitle: \"æç¤º\",\r\n      nzContent: \"æ¨ç¡®å®è¦å é¤éä¸­çå­æ®µï¼\",\r\n      nzOnOk: () => {\r\n        this.getCheckFields().forEach((item: any) => {\r\n          this.form_fields.forEach((field, index, object) => {\r\n            if (\r\n              field.key === item.field.key &&\r\n              _.get(field, \"templateOptions.isbutintin\") != true\r\n            ) {\r\n              object.splice(index, 1);\r\n            }\r\n          });\r\n        });\r\n\r\n        this.initTableFieldStatus();\r\n      }\r\n    });\r\n  }\r\n\r\n  btnMoveUp() {\r\n    this.getCheckFields().forEach((item: any) => {\r\n      if (item.index > 0) {\r\n        this.form_fields.splice(item.index, 1);\r\n        this.form_fields.splice(item.index - 1, 0, item.field);\r\n      }\r\n    });\r\n  }\r\n\r\n  btnMoveDown() {\r\n    this.getCheckFields()\r\n      .reverse()\r\n      .forEach(item => {\r\n        if (item.index < this.form_fields.length - 1) {\r\n          this.form_fields.splice(item.index, 1);\r\n          this.form_fields.splice(item.index + 1, 0, item.field);\r\n        }\r\n      });\r\n  }\r\n\r\n  btnAddFields() {\r\n    this.selectTableFields();\r\n  }\r\n\r\n  btnAddRemark() {\r\n    this.vxTransferService.transferLabelToForm(\r\n      this.form_fields,\r\n      this.getCheckFields()\r\n    );\r\n  }\r\n\r\n  btnAddLine() {\r\n    this.vxTransferService.transferLineToForm(\r\n      this.form_fields,\r\n      this.getCheckFields()\r\n    );\r\n  }\r\n\r\n  btnAddGroup() {\r\n    let tablecode = this.getTableMultipleCode();\r\n    if (tablecode == null || tablecode == \"\") {\r\n      this.message.warning(\r\n        \"å½åä¸å¡è¡¨æ²¡æç¸å³èçå¤è¡¨åè®°å½ï¼æä¸è½æ·»å å¤è®°å½åºåï¼\"\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.business_tables &&\r\n      this.business_tables.child &&\r\n      this.business_tables.child.multiple &&\r\n      this.business_tables.child.multiple.length > 0\r\n    ) {\r\n      if (\r\n        this.business_tables.child.multiple.some((item: any) => {\r\n          return item.tablequote !== true;\r\n        })\r\n      ) {\r\n        this.vxDialogService.CreateModelDialog(\r\n          {\r\n            nzTitle: \"ç¼è¾\",\r\n            size: \"large\",\r\n            nzContent: VXFormDesignTables\r\n          },\r\n          { businessTable: this.business_tables, tableType: \"single\" },\r\n          (instance: any, modal: any) => {\r\n            modal.destroy();\r\n\r\n            this.vxTransferService.transferGroupToForm(\r\n              this.form_fields,\r\n              this.getCheckFields(),\r\n              instance.radioValue\r\n            );\r\n\r\n            this.initTableFieldStatus();\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  btnColumn(type: number) {\r\n    this.vxFormInfo.column = `layout-column-${type}`;\r\n    this.layout_column = this.vxFormInfo.column;\r\n  }\r\n\r\n  btnRow(type: number) {\r\n    this.vxFormInfo.row = `layout-row-${type}`;\r\n    this.layout_row = this.vxFormInfo.row;\r\n  }\r\n\r\n  getCheckFields() {\r\n    let checkedField: ICheckedField[] = [];\r\n    this.form_fields.forEach((item, index) => {\r\n      if (item.checked) {\r\n        checkedField.push({ index: index, field: item });\r\n      }\r\n    });\r\n    return checkedField;\r\n  }\r\n\r\n  /*æé®åºå---end*/\r\n\r\n  groupBtnMoveUpOrDown(groupField: VXFormFieldConfig, type: string) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      groupField.fieldArray = {\r\n        fieldGroup: []\r\n      };\r\n    }\r\n    let res = this.vxTransferService.groupFieldMoveUpOrDown(\r\n      this.form_fields,\r\n      groupField,\r\n      type\r\n    );\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n  }\r\n\r\n  groupBtnAddLineRemark(groupField: VXFormFieldConfig, type: string) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      groupField.fieldArray = {\r\n        fieldGroup: []\r\n      };\r\n    }\r\n    let res = null;\r\n    if (type === \"line\") {\r\n      res = this.vxTransferService.groupTransferLineToForm(\r\n        this.form_fields,\r\n        groupField\r\n      );\r\n    } else if (type === \"remark\") {\r\n      res = this.vxTransferService.groupTransferRemarkToForm(\r\n        this.form_fields,\r\n        groupField\r\n      );\r\n    }\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n  }\r\n\r\n  groupBtnTableFields(groupField: VXFormFieldConfig) {\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXFormDesignTable\r\n      },\r\n      {\r\n        businessTable: this.business_tables,\r\n        tableType: \"multiple\",\r\n        fieldConfig: groupField\r\n      },\r\n      (instance: any, modal: any) => {\r\n        modal.destroy();\r\n        let res = this.vxTransferService.groupTransferSelectFieldToForm(\r\n          this.form_fields,\r\n          groupField,\r\n          this.getCheckFields(),\r\n          this.business_tables,\r\n          instance.mapOfCheckedId\r\n        );\r\n        if (res != null) {\r\n          this.form_fields = res;\r\n          if (groupField.key !== null && groupField.key !== undefined) {\r\n            this.form_model[groupField.key] = [{}];\r\n          }\r\n        }\r\n\r\n        this.initTableFieldStatus();\r\n      }\r\n    );\r\n  }\r\n\r\n  groupBtnDeleteFields(groupField: VXFormFieldConfig) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      return;\r\n    }\r\n    let res = this.vxTransferService.groupTransferDeleteForm(\r\n      this.form_fields,\r\n      groupField\r\n    );\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n    this.initTableFieldStatus();\r\n  }\r\n\r\n  initTablesInfo() {\r\n    this.business_tables;\r\n    this.dataService\r\n      .getBusinessTables(this.api.tables.url, { formcode: this.formCode })\r\n      .subscribe(res => {\r\n        if (res != null) {\r\n          this.business_tables = res;\r\n          this.initFormInfo();\r\n        }\r\n      });\r\n  }\r\n\r\n  initFormInfo() {\r\n    this.dataService.getFormInfo(this.api.form.url, { formcode: this.formCode }).subscribe(res => {\r\n      this.vxFormInfo = {\r\n        code: res.code,\r\n        name: res.name,\r\n        type: res.type,\r\n        fields: res.fields\r\n      };\r\n      if (\r\n        this.vxFormInfo.fields !== null &&\r\n        this.vxFormInfo.fields !== undefined\r\n      ) {\r\n\r\n      this.vxFormCommonService.initFormFieldModel(this.vxFormInfo.fields, this.form_model);\r\n\r\n        this.form_fields = this.vxFormInfo.fields;\r\n      }\r\n      if (res.column != undefined && res.column != null && res.column != \"\") {\r\n        this.vxFormInfo.column = res.column;\r\n      } else {\r\n        this.vxFormInfo.column = \"layout-column-3\";\r\n      }\r\n      if (res.row != undefined && res.row != null && res.row != \"\") {\r\n        this.vxFormInfo.row = res.row;\r\n      } else {\r\n        this.vxFormInfo.row = \"layout-row-1\";\r\n      }\r\n      if (\r\n        this.vxFormInfo.column != undefined &&\r\n        this.vxFormInfo.column != null &&\r\n        this.vxFormInfo.row != undefined &&\r\n        this.vxFormInfo.row != null\r\n      ) {\r\n        this.layout_column = this.vxFormInfo.column;\r\n        this.layout_row = this.vxFormInfo.row;\r\n        //debugger\r\n        this.vxDesginToFormService.initFormFieldByTables(\r\n          this.business_tables,\r\n          this.form_fields\r\n        );\r\n        this.initTableFieldStatus();\r\n      }\r\n    });\r\n  }\r\n\r\n  initTableFieldStatus() {\r\n    this.vxDesginToFormService.initTableStatus(\r\n      this.business_tables,\r\n      this.form_fields\r\n    );\r\n    this.initTablesData();\r\n  }\r\n\r\n  initTablesData() {\r\n    this.table_Data = [];\r\n    let business = clone(this.business_tables);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n\r\n    if (business.primary && business.primary != null) {\r\n      tables = [\r\n        {\r\n          tabletype: \"primary\",\r\n          tablelabel: \"ä¸»è¡¨\",\r\n          tablecode: business.primary[\"tablecode\"],\r\n          tablename: business.primary[\"tablename\"],\r\n          tablefields: business.primary[\"tablefields\"]\r\n        }\r\n      ];\r\n    }\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.single &&\r\n      business.child.single != null &&\r\n      business.child.single.length > 0\r\n    ) {\r\n      if (Array.isArray(business.child.single)) {\r\n        business.child.single.forEach((item: any) => {\r\n          tables.push({\r\n            tabletype: \"single\",\r\n            tablelabel: \"åè®°å½å­è¡¨\",\r\n            tablecode: item[\"tablecode\"],\r\n            tablename: item[\"tablename\"],\r\n            tablefields: item[\"tablefields\"]\r\n          });\r\n        });\r\n      }\r\n    }\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.multiple &&\r\n      business.child.multiple != null &&\r\n      business.child.multiple.length > 0\r\n    ) {\r\n      if (Array.isArray(business.child.multiple)) {\r\n        business.child.multiple.forEach((item: any) => {\r\n          tables.push({\r\n            tabletype: \"multiple\",\r\n            tablelabel: \"å¤è®°å½å­è¡¨\",\r\n            tablecode: item[\"tablecode\"],\r\n            tablename: item[\"tablename\"],\r\n            tablefields: item[\"tablefields\"]\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.table_Data = tables;\r\n  }\r\n\r\n  //è¡¨åéæ©\r\n  selectTableFields() {\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXFormDesignTable\r\n      },\r\n      { businessTable: this.business_tables, tableType: \"single\" },\r\n      (instance: any, modal: any) => {\r\n        modal.destroy();\r\n        this.vxTransferService.transferSelectFieldToForm(\r\n          this.form_fields,\r\n          this.getCheckFields(),\r\n          this.business_tables,\r\n          instance.mapOfCheckedId\r\n        );\r\n        console.log(JSON.stringify(this.form_fields))\r\n        this.initTableFieldStatus();\r\n      }\r\n    );\r\n  }\r\n\r\n  getTableMultipleCode() {\r\n    let resTableCode = \"\";\r\n    if (\r\n      this.business_tables &&\r\n      this.business_tables.child &&\r\n      this.business_tables.child.multiple &&\r\n      this.business_tables.child.multiple.length > 0\r\n    ) {\r\n      this.business_tables.child.multiple.forEach((item: any) => {\r\n        if (item.tablequote !== true && resTableCode == \"\") {\r\n          resTableCode = item.tablecode;\r\n        }\r\n      });\r\n    }\r\n    return resTableCode;\r\n  }\r\n\r\n  //ä¿®æ¹Field\r\n  editFormFieldConfig(field: VXFormFieldConfig) {\r\n    let content: any;\r\n    let title = \"\";\r\n    if (field.type === \"html\") {\r\n      title = \"ç¼è¾çæ®µææ¬æè¿°\";\r\n      content = VXFormDesignFieldLabel;\r\n    } else {\r\n      title = \"ç¼è¾å­æ®µ - \" + _.get(field, \"templateOptions.label\");\r\n      content = VXFormDesignField;\r\n    }\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: title,\r\n        size: \"large\",\r\n        nzContent: content\r\n      },\r\n      { field: clone(field) },\r\n      (instance: any, modal: any) => { \r\n        if (instance.checkSave()) {\r\n          let result = this.vxTransferService.editFormFieldInfo(\r\n            this.form_fields,\r\n            instance.formField\r\n          );\r\n\r\n          if (result != null) {\r\n            this.form_fields = result.formFileds;\r\n            if (result.groupKey != null && result.groupKey != \"\") {\r\n              this.form_model[result.groupKey] = [{}];\r\n            }\r\n          }\r\n          modal.destroy();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  //å é¤Field\r\n  deleteFormFieldConfig(field: VXFormFieldConfig) {\r\n    let result = this.vxTransferService.deleteFormFieldInfo(\r\n      this.form_fields,\r\n      field\r\n    );\r\n\r\n    if (result != null) {\r\n      this.form_fields = result.formFileds;\r\n      if (result.groupKey != null && result.groupKey != \"\") {\r\n        this.form_model[result.groupKey] = [{}];\r\n      }\r\n\r\n      this.initTableFieldStatus();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  forwardRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-drawer\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  host: {\r\n    \"[class.setting-drawer]\": \"true\"\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => VXFormDrawerComponent), // replace name as appropriate\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class VXFormDrawerComponent implements OnInit, OnChanges, OnDestroy {\r\n  visible = false;\r\n\r\n  tableData = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    //this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  close(): void {\r\n    this.visible = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.visible = !this.visible;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    if (value != undefined && value != null) {\r\n      this.tableData = value;\r\n    }\r\n  }\r\n\r\n  onChange(_: any) {}\r\n  onTouched() {}\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent } from \"ng-zorro-antd/core\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport {\r\n  ISelectedNode,\r\n  ITreeData,\r\n  ICheckedTree,\r\n  ITreeEvent\r\n} from \"../../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-private-tree\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXFormPrivateTree implements OnInit, OnChanges {\r\n  //æ¯å¦æ¾ç¤ºTag\r\n  @Input() tag: boolean = true;\r\n\r\n  //åéï¼å¤é\r\n  @Input() selectType: \"single\" | \"multiple\" = \"single\";\r\n\r\n  @Input() expandAll:boolean = true;\r\n\r\n  //éä¸­èç¹\r\n  @Input() selectData: ICheckedTree[] = [];\r\n\r\n  //æ æ°æ®\r\n  @Input() data: ITreeData[] = [];\r\n\r\n  @Output() treeChangeEvent = new EventEmitter<ITreeEvent>();\r\n\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  selectedKey: any[] = [];\r\n\r\n  //éæ©èç¹\r\n  selectedNode: ISelectedNode[] = [];\r\n\r\n  skeletonStatus: number = 0;\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.selectData) {\r\n      this.treeChecked(this.selectData);\r\n    }\r\n    if (changes.data) {\r\n      //setTimeout(() => {\r\n      this.skeletonStatus = 1;\r\n      //}, 100);\r\n    }\r\n  }\r\n\r\n  nzClick(event: NzFormatEmitEvent) {\r\n    if (this.selectType != \"multiple\") {\r\n      this.selectData.forEach((item: any, index, object) => {\r\n        if (\r\n          item != undefined &&\r\n          item != null &&\r\n          item.value != undefined &&\r\n          item.value != null &&\r\n          event != undefined &&\r\n          event != null &&\r\n          event.node != undefined &&\r\n          event.node != null &&\r\n          event.node.key != undefined &&\r\n          event.node.key != null &&\r\n          event.node.title != undefined &&\r\n          event.node.title != null &&\r\n          item.value !== event.node.key\r\n        ) {\r\n          object.splice(index, 1);\r\n        }\r\n      });\r\n      if (this.selectData.length < 1) {\r\n        if (\r\n          event != undefined &&\r\n          event != null &&\r\n          event.node != undefined &&\r\n          event.node != null &&\r\n          event.node.key != undefined &&\r\n          event.node.key != null &&\r\n          event.node.title != undefined &&\r\n          event.node.title != null\r\n        ) {\r\n          this.selectData.push({\r\n            label: event.node.title,\r\n            value: event.node.key\r\n          });\r\n        }\r\n      }\r\n      this.treeChangeEvent.emit({ checkData: this.selectData });\r\n    }\r\n  }\r\n\r\n  //ç¹å»å¤éæ¡è§¦å\r\n  nzCheck(event: NzFormatEmitEvent): void {\r\n    if (\r\n      event != undefined &&\r\n      event != null &&\r\n      event.keys != undefined &&\r\n      event.keys != null &&\r\n      event.node != undefined &&\r\n      event.node != null &&\r\n      event.node.key != undefined &&\r\n      event.node.key != null &&\r\n      event.node.title != undefined &&\r\n      event.node.title != null\r\n    ) {\r\n      let isAdd: boolean = event.keys.some((key: any) => {\r\n        return key === _.get(event, \"node.key\");\r\n      });\r\n      if (isAdd == true) {\r\n        this.selectData.push({\r\n          label: event.node.title,\r\n          value: event.node.key\r\n        });\r\n      } else {\r\n        this.selectData.forEach((item, index, object) => {\r\n          if (item.value === _.get(event, \"node.key\")) {\r\n            object.splice(index, 1);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    this.treeChecked(this.selectData);\r\n\r\n    this.treeChangeEvent.emit({ checkData: this.selectData });\r\n  }\r\n\r\n  //éç½®éä¸­èç¹\r\n  treeChecked(items: any) {\r\n    if (items != null && items.length > 0) {\r\n      this.selectedKey = items.map((item: any) => {\r\n        return item.value;\r\n      });\r\n    } else {\r\n      this.selectedKey = [];\r\n    }\r\n  }\r\n\r\n  //å é¤éä¸­èç¹\r\n  selectClearById(node: any) {\r\n    this.selectData.forEach((item, index, object) => {\r\n      if (item.value === node) {\r\n        object.splice(index, 1);\r\n      }\r\n    });\r\n    this.treeChecked(this.selectData);\r\n    this.treeChangeEvent.emit({ checkData: this.selectData, delete: node });\r\n  }\r\n\r\n  selectAllClear(){  \r\n    //this.selectData =[];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from \"@angular/core\";\r\n\r\nexport interface ITableQuery {\r\n  total: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  sortName?: string;\r\n  sortValue?: string;\r\n  parameter?: any;\r\n  keyWord:string;\r\n}\r\nexport interface ITableHeader {\r\n  key?: any;\r\n  name?: string;\r\n  //pop?: string;\r\n  width?: number;\r\n  minWidth?: number;\r\n  filterList?: any;\r\n  checkboxable?: boolean;\r\n  sortable: boolean;\r\n  hiden?: boolean,\r\n  action?: boolean;\r\n  [additionalProperties: string]: any;\r\n}\r\n\r\nexport interface ITableButton {\r\n  type?: string;\r\n  text?: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: \"vxform-private-table\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXFormPrivateTable  implements OnInit, OnChanges, OnDestroy {\r\n   \r\n  @Input() set tableIndex(value:number){\r\n    this.query.pageIndex=value;\r\n  }\r\n  get tableIndex(){\r\n    return this.query.pageIndex;\r\n  }\r\n  \r\n  @Input() set tableSize(value:number){\r\n    this.query.pageSize=value;\r\n  }\r\n  get tableSize(){\r\n    return this.query.pageSize;\r\n  }\r\n  \r\n  @Input() set tableTotal(value:number){\r\n    this.query.total=value;\r\n  }\r\n  get tableTotal(){\r\n    return this.query.total;\r\n  }\r\n\r\n  //tableId\r\n  @Input() id: string=\"\";\r\n\r\n  //æ¯å¦è¦å¤é\r\n  @Input() check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  @Input() action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  @Input()\r\n  set header(value: ITableHeader[]) {\r\n    if (value != null && value.length > 0) {\r\n      value.forEach(item => {\r\n        item.prop = item.key;\r\n        if (item.checkboxable) {\r\n          item.name=\"\";\r\n          item.width=50;\r\n          item.canAutoResize = false;\r\n          item.resizeable = false;\r\n          item.frozenLeft = true;\r\n          item.checkboxable = true;\r\n          item.headerCheckboxable = true;\r\n        }\r\n        if(item.action){ \r\n          item.frozenRight=true;\r\n          item.canAutoResize=false;\r\n          item.resizeable=false;\r\n        }\r\n        this._headerData.push(item);\r\n      });\r\n    }\r\n  }\r\n  get header() {\r\n    return this._headerData;\r\n  }\r\n\r\n  //table è¡æ°æ®\r\n  @Input()\r\n  set body(value: any[]) {\r\n    this.listData = value;\r\n    if(this.listData==null || this.listData.length==0){\r\n      this.tableScroll.y=\"0px\";\r\n    }else{\r\n      this.tableScroll.y=\"332px\";\r\n    }\r\n  }\r\n\r\n  //æé®åè¡¨\r\n  @Input() buttonlist: ITableButton[] = [];\r\n\r\n  //é»è®¤éä¸­Id\r\n  @Input()\r\n  set checkid(value: any[]) {\r\n    this.listDataSelectedList=[];\r\n    if (value != null && value.length > 0) {\r\n      value.forEach(item => {\r\n        this.listDataCheckedId[item.id] = true;\r\n        this.listDataSelectedList.push(item);\r\n      });\r\n    }\r\n  }\r\n\r\n  //éä¸­äºä»¶\r\n  @Output() checkChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //ç¿»é¡µäºä»¶\r\n  @Output() pageIndexEvent: EventEmitter<any> = new EventEmitter();\r\n  //æåºäºä»¶\r\n  @Output() orderChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //è¿æ»¤äºä»¶\r\n  @Output() filterChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //æä½äºä»¶\r\n  @Output() buttonAction: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  checkIds: string[] = [];\r\n  _headerData:any[] = [];\r\n\r\n  isAllChecked = false;\r\n  isIndeterminate = false; \r\n\r\n  listData: any[] = [];\r\n  listDataCheckedId: { [key: string]: boolean } = {};\r\n  listDataSelectedList: any[] = [];\r\n\r\n  query: ITableQuery = {\r\n    total: 0,\r\n    pageIndex:1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord:\"\"\r\n  }\r\n  tableScroll = {\r\n    y: '332px'\r\n  };\r\n \r\n  constructor() {}\r\n \r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n \r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n\r\n  //å¨é|å¨ä¸é\r\n  setCheckAll(value: boolean): void {\r\n    this.listData.forEach(item => (this.listDataCheckedId[item.id] = value));\r\n    this.setCheckStatus();\r\n  }\r\n\r\n  //è®¾ç½®æä¸ªéæ©|åæ¶éä¸­\r\n  setCheckStatus(): void { \r\n    this.isAllChecked = this.listData.every(item => this.listDataCheckedId[item.id]);\r\n    this.isIndeterminate = this.listData.some(item => this.listDataCheckedId[item.id]) && !this.isAllChecked;\r\n    this.saveSelected();\r\n  }\r\n  \r\n \r\n  //ç¹å»æ¥è¯¢\r\n  queryChange()\r\n  {\r\n    this.pageIndexEvent.emit(this.query);  \r\n  }\r\n\r\n  //ç¹å»ç¿»é¡µ\r\n  pageIndexChange(e:number) {\r\n    this.query.pageIndex = e;\r\n    this.pageIndexEvent.emit(this.query);\r\n  }\r\n\r\n  //ç¹å»æåº\r\n  tableSort(sort: { key: string; value: string }): void {\r\n    this.query.sortName = sort.key;\r\n    this.query.sortValue = sort.value;\r\n    this.orderChangeEvent.emit(this.query);\r\n  } \r\n\r\n  //åå»éä¸­\r\n  itemSelectChange(event:any){\r\n    this.listDataSelectedList.shift();\r\n    this.listDataSelectedList.push({\r\n      \"id\":event.id,\r\n      \"name\":event.name\r\n    });\r\n    this.checkChangeEvent.emit(this.listDataSelectedList);\r\n  }\r\n \r\n  //ä¿å­éä¸­\r\n  saveSelected(){ \r\n    Object.keys(this.listDataCheckedId).forEach(id => {\r\n      let value = this.listDataCheckedId[id];\r\n        if(value){\r\n         if(!this.listDataSelectedList.some(item=>{return item.id==id})){\r\n          this.listData.forEach((item,index,object)=>{\r\n            if(item.id==id){\r\n              this.listDataSelectedList.push({\r\n                id:item.id,\r\n                name:item.name\r\n              });\r\n            }\r\n          });\r\n         }\r\n        }\r\n        else{\r\n          this.listDataSelectedList.forEach((item,index,object)=>{\r\n            if(item.id==id){\r\n              object.splice(index,1);\r\n            }\r\n          });\r\n        }\r\n    });\r\n    \r\n    this.checkChangeEvent.emit(this.listDataSelectedList); \r\n  }\r\n  \r\n  selectAllClear(){\r\n    this.isAllChecked = false;\r\n    this.isIndeterminate = false; \r\n    this.listDataCheckedId={};\r\n    this.listDataSelectedList=[]; \r\n  }\r\n\r\n  selectClearById(id:any){\r\n    this.listDataCheckedId[id]=false;\r\n    this.setCheckStatus();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\n\r\n@Pipe({ name: \"replaceLine\" })\r\nexport class ReplaceLinePipe implements PipeTransform {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n  transform(value: string): string {\r\n    return value.replace(/\\n/g, \"<br/>\");\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule, registerLocaleData } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\r\nimport {\r\n  HttpClient,\r\n  HTTP_INTERCEPTORS,\r\n  HttpClientModule\r\n} from \"@angular/common/http\";\r\nimport { TranslateLoader, TranslateModule } from \"@ngx-translate/core\";\r\nimport { OverlayModule } from \"@angular/cdk/overlay\";\r\nimport { NgZorroAntdModule, NZ_I18N, zh_CN, NZ_ICONS } from \"ng-zorro-antd\";\r\nimport {\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n} from \"@ant-design/icons-angular/icons\";\r\n\r\nimport zh from \"@angular/common/locales/zh\"; \r\n\r\nimport { VXFormModule } from \"@vx-form/core\";\r\nimport {\r\n  BOOTSTRAP_VXFORM_CONFIG,\r\n  FIELD_TYPE_COMPONENTS\r\n} from \"./bootstrap.config\";\r\n\r\nimport { validationConfig } from \"./validation.config\";\r\nimport { VXFormDesignDetail } from \"./design/detail/detail.component\";\r\nimport { VXFormDesignField } from \"./design/field/field.component\";\r\nimport { VXFormDesignFieldLabel } from \"./design/field-label/field.component\";\r\nimport { VXFormDesignTable } from \"./design/table/table.component\";\r\nimport { VXFormDesignTables } from \"./design/tables/table.component\";\r\nimport { VXFormDrawerComponent } from \"./design/drawer/index.component\";\r\n\r\nimport { VXFormPrivateTree } from \"./components/private/tree/index.component\";\r\nimport { VXFormPrivateTable } from \"./components/private/table/index.component\";\r\n\r\nimport { VXFormTree } from \"./components/tree/index.component\";\r\nimport { VXFormEmployee } from \"./components/employee/index.component\";\r\nimport { VXFormOrg } from \"./components/org/index.component\";\r\nimport { VXFormPostion } from \"./components/postion/index.component\";\r\nimport { VXFormArea } from \"./components/area/index.component\";\r\n\r\n// import { VXLanguageComponent } from \"./components/public/lang/index.component\";\r\n// import { VXFormEmployeeComponent } from \"./components/public/employee/index.component\";\r\n// import { VXFormOrgComponent } from \"./components/public/org/index.component\";\r\n// import { VXFormPostionComponent } from \"./components/public/postion/index.component\";\r\n// import { VXFormAreaComponent } from \"./components/public/area/index.component\";\r\n// import { VXCardSelfComponent } from \"./components/public/card/card-self/index.component\";\r\n// import { VXCardSubComponent } from \"./components/public/card/card-sub/index.component\";\r\n// import { VXCardEmpComponent } from \"./components/public/card/card-emp/index.component\";\r\n// import { VXCardLimitComponent } from \"./components/public/card/card-limit/index.component\";\r\n\r\nimport { VXFormAntService } from \"./tools/service\";\r\nimport { VXToFormFieldService } from \"./tools/formFieldService\";\r\nimport { VXDesginToFormService } from \"./tools/tableFieldService\";\r\n\r\nimport { VXDialogService } from \"./service/dialog.service\"; \r\nimport { ReplaceLinePipe } from \"./tools/replaceLinePipe\"; \r\nimport { _HttpClient } from \"./net/http.client\";\r\n\r\nconst icons = [\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n];\r\nregisterLocaleData(zh);\r\n\r\n//ç§æç\r\nconst entryComponent = [\r\n  VXFormDesignField,\r\n  VXFormDesignFieldLabel,\r\n  VXFormDesignTable,\r\n  VXFormDesignTables,\r\n  VXFormDrawerComponent,\r\n\r\n  VXFormPrivateTree,\r\n  VXFormPrivateTable,\r\n  \r\n\r\n  \r\n  VXFormTree,\r\n  VXFormEmployee,\r\n  VXFormEmployee,\r\n  VXFormOrg,\r\n  VXFormPostion,\r\n  VXFormArea\r\n];\r\n\r\n//å¬å¼ç\r\nconst publicComponent = [\r\n  VXFormDesignDetail,\r\n  // VXLanguageComponent,\r\n  // VXFormEmployeeComponent,\r\n  // VXFormOrgComponent,\r\n  // VXFormPostionComponent,\r\n  // VXFormAreaComponent,\r\n  // VXCardSelfComponent,\r\n  // VXCardSubComponent,\r\n  // VXCardEmpComponent,\r\n  // VXCardLimitComponent,\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FIELD_TYPE_COMPONENTS,\r\n    entryComponent,\r\n    publicComponent,\r\n    ReplaceLinePipe\r\n  ],\r\n  imports: [\r\n    HttpModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    DragDropModule,\r\n    OverlayModule,\r\n    NgZorroAntdModule,\r\n    VXFormModule.forChild(BOOTSTRAP_VXFORM_CONFIG),\r\n    VXFormModule.forRoot(validationConfig)\r\n  ],\r\n  entryComponents: [entryComponent],\r\n  exports: [TranslateModule, publicComponent],\r\n  providers: [ \r\n    { provide: NZ_I18N, useValue: zh_CN },\r\n    { provide: NZ_ICONS, useValue: icons }, \r\n    _HttpClient, \r\n    VXFormAntService,\r\n    VXDialogService,\r\n    VXToFormFieldService,\r\n    VXDesginToFormService\r\n  ]\r\n})\r\nexport class VXFormAntModule {}\r\n"],"names":["tslib_1.__extends","_.cloneDeep","_.get","NzModalService"],"mappings":"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"}
