{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@vx-form/ant/lib/tools/service.ts","ng://@vx-form/ant/lib/types/text.ts","ng://@vx-form/ant/lib/types/texti18n.ts","ng://@vx-form/ant/lib/types/textarea.ts","ng://@vx-form/ant/lib/types/number.ts","ng://@vx-form/ant/lib/types/password.ts","ng://@vx-form/ant/lib/types/radio.ts","ng://@vx-form/ant/lib/types/radiogroup.ts","ng://@vx-form/ant/lib/types/checkbox.ts","ng://@vx-form/ant/lib/types/checkboxgroup.ts","ng://@vx-form/ant/lib/types/select.ts","ng://@vx-form/ant/lib/types/datetime.ts","ng://@vx-form/ant/lib/types/image.ts","ng://@vx-form/ant/lib/types/upload.ts","ng://@vx-form/ant/lib/service/dialog.service.ts","ng://@vx-form/ant/lib/net/http.client.ts","ng://@vx-form/ant/lib/service/data.service.ts","ng://@vx-form/ant/lib/components/tree/index.component.ts","ng://@vx-form/ant/lib/components/employee/index.component.ts","ng://@vx-form/ant/lib/components/org/index.component.ts","ng://@vx-form/ant/lib/components/postion/index.component.ts","ng://@vx-form/ant/lib/components/area/index.component.ts","ng://@vx-form/ant/lib/types/lookup.ts","ng://@vx-form/ant/lib/types/html.ts","ng://@vx-form/ant/lib/types/line.ts","ng://@vx-form/ant/lib/wrappers/form-field.wrapper.ts","ng://@vx-form/ant/lib/templates/group.ts","ng://@vx-form/ant/lib/templates/repeat.ts","ng://@vx-form/ant/lib/bootstrap.config.ts","ng://@vx-form/ant/lib/validation.config.ts","ng://@vx-form/ant/lib/tools/formFieldService.ts","ng://@vx-form/ant/lib/tools/commonService.ts","ng://@vx-form/ant/lib/tools/transferService.ts","ng://@vx-form/ant/lib/tools/tableFieldService.ts","ng://@vx-form/ant/lib/design/field/field.component.ts","ng://@vx-form/ant/lib/design/field-label/field.component.ts","ng://@vx-form/ant/lib/design/table/table.component.ts","ng://@vx-form/ant/lib/design/tables/table.component.ts","ng://@vx-form/ant/lib/design/detail/detail.component.ts","ng://@vx-form/ant/lib/design/drawer/index.component.ts","ng://@vx-form/ant/lib/components/private/tree/index.component.ts","ng://@vx-form/ant/lib/components/private/table/index.component.ts","ng://@vx-form/ant/lib/tools/replaceLinePipe.ts","ng://@vx-form/ant/lib/bootstrap.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","VXFormAntService","btnEvent","EventEmitter","fieldEvent","workList","fieldOperational","sign","field","emit","groupOperational","type","Injectable","VXFormFieldText","dyService","_this","_super","service","tslib_1.__extends","Component","args","selector","template","FieldType","VXFormFieldTextI18n","triggerWidth","languageList","languagetype","resvalue","resize","event","visibleChange","defineProperty","model","undefined","key","formControl","onChange","to","required","some","item","setValue","markAsTouched","cdkOverlayOrigin","elementRef","nativeElement","getBoundingClientRect","width","lang","ViewChild","CdkOverlayOrigin","static","HostListener","VXFormFieldTextArea","VXFormFieldNumber","result","VXFormFieldPassWord","VXFormFieldRadio","VXFormFieldRadioGroup","guid","Guid","VXFormFieldCheckbox","VXFormFieldCheckboxGroup","values","forEach","options","option","patchValue","getCheckStatus","getControlChecked","VXFormFieldSelect","defaultValue","defaultValues","selecttype","ngAfterViewChecked","split","getSelectText","textSingle","textMultiple","moment","moment_","VXFormFieldDateTime","getText","format","VXFormFieldImage","VXFormFieldUpload","msg","defaultFileList","handleRemove","file","Observable","observer","complete","beforeUpload","console","log","checkFileType","checkFileSize","handleChange","_a","fileList","status","map","uid","name","url","success","index","object","splice","templateOptions","attachment","types","size","NzMessageService","VXDialogService","modalService","switchSize","obj","height","CreateModelDialog","modalOptions","params","callback","modal","nzTitle","nzWidth","nzClosable","nzMaskClosable","nzWrapClassName","nzBodyStyle","padding","nzContent","nzFooter","show","label","onClick","componentInstance","destroy","nzOnOk","data","nzOnCancel","nzComponentParams","afterClose","subscribe","providedIn","NzModalService","_HttpClient","http","_loading","parseParams","HttpParams","fromObject","formEncode","encodedString","encodeURIComponent","appliedUrl","indexOf","arr","join","begin","setTimeout","end","get","request","post","body","delete","jsonp","callbackParam","pipe","tap","catchError","res","throwError","patch","put","method","HttpClient","DataService","_http","getBusinessTables","getFormInfo","getSysCtrEmployee","getWebAPIName","getSysCtrOrgTree","getSysCtrPostionTable","getSysCtrArea","getTreeData","localStorage","getItem","JSON","parse","VXFormTree","dataService","fieldConfig","tag","treeChangeEvent","treeData","controlid","selectData","_.cloneDeep","selectType","ngOnInit","id","_.get","ngOnChanges","changes","defaultNode","getSelectData","providers","Input","Output","VXFormEmployee","check","action","header","hiden","buttonlist","checkid","query","total","pageIndex","pageSize","sortName","sortValue","keyWord","getEmployeeData","pageIndexChange","checkChange","list","VXFormOrg","cd","dimension","curOrgId","orgData","treeid","selectedKey","skeletonStatus","orgControl","getOrgData","ngAfterViewInit","detectChanges","children","getTreeSelectData","orgChange","setTreeChecked","treeChange","setTreeUnChecked","tree","checked","ChangeDetectorRef","VXFormPostion","orgid","getPostionData","checkData","VXFormArea","nodes","nzEvent","submitForm","VXFormFieldLookUp","vxDialogService","lookup","para","instance","selectedNode","removeValue","VXFormFieldHTML","VXFormFieldLine","VXFormWrapperFormField","FieldWrapper","VXFormFieldGroup","host","[class]","cdkDrag","VXFormFieldRepeat","fieldGroup","remove","FieldArrayType","FIELD_TYPE_COMPONENTS","BOOTSTRAP_VXFORM_CONFIG","component","wrappers","getFieldPro","requiredValidationMessage","err","minlengthValidationMessage","maxlengthValidationMessage","minValidationMessage","maxValidationMessage","validationConfig","validationMessages","message","extends","VXToFormFieldService","getVXFiledFunction","tableField","datatype","text","textI18N","textArea","number","passWord","radio","checkbox","select","datetime","image","upload","html","tablecode","fieldcode","origin","refdatasourcetype","defaultvalue","fieldname","allownull","maxLength","maxlength","minLength","minlength","placeholder","isbutintin","tips","pattern","max","min","precision","showtype","parameterid","parameterdata","attachmentsize","attachmenttype","limit","attachmentlimit","defaultText","defaulttext","VXAntCommonService","toFormField","findFieldConfig","getFormFieldByGuid","formFieldConfig","fieldArray","decorators","Inject","VXTransferService","transferLineToForm","form_fields","checkedFields","getFieldLineInfo","checkedField","transferLabelToForm","getFieldRemarkInfo","transferGroupToForm","tableCode","getFieldGroupInfo","transferSelectFieldToForm","businessTable","tableFields","selectFields","addFields","beginIndex","getOwnPropertyNames","getTableFiledList","getTableFiledInfo","formField","groupFieldMoveUpOrDown","clearGroupChecked","cloneFields","clone","cloneField","getGroupCheckFields","reverse","groupTransferLineToForm","groupTransferRemarkToForm","groupTransferSelectFieldToForm","groupField","cloneGroupField","groupTransferDeleteForm","editFormFieldInfo","new_field","groupKey","groupIndex","groupObject","formFileds","deleteFormFieldInfo","deleteGroupFormFieldInfo","fields","description","primary","tablefields","concat","child","single","multiple","resValue","filterFiled","filter","VXDesginToFormService","initTableStatus","tables","initTableFields","setTableStatus","initFormFieldByTables","tableFileds","checkVXFormFieldConfig","addVXFormFieldConfig","tablequote","fieldquote","table","setTablePrimary","setTableSingle","setTableMultiple","code","VXFormDesignField","checkSave","VXFormDesignFieldLabel","VXFormDesignTable","tableType","tableData","mapOfCheckedId","initTableData","ngOnDestroy","business","__spread","VXFormDesignTables","radioValue","selectOK","VXFormDesignDetail","vxFormAntService","vxAntCommonService","vxTransferService","vxDesginToFormService","vxFormCommonService","formCode","api","form","saveEvent","cancelEvent","previewEvent","pageStatus","form_model","form_group","FormGroup","vxFormInfo","business_tables","layout_column","layout_row","table_Data","confirm","groupBtnDeleteFields","groupBtnMoveUpOrDown","groupBtnTableFields","groupBtnAddLineRemark","editFormFieldConfig","deleteFormFieldConfig","initTablesInfo","btnSave","initFormFieldProperty","stringify","btnCancel","btnPreview","btnDelete","getCheckFields","initTableFieldStatus","btnMoveUp","btnMoveDown","btnAddFields","selectTableFields","btnAddRemark","btnAddLine","btnAddGroup","getTableMultipleCode","warning","btnColumn","column","btnRow","row","formcode","initFormInfo","initFormFieldModel","initTablesData","tabletype","tablelabel","tablename","isArray","resTableCode","content","title","VXFormCommonService","VXFormDrawerComponent","visible","close","toggle","writeValue","_","onTouched","registerOnChange","fn","registerOnTouched","[class.setting-drawer]","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","VXFormPrivateTree","expandAll","treeChecked","nzClick","node","nzCheck","keys","items","selectClearById","selectAllClear","VXFormPrivateTable","checkChangeEvent","pageIndexEvent","orderChangeEvent","filterChangeEvent","buttonAction","checkIds","_headerData","isAllChecked","isIndeterminate","listData","listDataCheckedId","listDataSelectedList","tableScroll","y","prop","checkboxable","canAutoResize","resizeable","frozenLeft","headerCheckboxable","frozenRight","setCheckAll","setCheckStatus","every","saveSelected","queryChange","tableSort","sort","itemSelectChange","shift","ReplaceLinePipe","sanitized","transform","replace","Pipe","DomSanitizer","icons","MenuFoldOutline","MenuUnfoldOutline","FormOutline","DashboardOutline","MinusSquareFill","MinusSquareOutline","MinusSquareTwoTone","MinusOutline","InboxOutline","registerLocaleData","zh","entryComponent","publicComponent","zh_CN","ɵ1","VXFormAntModule","NgModule","declarations","imports","HttpModule","HttpClientModule","FormsModule","ReactiveFormsModule","CommonModule","DragDropModule","OverlayModule","NgZorroAntdModule","VXFormModule","forChild","forRoot","entryComponents","exports","TranslateModule","NZ_I18N","useValue","ɵ0","NZ_ICONS"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXFormAntService {\r\n  btnEvent = new EventEmitter();\r\n  fieldEvent = new EventEmitter();\r\n\r\n  workList = [];\r\n\r\n  constructor() {}\r\n\r\n  fieldOperational(sign: string, field: VXFormFieldConfig) {\r\n    this.fieldEvent.emit({\r\n      sign: sign,\r\n      field: field\r\n    });\r\n  }\r\n\r\n  groupOperational(type: string, field: VXFormFieldConfig) {\r\n    this.btnEvent.emit({\r\n      type: type,\r\n      field: field\r\n    });\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-text\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <input\r\n          nz-input\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        />\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldText extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  forwardRef,\r\n  ViewChild,\r\n  Input,\r\n  OnChanges,\r\n  DoCheck,\r\n  SimpleChanges,\r\n  ChangeDetectorRef,\r\n  HostListener\r\n} from \"@angular/core\";\r\nimport { CdkConnectedOverlay, CdkOverlayOrigin } from \"@angular/cdk/overlay\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-field-inputi18n\",\r\n  template: `\r\n    <ng-container *ngIf=\"editor === true\">\r\n      <div class=\"inputi18n\" cdkOverlayOrigin>\r\n        <input\r\n          nz-input\r\n          [(ngModel)]=\"language[0].resvalue\"\r\n          [vxFormAttributes]=\"field\"\r\n          (ngModelChange)=\"onChange(language[0].resvalue)\"\r\n          nz-popover\r\n          nzPopoverTrigger=\"click\"\r\n          [nzPopoverContent]=\"contentTemplate\"\r\n          nzOverlayClassName=\"inputi18n-template\"\r\n          nzPopoverPlacement=\"bottom\"\r\n          [nzOverlayStyle]=\"{ width: triggerWidth }\"\r\n          (nzVisibleChange)=\"visibleChange($event)\"\r\n        />\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </div>\r\n      <ng-template #contentTemplate>\r\n        <ul>\r\n          <ng-container *ngFor=\"let item of language; let i = index\">\r\n            <li *ngIf=\"i > 0\">\r\n              <label>{{ item.languagetype }}</label>\r\n              <input\r\n                nz-input\r\n                [(ngModel)]=\"item.resvalue\"\r\n                [vxFormAttributes]=\"field\"\r\n                (ngModelChange)=\"onChange(item.resvalue)\"\r\n              />\r\n            </li>\r\n          </ng-container>\r\n        </ul>\r\n      </ng-template>\r\n    </ng-container>\r\n    <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ langText }}</div>\r\n  `\r\n})\r\nexport class VXFormFieldTextI18n extends FieldType {\r\n  service: any;\r\n  triggerWidth = \"260px\";\r\n\r\n  @ViewChild(CdkOverlayOrigin, { static: false })\r\n  cdkOverlayOrigin: CdkOverlayOrigin | undefined;\r\n  @HostListener(\"window:resize\", [\"$event\"])\r\n  resize(event: any) {\r\n    this.visibleChange(event);\r\n  }\r\n  languageList: Array<any> = [\r\n    { languagetype: \"chinese\", resvalue: \"\" },\r\n    { languagetype: \"english\", resvalue: \"\" },\r\n    { languagetype: \"english2\", resvalue: \"\" }\r\n  ];\r\n\r\n  get language() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model.hasOwnProperty(this.key)\r\n    ) {\r\n      if (\r\n        this.formControl.value != undefined &&\r\n        this.formControl.value != null &&\r\n        this.formControl.value != [] &&\r\n        this.formControl.value.length > 0\r\n      ) {\r\n        if (this.formControl.value != this.languageList) {\r\n          this.languageList = this.formControl.value;\r\n        }\r\n      }\r\n    }\r\n    return this.languageList;\r\n  }\r\n\r\n  onChange(value: any) {\r\n    if (this.to.required) {\r\n      let empty = this.languageList.some((item: any) => {\r\n        return (\r\n          item.resvalue === null ||\r\n          item.resvalue === \"\" ||\r\n          item.resvalue === \" \"\r\n        );\r\n      });\r\n      if (empty) {\r\n        this.formControl.setValue([]);\r\n      } else {\r\n        this.formControl.setValue(this.languageList);\r\n      }\r\n    } else {\r\n      this.formControl.setValue(this.languageList);\r\n    }\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  visibleChange(event: any) {\r\n    if (event) {\r\n      if (this.cdkOverlayOrigin !== undefined) {\r\n        this.triggerWidth =\r\n          this.cdkOverlayOrigin.elementRef.nativeElement.getBoundingClientRect()\r\n            .width -\r\n          24 +\r\n          \"px\";\r\n      }\r\n    }\r\n  }\r\n\r\n  get langText() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model[this.key] != undefined\r\n    ) {\r\n      let lang = this.model[this.key];\r\n      if (\r\n        lang != undefined &&\r\n        lang != null &&\r\n        lang != \"\" &&\r\n        lang instanceof Array &&\r\n        lang.length > 0\r\n      ) {\r\n        return lang[0][\"resvalue\"];\r\n      }\r\n      return \"\";\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-textarea\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <textarea nz-input disabled rows=\"4\"> </textarea>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <textarea\r\n          nz-input\r\n          [formControl]=\"formControl\"\r\n          class=\"form-control\"\r\n          [class.is-invalid]=\"showError\"\r\n          [vxFormAttributes]=\"field\"\r\n          rows=\"4\"\r\n        >\r\n        </textarea>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div\r\n        class=\"fieldtext\"\r\n        *ngIf=\"editor === false\"\r\n        [innerHTML]=\"text | replaceLine\"\r\n      ></div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldTextArea extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-number\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n    <div class=\"fieldOperational\">\r\n      <div class=\"fieldcheckbox\">\r\n        <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n      </div>\r\n      <div class=\"fieldControl\">\r\n        <div class=\"label\">\r\n          <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n        </div>\r\n        <div class=\"control\">\r\n          <input nz-input disabled />\r\n        </div>\r\n        <div class=\"fieldButton\">\r\n          <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n            <i class=\"icon-Edit03\"></i>ç¼è¾\r\n          </button>\r\n          <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n            <i class=\"icon-KT-Close\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"formStatus === 0\">\r\n    <ng-container *ngIf=\"editor === true\">\r\n      <nz-input-number\r\n        [formControl]=\"formControl\"\r\n        class=\"form-control\"\r\n        [vxFormAttributes]=\"field\"\r\n        [class.is-invalid]=\"showError\"\r\n        [nzPlaceHolder]=\"placeHolder\"\r\n        [nzPrecision]=\"precision\"\r\n      ></nz-input-number>\r\n      <div class=\"tips\">\r\n        <i\r\n          class=\"icon-bangzhu\"\r\n          [nzTooltipTitle]=\"tips\"\r\n          nzTooltipPlacement=\"top\"\r\n          nz-tooltip\r\n          *ngIf=\"tips != ''\"\r\n        ></i>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n  </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldNumber extends FieldType {\r\n  service: any;\r\n  \r\n  get precision(){\r\n    let result=0;\r\n    if(this.to!=undefined && this.to!=null && this.to[\"precision\"]!=undefined && this.to[\"precision\"]!=null){\r\n      result = this.to[\"precision\"];\r\n    }\r\n    return result;\r\n  }\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-password\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n  <div class=\"fieldOperational\">\r\n    <div class=\"fieldcheckbox\">\r\n      <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n    </div>\r\n    <div class=\"fieldControl\">\r\n      <div class=\"label\">\r\n        <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n      </div>\r\n      <div class=\"control\">\r\n        <input nz-input disabled />\r\n      </div>\r\n      <div class=\"fieldButton\">\r\n        <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n          <i class=\"icon-Edit03\"></i>ç¼è¾\r\n        </button>\r\n        <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n          <i class=\"icon-KT-Close\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"formStatus === 0\">\r\n  <ng-container *ngIf=\"editor === true\">\r\n    <input\r\n      nz-input\r\n      [formControl]=\"formControl\"\r\n      [vxFormAttributes]=\"field\"\r\n      [class.is-invalid]=\"showError\"\r\n      [type]=\"'password'\"\r\n    />\r\n    <div class=\"tips\">\r\n      <i\r\n        class=\"icon-bangzhu\"\r\n        [nzTooltipTitle]=\"tips\"\r\n        nzTooltipPlacement=\"top\"\r\n        nz-tooltip\r\n        *ngIf=\"tips != ''\"\r\n      ></i>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n</ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldPassWord extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n@Component({\r\n  selector: \"vxfield-radio\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <label nz-radio nzDisabled=\"true\"></label>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <label\r\n          nz-radio\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        ></label>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldRadio extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n@Component({\r\n  selector: \"vxfield-radiogroup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-radio-group\r\n              [nzName]=\"'radiogroup-' + guid\"\r\n              [formControl]=\"formControl\"\r\n              [vxFormAttributes]=\"field\"\r\n              [class.is-invalid]=\"showError\"\r\n            >\r\n              <ng-container *ngFor=\"let item of to.options\">\r\n                <label nz-radio [nzValue]=\"item.value\" nzDisabled=\"true\">{{\r\n                  item.label\r\n                }}</label>\r\n              </ng-container>\r\n            </nz-radio-group>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-radio-group\r\n          [nzName]=\"'radiogroup-' + guid\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\">\r\n            <label nz-radio [nzValue]=\"item.value\">{{ item.label }}</label>\r\n          </ng-container>\r\n        </nz-radio-group>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textSingle }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldRadioGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-checkbox\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <label nz-checkbox nzDisabled=\"true\"></label>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <label\r\n          nz-checkbox\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n        ></label>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ text }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldCheckbox extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, Guid } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-checkboxgroup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-checkbox-wrapper\r\n              style=\"width: 100%;\"\r\n              (nzOnChange)=\"onChange($event)\"\r\n              [class.is-invalid]=\"showError\"\r\n            >\r\n              <ng-container *ngFor=\"let option of to.options; let i = index\">\r\n                <label\r\n                  nz-checkbox\r\n                  [nzValue]=\"option.value\"\r\n                  [ngModel]=\"getControlChecked(formControl.value, option)\"\r\n                  [vxFormAttributes]=\"field\"\r\n                  disabled\r\n                  >{{ option.label }}</label\r\n                >\r\n              </ng-container>\r\n            </nz-checkbox-wrapper>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-checkbox-wrapper\r\n          style=\"width: 100%;\"\r\n          (nzOnChange)=\"onChange($event)\"\r\n          [class.is-invalid]=\"showError\"\r\n        >\r\n          <ng-container *ngFor=\"let option of to.options; let i = index\">\r\n            <label\r\n              nz-checkbox\r\n              [nzValue]=\"option.value\"\r\n              [ngModel]=\"getControlChecked(formControl.value, option)\"\r\n              [vxFormAttributes]=\"field\"\r\n              >{{ option.label }}</label\r\n            >\r\n          </ng-container>\r\n        </nz-checkbox-wrapper>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textMultiple }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldCheckboxGroup extends FieldType {\r\n  service: any;\r\n  guid: any = Guid.create()[\"value\"];\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  onChange(values: string[]) {\r\n    let res: any = [];\r\n    if (values != undefined && values != null && values.length > 0) {\r\n      values.forEach(value => {\r\n        if (this.to.options !== undefined && this.to.options !== null) {\r\n          this.to.options.forEach((option: any) => {\r\n            if (option[\"value\"] === value) {\r\n              res.push(value);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    this.formControl.patchValue(values);\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  getCheckStatus(option: any) {\r\n    this.formControl.value;\r\n  }\r\n\r\n  public getControlChecked(values: any, option: any) {\r\n    let result = false;\r\n    if (option && values) {\r\n      result = values.some((value: any) => {\r\n        return value == option.value;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ICheckValues {\r\n  value: any;\r\n}\r\n","import { Component, AfterViewChecked, AfterViewInit } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport { CodeSandboxOutline } from \"@ant-design/icons-angular/icons/public_api\";\r\nimport { elementAt } from \"rxjs/operators\";\r\n@Component({\r\n  selector: \"vxfield-select\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-select\r\n          nzShowSearch\r\n          nzAllowClear\r\n          [nzMode]=\"to.selecttype === 'multiple' ? 'multiple' : 'default'\"\r\n          [formControl]=\"formControl\"\r\n          [vxFormAttributes]=\"field\"\r\n          [class.is-invalid]=\"showError\"\r\n          [nzPlaceHolder]=\"placeHolder\"\r\n        >\r\n          <ng-container *ngFor=\"let item of to.options\">\r\n            <nz-option\r\n              [nzLabel]=\"item.label\"\r\n              [nzValue]=\"item.value\"\r\n            ></nz-option>\r\n          </ng-container>\r\n        </nz-select>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">\r\n        {{ getSelectText() }}\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldSelect extends FieldType implements AfterViewChecked {\r\n  service: any;\r\n  defaultValue: string = \"\";\r\n  defaultValues: string[] = [];\r\n  selecttype = \"default\";\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n  ngAfterViewChecked() {\r\n    if (this.to.selecttype === \"multiple\") {\r\n      this.selecttype = \"multiple\";\r\n      if (this.field.defaultValue && this.field.defaultValue != null) {\r\n        this.defaultValues = this.field.defaultValue.split(\",\");\r\n      }\r\n    } else {\r\n      this.defaultValue = this.field.defaultValue;\r\n    }\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  getSelectText() {\r\n    let result: string = \"\";\r\n    if (this.to && this.to.selecttype) {\r\n      if (this.to.selecttype === \"single\") {\r\n        result = this.textSingle;\r\n      } else if (this.to.selecttype === \"multiple\") {\r\n        result = this.textMultiple;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as moment_ from \"moment\";\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: \"vxfield-datetime\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\"\r\n      ><ng-container *ngIf=\"editor === true\"> \r\n          <nz-date-picker \r\n            nzShowTime\r\n            [nzFormat]=\"format\"\r\n            [formControl]=\"formControl\"\r\n            [vxFormAttributes]=\"field\"\r\n            [class.is-invalid]=\"showError\"\r\n          ></nz-date-picker>\r\n \r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ getText() }}</div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldDateTime extends FieldType {\r\n  service: any;\r\n  get format(){\r\n    let result=\"yyyy-MM-dd HH:mm:ss\"; \r\n    if(this.to[\"format\"]!=undefined && this.to[\"format\"]!=null && this.to[\"format\"]!=\"\"){\r\n      result = this.to[\"format\"];\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  getText() {\r\n    let result = \"\";\r\n    if (this.to.type != undefined && this.to.type != null) {\r\n      if (\r\n        this.model != undefined &&\r\n        this.model != null &&\r\n        this.field != undefined &&\r\n        this.field != null &&\r\n        this.field.key != undefined &&\r\n        this.field.key != null &&\r\n        this.model[this.field.key] != undefined &&\r\n        this.model[this.field.key] != null &&\r\n        this.model[this.field.key] != \"\"\r\n      ) {\r\n        switch (this.to.type) {\r\n          case \"datetime\":\r\n            result = moment(this.model[this.field.key]).format(\r\n              \"yyyy-MM-DD HH:mm:ss\"\r\n            );\r\n            break;\r\n          case \"date\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY-MM-DD\");\r\n            break;\r\n          case \"year\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY\");\r\n            break;\r\n          case \"month\":\r\n            result = moment(this.model[this.field.key]).format(\"YYYY-MM\");\r\n            break;\r\n          case \"time\":\r\n            result = moment(this.model[this.field.key]).format(\"HH:mm\");\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-image\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-avatar\r\n        nzIcon=\"user\"\r\n        nzSrc=\"//zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n      ></nz-avatar>\r\n      <div class=\"tips\">\r\n        <i\r\n          class=\"icon-bangzhu\"\r\n          [nzTooltipTitle]=\"tips\"\r\n          nzTooltipPlacement=\"top\"\r\n          nz-tooltip\r\n          *ngIf=\"tips != ''\"\r\n        ></i>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldImage extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\nimport { UploadChangeParam, UploadFile } from \"ng-zorro-antd/upload\";\r\nimport { Observable, Observer } from \"rxjs\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxfield-upload\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <nz-upload nzType=\"drag\" [nzDisabled]=\"true\">\r\n              <p class=\"ant-upload-drag-icon\"></p>\r\n              <p class=\"ant-upload-text\">åå»ææå¨æä»¶å°æ­¤åºåä¸ä¼ </p>\r\n              <p class=\"ant-upload-hint\">\r\n                æ¯æåä¸ªææ¹éä¸ä¼ ãä¸¥ç¦ä¸ä¼ ä¸æ³æä»¶ï¼è°¢è°¢!\r\n              </p>\r\n            </nz-upload>\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <nz-upload\r\n        nzType=\"drag\"\r\n        nzAction=\"https://jsonplaceholder.typicode.com/posts/\"\r\n        [nzFileList]=\"defaultFileList\"\r\n        [nzMultiple]=\"true\"\r\n        (nzChange)=\"handleChange($event)\"\r\n        [class.is-invalid]=\"showError\"\r\n      >\r\n        <p class=\"ant-upload-drag-icon\"></p>\r\n        <p class=\"ant-upload-text\">åå»ææå¨æä»¶å°æ­¤åºåä¸ä¼ </p>\r\n        <p class=\"ant-upload-hint\">\r\n          æ¯æåä¸ªææ¹éä¸ä¼ ãä¸¥ç¦ä¸ä¼ ä¸æ³æä»¶ï¼è°¢è°¢!\r\n        </p>\r\n      </nz-upload>\r\n      <div class=\"tips\"></div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldUpload extends FieldType {\r\n  service: any;\r\n  defaultFileList = [];\r\n  constructor(dyService: VXFormAntService, public msg: NzMessageService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  handleChange({ file, fileList }: UploadChangeParam): void {\r\n    debugger;\r\n    const status = file.status;\r\n    if (status !== \"uploading\") {\r\n    }\r\n    if (status === \"done\") {\r\n      let values: any = fileList.map((item: any) => {\r\n        return {\r\n          uid: item.uid,\r\n          name: item.name,\r\n          url: item.url\r\n        };\r\n      });\r\n      /* this.model[this.field.key] = values;\r\n      this.formControl.markAsTouched(); */\r\n      this.formControl.patchValue(values);\r\n      this.formControl.markAsTouched();\r\n      this.msg.success(`æä»¶${file.name} ä¸ä¼ æåï¼`);\r\n    } else if (status === \"error\") {\r\n      this.msg.error(`æä»¶${file.name} ä¸ä¼ å¤±è´¥ï¼`);\r\n    }\r\n    if (status === \"removed\") {\r\n      let values: any = this.formControl.value;\r\n      values.forEach((item: any, index: any, object: any) => {\r\n        if (item.uid === file.uid) {\r\n          object.splice(index, 1);\r\n        }\r\n      });\r\n\r\n      //this.formControl.patchValue(values);\r\n      //this.formControl.markAsTouched();\r\n      this.msg.success(`æä»¶${file.name} å é¤æåï¼`);\r\n    }\r\n  }\r\n\r\n  handleRemove = (file: any) =>\r\n    new Observable<boolean>(observer => {\r\n      observer.next(true);\r\n      observer.complete();\r\n    });\r\n\r\n  beforeUpload = (file: File) => {\r\n    return new Observable((observer: Observer<boolean>) => {\r\n      const isJPG = file.type === \"image/jpeg\";\r\n      console.log(file);\r\n      if (!this.checkFileType(file)) {\r\n        this.msg.error(\"æ¨ä¸ä¼ çæä»¶ç±»åä¸ç¬¦åè¦æ±ï¼\");\r\n        observer.complete();\r\n        return;\r\n      }\r\n      if (!this.checkFileSize(file)) {\r\n        this.msg.error(\"æ¨ä¸ä¼ çæä»¶å¤§å°å·²ç»è¶åºæå¤§è®¾ç½®\");\r\n        observer.complete();\r\n        return;\r\n      }\r\n      observer.next(true);\r\n      observer.complete();\r\n    });\r\n  };\r\n\r\n  checkFileType(file: File) {\r\n    let result: boolean = true;\r\n    if (\r\n      this.field &&\r\n      this.field.templateOptions &&\r\n      this.field.templateOptions.attachment &&\r\n      this.field.templateOptions.attachment.type\r\n    ) {\r\n      let types: any = this.field.templateOptions.attachment.type;\r\n      if (types != undefined && types != null && types != \"\") {\r\n        result = types.split(\",\").some((item: any) => {\r\n          return file.type === item;\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  checkFileSize(file: File) {\r\n    let result: boolean = true;\r\n    if (\r\n      this.field &&\r\n      this.field.templateOptions &&\r\n      this.field.templateOptions.attachment &&\r\n      this.field.templateOptions.attachment.size\r\n    ) {\r\n      let size: any = this.field.templateOptions.attachment.size;\r\n      if (size != undefined && size != null) {\r\n        result = file.size / 1024 / 1024 <= size;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NzModalService, UploadFile } from \"ng-zorro-antd\";\r\n\r\ntype ModalSizeType = \"small\" | \"medium\" | \"large\";\r\nexport interface ModalOptions {\r\n  nzContent: any; //ç»ä»¶\r\n  size: ModalSizeType; //å°/ä¸­/å¤§\r\n  nzTitle?: string; //æ é¢\r\n  primaryLabel?: string; //æé®âlabelâ,ä¸ä¼ é»è®¤ä¸ºâç¡®å®â\r\n  vertical?: boolean; //å¼¹æ¡æ¯å¦ä¸ºåç´å±ä¸­ï¼é»è®¤ä¸åç´å±ä¸­\r\n  hideBtn?: boolean; //æ¯å¦éèfooteræé®\r\n  showResetBtn?: boolean; //æ¯å¦æ¾ç¤ºéç½®æé®\r\n}\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class VXDialogService {\r\n  constructor(public modalService: NzModalService) {}\r\n  switchSize(size: any) {\r\n    const obj = {\r\n      width: 700,\r\n      height: 500\r\n    };\r\n    switch (size) {\r\n      case \"small\":\r\n        obj.width = 530;\r\n        obj.height = 400;\r\n        break;\r\n      case \"medium\":\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n      case \"large\":\r\n        obj.width = 950;\r\n        obj.height = 600;\r\n        break;\r\n      default:\r\n        obj.width = 700;\r\n        obj.height = 500;\r\n        break;\r\n    }\r\n    return obj;\r\n  }\r\n  public CreateModelDialog(\r\n    modalOptions: ModalOptions,\r\n    params: any,\r\n    callback: any\r\n  ) {\r\n    const width = this.switchSize(modalOptions.size).width;\r\n    const height = this.switchSize(modalOptions.size).height;\r\n    const modal: any = this.modalService.create({\r\n      nzTitle: modalOptions.nzTitle ? modalOptions.nzTitle : \"æç¤º\",\r\n      nzWidth: width + \"px\",\r\n      nzClosable: true,\r\n      nzMaskClosable: false,\r\n      nzWrapClassName: modalOptions[\"vertical\"] ? \"vertical-center-modal\" : \"\",\r\n      nzBodyStyle: {\r\n        padding: \"0\",\r\n        height: !modalOptions[\"hideBtn\"]\r\n          ? height - 107 + \"px\"\r\n          : height - 54 + \"px\"\r\n      },\r\n      nzContent: modalOptions.nzContent,\r\n      nzFooter: !modalOptions[\"hideBtn\"]\r\n        ? [\r\n            {\r\n              show: true,\r\n              label: \"åæ¶\",\r\n              type: \"default\",\r\n              onClick: componentInstance => {\r\n                modal.destroy();\r\n              }\r\n            },\r\n            {\r\n              show: modalOptions[\"showResetBtn\"],\r\n              label: \"éç½®\",\r\n              type: \"default\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            },\r\n            {\r\n              show: true,\r\n              label: modalOptions[\"primaryLabel\"]\r\n                ? modalOptions[\"primaryLabel\"]\r\n                : \"ç¡®å®\",\r\n              type: \"primary\",\r\n              onClick: componentInstance => callback(componentInstance, modal)\r\n            }\r\n          ]\r\n        : null,\r\n      nzOnOk: data => {},\r\n      nzOnCancel: data => {},\r\n      nzComponentParams: params\r\n    });\r\n\r\n    modal.afterClose.subscribe((result: any) => {\r\n      if (result) {\r\n        callback(result);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpResponse\r\n} from \"@angular/common/http\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { tap, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class _HttpClient {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private _loading = false;\r\n\r\n  get loading(): boolean {\r\n    return this._loading;\r\n  }\r\n\r\n  parseParams(params: any): HttpParams {\r\n    /*const newParams = {};\r\n    Object.keys(params).forEach(key => {\r\n      let _data = params[key];\r\n\r\n      newParams[key] = _data;\r\n    });*/\r\n    if (params === undefined || params === null) {\r\n      params = {};\r\n    }\r\n    return new HttpParams({ fromObject: params });\r\n  }\r\n\r\n  formEncode(obj: any) {\r\n    var encodedString = \"\";\r\n    for (var key in obj) {\r\n      if (encodedString.length !== 0) {\r\n        encodedString += \"&\";\r\n      }\r\n      encodedString += key + \"=\" + encodeURIComponent(obj[key]);\r\n    }\r\n    return encodedString;\r\n  }\r\n\r\n  appliedUrl(url: string, params?: any) {\r\n    if (!params) return url;\r\n    url += ~url.indexOf(\"?\") ? \"\" : \"?\";\r\n    const arr: string[] = [];\r\n    for (const key in params) {\r\n      arr.push(`${key}=${params[key]}`);\r\n    }\r\n    return url + arr.join(\"&\");\r\n  }\r\n\r\n  begin() {\r\n    setTimeout(() => (this._loading = true));\r\n  }\r\n\r\n  end() {\r\n    setTimeout(() => (this._loading = false));\r\n  }\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `T` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   get<T>(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<T>>;\r\n */\r\n  /**\r\n   * GETï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  get(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * GET è¯·æ±\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"GET\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #region post\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /* post<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * POSTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  post(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * POST è¯·æ±\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"POST\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * DELETEï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  delete(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * DELETE è¯·æ±\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"DELETE\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * `jsonp` è¯·æ±\r\n   *\r\n   * @param url URLå°å\r\n   * @param params è¯·æ±åæ°\r\n   * @param callbackParam CALLBACKå¼ï¼é»è®¤ï¼JSONP_CALLBACK\r\n   */\r\n  jsonp(\r\n    url: string,\r\n    params?: any,\r\n    callbackParam: string = \"JSONP_CALLBACK\"\r\n  ): Observable<any> {\r\n    return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n\r\n  // #region patch\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   patch<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>;\r\n */\r\n  /**\r\n   * PATCHï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  patch(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PATCH è¯·æ±\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PATCH\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region put\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `string` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\";\r\n      reportProgress?: boolean;\r\n      responseType: \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `HttpResponse<JSON>` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `JSON` ç±»å\r\n   */\r\n  /*   put<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"json\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<T>; */\r\n\r\n  /**\r\n   * PUTï¼è¿åä¸ä¸ª `any` ç±»å\r\n   */\r\n  put(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PUT è¯·æ±\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      reportProgress?: boolean;\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    return this.request(\r\n      \"PUT\",\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params\r\n        },\r\n        options\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request<R>(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<R>;\r\n  /**\r\n   * `request` è¯·æ±\r\n   *\r\n   * @param method è¯·æ±æ¹æ³ç±»å\r\n   * @param url URLå°å\r\n   * @param options åæ°\r\n   */\r\n  request(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: \"body\" | \"events\" | \"response\";\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: \"arraybuffer\" | \"blob\" | \"json\" | \"text\";\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    }\r\n  ): Observable<any> {\r\n    this.begin();\r\n    if (options) {\r\n      if (options.params) options.params = this.parseParams(options.params);\r\n      if (options.body) {\r\n        // options.body = this.formEncode(options.body)\r\n      }\r\n    }\r\n    return this.http.request(method, url, options).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { Observable, of } from \"rxjs\";\r\nimport { _HttpClient } from \"../net/http.client\"\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class DataService {\r\n  constructor(private _http: _HttpClient) { }\r\n\r\n  //æ ¹æ®Id|å¶ä» è·åç¸å³è¡¨ä¿¡æ¯\r\n  getBusinessTables(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  getFormInfo(url: string, params = {}): Observable<any> {\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-äººå\r\n  getSysCtrEmployee(params = {}): Observable<any> {\r\n    //let url = \"emptable.json\";\r\n    let url = this.getWebAPIName(\"employee\");\r\n    let result = this._http.get(url, params);\r\n    return result;\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-ç»ç»\r\n  getSysCtrOrgTree(params = {}): Observable<any> {\r\n    //let url = \"org-tree.json\";\r\n    let url = this.getWebAPIName(\"organization\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  //ç³»ç»æ§ä»¶-èä½\r\n  getSysCtrPostionTable(params = {}): Observable<any> {\r\n    //let url = \"postiontable.json\";\r\n    let url = this.getWebAPIName(\"postion\");\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //ç³»ç»æ§ä»¶-å°åº\r\n  getSysCtrArea(params = {}): Observable<any> {\r\n    let url = \"tables.json\";\r\n\r\n    return this._http.get(url, params);\r\n  }\r\n\r\n  //æ å½¢æ°æ®\r\n  getTreeData(params = {}): Observable<any> {\r\n    //let url = \"tree.json\";\r\n    let url = this.getWebAPIName(\"tree\");\r\n    return this._http.get(url, params);\r\n  } \r\n\r\n  getWebAPIName(type: string) {\r\n    let result = \"\";\r\n    let res = localStorage.getItem(\"VXFORM:WEBAPI\");\r\n    if (res != undefined && res != null && res != \"\") {\r\n      let webapi = JSON.parse(res);\r\n      result = webapi[type];\r\n    }\r\n    if (result == undefined || result == null) {\r\n      result = \"\";\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-tree\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormTree implements OnInit, OnChanges {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = false;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  treeData: ITreeData[] = [];\r\n  controlid: string = \"\";\r\n  selectData: ICheckedTree[] = [];\r\n\r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() {\r\n    let id = _.get(this.fieldConfig, \"templateOptions.treeid\");\r\n    if (id != undefined && id != null && id != \"\") {\r\n      this.controlid = _.get(this.fieldConfig, \"templateOptions.treeid\");\r\n    }\r\n    this.getTreeData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.defaultNode) {\r\n    }\r\n  }\r\n\r\n  //è·åTreeæ°æ®é\r\n  getTreeData() {\r\n    this.dataService.getTreeData({ id: this.controlid }).subscribe(res => {\r\n      this.treeData = res;\r\n\r\n      this.getSelectData();\r\n    });\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent, NzTreeNodeOptions } from \"ng-zorro-antd/core\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ISelectedNode, IOrgData, ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-employee\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormEmployee implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n\r\n  constructor(public dataService: DataService) { }\r\n\r\n  selectData: ICheckedTree[] = [];\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  tag: boolean = true;\r\n\r\n  //æ¯å¦è¦å¤é\r\n  check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  header: any[] = [\r\n    { \"key\": \"id\", \"name\": \"id\", \"hiden\": true },\r\n    { \"key\": \"code\", \"name\": \"å·¥å·\", \"width\": 150 },\r\n    { \"key\": \"name\", \"name\": \"å§å\", \"width\": 150 },\r\n    { \"key\": \"organization\", \"name\": \"é¨é¨\" }\r\n  ];\r\n\r\n  //table è¡æ°æ®\r\n  body: any[] = [];\r\n\r\n  buttonlist: any[] = [];\r\n\r\n  checkid: any[] = [];\r\n\r\n  query = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord: \"\"\r\n  }\r\n \r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n\r\n    console.log('[]',this.selectData)\r\n    if(this.selectData!=null && this.selectData.length>0){\r\n      this.checkid =this.selectData.map(item=>{\r\n        return {\r\n          \"id\":item.value,\r\n          \"name\":item.label\r\n        }\r\n      });\r\n    }else{\r\n      this.checkid=[];\r\n    }\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    if (this.selectType == \"multiple\") {\r\n      this.check = true;\r\n      this.action = 0;\r\n    }\r\n    if (this.selectType == \"single\") {\r\n      this.check = false;\r\n      this.action = 2;\r\n      this.header.push(\r\n        { \"key\": \"action\", \"name\": \"æä½\", \"hiden\": true, \"action\": true }\r\n      );\r\n    }\r\n    this.getEmployeeData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n\r\n  getEmployeeData() {\r\n    this.dataService.getSysCtrEmployee(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }\r\n    ).subscribe((res: any) => {\r\n      this.query.pageIndex = res.index;\r\n      this.query.total = res.total;\r\n      this.body = res.data;\r\n    });\r\n\r\n    this.getSelectData();\r\n  }\r\n\r\n  pageIndexChange(event: any) {\r\n    this.dataService.getSysCtrEmployee(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }).subscribe((res: any) => {\r\n        this.query.pageIndex = event.pageIndex;\r\n        this.query.total = res.total;\r\n        this.body = res.data;\r\n      });\r\n  }\r\n\r\n  checkChange(list: any[]) {\r\n    if (list != null && list.length > 0) {\r\n      this.selectData = list.map(item => {\r\n        return {\r\n          \"label\": item.name, \"value\": item.id\r\n        }\r\n      });\r\n    } else {\r\n      this.selectData = [];\r\n    } \r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  forwardRef,\r\n  ChangeDetectorRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport {\r\n  ISelectedNode,\r\n  IOrgData,\r\n  ITreeData,\r\n  ICheckedTree\r\n} from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\n@Component({\r\n  selector: \"vxform-org\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormOrg implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = true;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  //ç»ç»æ°æ®\r\n  data: ITreeData[] = [];\r\n  dimension: boolean = true;\r\n  selectData: ICheckedTree[] = [];\r\n  curOrgId: string = \"\";\r\n\r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n\r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  orgData: IOrgData[] = [];\r\n  treeData: ITreeData[] = [];\r\n\r\n  controlid: string = \"\";\r\n  treeid: string = \"\";\r\n\r\n\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  selectedKey: any[] = [];\r\n  skeletonStatus: number = 0;\r\n\r\n\r\n  constructor(public dataService: DataService, private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    let orgControl = _.get(this.fieldConfig, \"templateOptions.controlid\");\r\n    if (orgControl != undefined && orgControl != null && orgControl != \"\") {\r\n      this.controlid = _.get(this.fieldConfig, \"templateOptions.controlid\");\r\n    }\r\n    this.getOrgData();\r\n  }\r\n\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges) { }\r\n\r\n  //è·åç»ç»æ°æ®é\r\n  getOrgData() {\r\n    this.dataService.getSysCtrOrgTree().subscribe((res: any) => {\r\n      this.data = res;\r\n      if (this.data != null && this.data.length > 0) {\r\n          if(this.data[0].children!=undefined){\r\n          this.curOrgId = this.data[0].key;\r\n          this.treeData = this.data[0].children;\r\n        }\r\n      }\r\n      this.getTreeSelectData();\r\n    });\r\n  }\r\n\r\n  getTreeSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n  }\r\n\r\n  orgChange(event: any) {\r\n    this.data.forEach((item: any) => {\r\n      if (item.key === event) {\r\n        this.treeData = item.children;\r\n      }\r\n    });\r\n    this.selectData.forEach((item: any) => {\r\n      this.setTreeChecked(this.data, item.value);\r\n    });\r\n  }\r\n\r\n  treeChange(event: any) {\r\n    if (this.dimension) {\r\n      this.data.forEach((item: any) => {\r\n        this.setTreeUnChecked(item.children, event.delete);\r\n      });\r\n    }\r\n    this.treeChangeEvent.emit(this.selectData);\r\n  }\r\n\r\n  setTreeUnChecked(tree: ITreeData[], key: string) {\r\n    if (tree && tree.length > 0) {\r\n      tree.forEach((item: any) => {\r\n        if (item.key === key) {\r\n          item.checked = false;\r\n        } else {\r\n          if (item.children && item.children.length > 0) {\r\n            this.setTreeUnChecked(item.children, key);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  setTreeChecked(tree: ITreeData[], key: string) {\r\n    if (tree && tree.length > 0) {\r\n      tree.forEach((item: any) => {\r\n        if (item.key === key) {\r\n          item.checked = true;\r\n        } else {\r\n          if (item.children && item.children.length > 0) {\r\n            this.setTreeChecked(item.children, key);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\nimport { ITreeData, ICheckedTree } from \"../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-postion\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormPostion implements OnInit {\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n  @Input() tag: boolean = false;\r\n  @Output() treeChangeEvent = new EventEmitter<any>();\r\n\r\n  treeData: ITreeData[] = [];\r\n\r\n  controlid: string = \"\";\r\n  orgid:string =\"\";\r\n\r\n  selectData: ICheckedTree[] = [];\r\n   \r\n  //éæ©èç¹\r\n  get selectedNode() {\r\n    return _.cloneDeep(this.selectData);\r\n  }\r\n \r\n\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() { \r\n    this.getOrgData(); \r\n    this.action = 2;\r\n    if (this.selectType == \"multiple\") {\r\n      this.check = true;\r\n      this.action = 0;\r\n    }\r\n    if (this.selectType == \"single\") {\r\n      this.check = false;\r\n      this.action = 2;\r\n      this.header.push(\r\n        { \"key\": \"action\", \"name\": \"æä½\", \"hiden\": true, \"action\": true }\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.defaultNode) {\r\n    }\r\n  }\r\n\r\n  //è·åOrgæ°æ®é\r\n  getOrgData() {\r\n    this.dataService.getTreeData({ id: this.controlid }).subscribe(res => {\r\n      this.treeData = res;  \r\n      this.getSelectData();\r\n    });\r\n  } \r\n\r\n  ////\r\n  //æ¯å¦è¦å¤é\r\n  check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  header: any[] = [\r\n    { \"key\": \"id\", \"name\": \"id\", \"hiden\": true },\r\n    { \"key\": \"code\", \"name\": \"èä½ç¼ç \", \"width\": 100 },\r\n    { \"key\": \"name\", \"name\": \"èä½åç§°\", \"width\": 150 },\r\n    { \"key\": \"number\", \"name\": \"å¨èäººæ°\", \"width\": 80  },\r\n    { \"key\": \"parent\", \"name\": \"ä¸çº§èä½\" }\r\n  ];\r\n\r\n  //table è¡æ°æ®\r\n  body: any[] = [];\r\n\r\n  buttonlist: any[] = [];\r\n\r\n  checkid: any[] = [];\r\n\r\n  query = {\r\n    total: 0,\r\n    pageIndex: 1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord: \"\"\r\n  }\r\n \r\n  get selectType() {\r\n    let res = \"\";\r\n    if (\r\n      this.fieldConfig != undefined &&\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.templateOptions != undefined &&\r\n      this.fieldConfig.templateOptions != null &&\r\n      this.fieldConfig.templateOptions.selectType != undefined\r\n    ) {\r\n      res = this.fieldConfig.templateOptions.selectType;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  getSelectData() {\r\n    if (\r\n      this.fieldConfig != null &&\r\n      this.fieldConfig.model != undefined &&\r\n      this.fieldConfig.model != null &&\r\n      this.fieldConfig.key != undefined &&\r\n      this.fieldConfig.key != null &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != undefined &&\r\n      this.fieldConfig.model[this.fieldConfig.key] != null\r\n    ) {\r\n      this.selectData = _.cloneDeep(\r\n        this.fieldConfig.model[this.fieldConfig.key]\r\n      );\r\n    }\r\n \r\n    if(this.selectData!=null && this.selectData.length>0){\r\n      this.checkid =this.selectData.map(item=>{\r\n        return {\r\n          \"id\":item.value,\r\n          \"name\":item.label\r\n        }\r\n      });\r\n    }else{\r\n      this.checkid=[];\r\n    }\r\n  }\r\n\r\n \r\n  getPostionData() {\r\n    this.dataService.getSysCtrPostionTable(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }\r\n    ).subscribe((res: any) => {\r\n      this.query.pageIndex = res.index;\r\n      this.query.total = res.total;\r\n      this.body = res.data;\r\n    });\r\n\r\n    this.getSelectData();\r\n  }\r\n\r\n  pageIndexChange(event: any) {\r\n    this.dataService.getSysCtrPostionTable(\r\n      {\r\n        keyWord: this.query.keyWord,\r\n        pageIndex: this.query.pageIndex,\r\n        pageSize: this.query.pageSize\r\n      }).subscribe((res: any) => { \r\n        this.query.pageIndex = event.pageIndex;\r\n        this.query.total = res.total;\r\n        this.body = res.data;\r\n      });\r\n  }\r\n\r\n  checkChange(list: any[]) {\r\n    if (list != null && list.length > 0) {\r\n      this.selectData = list.map(item => {\r\n        return {\r\n          \"label\": item.name, \"value\": item.id\r\n        }\r\n      });\r\n    } else {\r\n      this.selectData = [];\r\n    }\r\n  }\r\n\r\n  orgChange(event:any){ \r\n    if(event!=null && event!=undefined && event.checkData!=undefined && event.checkData.length>0){\r\n      this.orgid = event.checkData[0].value;\r\n      this.getPostionData();\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output, ViewChild } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent, NzTreeNodeOptions } from \"ng-zorro-antd/core\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig\r\n} from \"@vx-form/core\";\r\nimport { DataService } from \"../../service/data.service\";\r\n\r\n@Component({\r\n  selector: \"vxform-area\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormArea implements OnInit {\r\n  @Output() fieldConfig: VXFormFieldConfig = {};\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  nodes = [];\r\n  constructor(public dataService: DataService) {}\r\n\r\n  ngOnInit() {\r\n    this.dataService.getTreeData().subscribe((res: any) => {\r\n      this.nodes = res;\r\n    });\r\n  }\r\n  nzEvent(event: NzFormatEmitEvent): void {}\r\n  submitForm() {}\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { VXDialogService } from \"../service/dialog.service\";\r\n\r\n\r\nimport { VXFormTree } from \"../components/tree/index.component\";\r\nimport { VXFormEmployee } from \"../components/employee/index.component\";\r\nimport { VXFormOrg } from \"../components/org/index.component\";\r\nimport { VXFormPostion } from \"../components/postion/index.component\";\r\nimport { VXFormArea } from \"../components/area/index.component\";\r\n\r\n@Component({\r\n  selector: \"vxfield-lookup\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"label\">\r\n            <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n          </div>\r\n          <div class=\"control\">\r\n            <input nz-input disabled />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n              <i class=\"icon-Edit03\"></i>ç¼è¾\r\n            </button>\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n              <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <ng-container *ngIf=\"editor === true\">\r\n        <nz-input-group [nzSuffix]=\"suffixTemplate\">\r\n          <input\r\n            nz-input\r\n            [class.is-invalid]=\"showError\"\r\n            [placeholder]=\"placeHolder\"\r\n            [value]=\"textLookUp\"\r\n            readonly=\"true\"\r\n          />\r\n        </nz-input-group>\r\n        <div class=\"tips\">\r\n          <i\r\n            class=\"icon-bangzhu\"\r\n            [nzTooltipTitle]=\"tips\"\r\n            nzTooltipPlacement=\"top\"\r\n            nz-tooltip\r\n            *ngIf=\"tips != ''\"\r\n          ></i>\r\n        </div>\r\n\r\n        <nz-input-group [nzSuffix]=\"suffixTemplate\" style=\"display:none;\">\r\n          <input\r\n            nz-input\r\n            [formControl]=\"formControl\"\r\n            [vxFormAttributes]=\"field\"\r\n            [class.is-invalid]=\"showError\"\r\n            readonly=\"true\"\r\n        /></nz-input-group>\r\n      </ng-container>\r\n\r\n      <div class=\"fieldtext\" *ngIf=\"editor === false\">{{ textLookUp }}</div>\r\n    </ng-container>\r\n    <ng-template #suffixTemplate>\r\n      <i (click)=\"lookup()\" class=\"icon-tianjin\"></i>\r\n      <!--<i\r\n        nz-icon\r\n        nzType=\"close\"\r\n        nzTheme=\"outline\"\r\n        (click)=\"removeValue()\"\r\n        *ngIf=\"textLookUp != null && textLookUp != ''\"\r\n      ></i>-->\r\n    </ng-template>\r\n  `\r\n})\r\nexport class VXFormFieldLookUp extends FieldType {\r\n  service: any;\r\n\r\n  constructor(\r\n    dyService: VXFormAntService,\r\n    private modal: NzModalService,\r\n    public vxDialogService: VXDialogService\r\n  ) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  lookup() {\r\n    let template: any;\r\n    let type = _.get(this.field, \"templateOptions.type\");\r\n    let para = {\r\n      fieldConfig: this.field,\r\n      tag: false\r\n    };\r\n    switch (type) {\r\n      case \"tree\":\r\n        template = VXFormTree;\r\n        para.tag = true;\r\n        break;\r\n        break;\r\n      case \"employee\":\r\n        template = VXFormEmployee;\r\n        break;\r\n      case \"organizational\":\r\n        template = VXFormOrg;\r\n        para.tag = true;\r\n        break;\r\n      case \"position\":\r\n        template = VXFormPostion;\r\n        break;\r\n      case \"area\": \r\n        template = VXFormArea;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (template) {\r\n      this.vxDialogService.CreateModelDialog(\r\n        {\r\n          nzTitle: \"éæ© - \"+this.to[\"label\"],\r\n          size: \"large\",\r\n          nzContent: template\r\n        },\r\n        para,\r\n        (instance: any, modal: any) => {\r\n          let res: any = instance.selectedNode;\r\n          if (\r\n            this.model != undefined &&\r\n            this.model != null &&\r\n            this.key != undefined &&\r\n            this.key != null\r\n          ) { \r\n            if (res != null && res.length>0) {\r\n              this.model[this.key] = res;\r\n\r\n              this.formControl.markAsTouched();\r\n            } else {\r\n              this.model[this.key] = [];\r\n\r\n              this.formControl.markAsTouched();\r\n            }\r\n          } else {\r\n            this.model[this.key] = res;\r\n\r\n            this.formControl.markAsTouched();\r\n          }\r\n          modal.destroy();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  removeValue() {\r\n    if (\r\n      this.model != undefined &&\r\n      this.model != null &&\r\n      this.key != undefined &&\r\n      this.key != null &&\r\n      this.model[this.key] != undefined &&\r\n      this.model[this.key] != null\r\n    ) {\r\n      this.model[this.key] = [];\r\n\r\n      this.formControl.markAsTouched();\r\n    }\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-html\",\r\n  template: `\r\n  <ng-container *ngIf=\"formStatus !== 0\">\r\n  <div class=\"fieldOperational\">\r\n    <div class=\"fieldcheckbox\">\r\n      <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n    </div>\r\n    <div class=\"fieldControl\">\r\n      <div class=\"control\">\r\n        {{ to.description }}\r\n      </div>\r\n      <div class=\"fieldButton\">\r\n        <button class=\"btnEdit\" (click)=\"fieldOperational('edit')\">\r\n          <i class=\"icon-Edit03\"></i>ç¼è¾\r\n        </button>\r\n        <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n           <i class=\"icon-KT-Close\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"formStatus === 0\">\r\n  <div class=\"fieldcontrol\">{{ to.description }}</div>\r\n</ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldHTML extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType, FieldArrayType } from \"@vx-form/core\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxfield-line\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        <div class=\"fieldControl\">\r\n          <div class=\"control\">\r\n            <hr />\r\n          </div>\r\n          <div class=\"fieldButton\">\r\n            <button class=\"btnDel\" (click)=\"fieldOperational('delete')\">\r\n               <i class=\"icon-KT-Close\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div class=\"fieldContent\">\r\n        <div class=\"fieldcontrol\">\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormFieldLine extends FieldType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldWrapper } from \"@vx-form/core\";\r\n\r\n@Component({\r\n  selector: \"vxfield-wrapper\",\r\n  template: `\r\n    <ng-container\r\n      *ngIf=\"formStatus !== 0 || field.type == 'line' || field.type == 'html'\"\r\n    >\r\n      <ng-template #fieldComponent></ng-template>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngIf=\"formStatus === 0 && field.type != 'line' && field.type != 'html'\"\r\n    >\r\n      <div class=\"fieldlabel\">\r\n        <span *ngIf=\"to.required\">*</span>{{ to.label }}\r\n      </div>\r\n      <div class=\"fieldcontrol\" [class.has-error]=\"showError\">\r\n        <ng-template #fieldComponent></ng-template>\r\n        <div class=\"invalid-feedback\" [style.display]=\"'block'\">\r\n          <vxform-validation-message\r\n            *ngIf=\"showError\"\r\n            style=\"color:red\"\r\n            [field]=\"field\"\r\n          ></vxform-validation-message>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class VXFormWrapperFormField extends FieldWrapper {}\r\n","import { Component } from \"@angular/core\";\r\nimport { FieldType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"group\",\r\n  template: `\r\n    <vxform-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></vxform-field>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldGroup extends FieldType {}\r\n","import { Component, AfterViewChecked, AfterViewInit } from \"@angular/core\";\r\nimport { FieldArrayType } from \"@vx-form/core\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXFormAntService } from \"../tools/service\";\r\n\r\n@Component({\r\n  selector: \"vxform-repeat\",\r\n  template: `\r\n    <ng-container *ngIf=\"formStatus !== 0\">\r\n      <div class=\"fieldOperational\">\r\n        <!--\r\n        <div class=\"fieldcheckbox\">\r\n          <label nz-checkbox [(ngModel)]=\"field.checked\"></label>\r\n        </div>\r\n        -->\r\n        <div class=\"reportControl\">\r\n          <div class=\"report-header\">\r\n            <div class=\"left\">\r\n              <ul>\r\n                <li><label nz-checkbox [(ngModel)]=\"field.checked\"></label></li>\r\n                <li (click)=\"groupOperational('item')\">\r\n                  <i class=\"icon-TianJiaZiDuan\"></i>æ·»å å­æ®µ\r\n                </li>\r\n                <li (click)=\"groupOperational('remark')\">\r\n                  <i class=\"icon-other-WenBen\"></i>æ·»å ææ¬\r\n                </li>\r\n                <li (click)=\"groupOperational('line')\">\r\n                  <i class=\"icon-FenGeXian\"></i>æ·»å åå²çº¿\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"right\">\r\n              <ul>\r\n                <li (click)=\"groupOperational('delete')\">\r\n                  <i class=\"icon-N_delete2\"></i>å é¤\r\n                </li>\r\n                <li (click)=\"groupOperational('up')\">\r\n                  <i class=\"icon-ShangYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"groupOperational('down')\">\r\n                  <i class=\"icon-XiaYi\"></i>ä¸ç§»\r\n                </li>\r\n                <li (click)=\"fieldOperational('delete')\">\r\n                  <button class=\"btnDel\">\r\n                    <i class=\"icon-KT-Close\"></i>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div class=\"report-body\">\r\n            <ng-container *ngFor=\"let field of field.fieldGroup; let i = index\">\r\n              <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"formStatus === 0\">\r\n      <div *ngFor=\"let field of field.fieldGroup; let i = index\" class=\"row\">\r\n        <vxform-field class=\"col\" [field]=\"field\"></vxform-field>\r\n\r\n        <span (click)=\"delete(i)\" class=\"del\">å é¤</span>\r\n\r\n        <div class=\"tips\"></div>\r\n      </div>\r\n      <div class=\"add\">\r\n        <span (click)=\"add()\">æ°å¢</span>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  host: {\r\n    \"[class]\": 'field.className || \"\"',\r\n    cdkDrag: \"\"\r\n  }\r\n})\r\nexport class VXFormFieldRepeat extends FieldArrayType {\r\n  service: any;\r\n\r\n  constructor(dyService: VXFormAntService) {\r\n    super();\r\n    this.service = dyService;\r\n  }\r\n\r\n  fieldOperational(sign: string) {\r\n    this.service.fieldOperational(sign, this.field);\r\n  }\r\n\r\n  groupOperational(type: string) {\r\n    this.service.groupOperational(type, this.field);\r\n  }\r\n\r\n  delete(i: any) {\r\n    if (this.field.fieldGroup && this.field.fieldGroup.length > 1) {\r\n      this.remove(i);\r\n    } else {\r\n    }\r\n  }\r\n}\r\n","import { ConfigOption } from \"@vx-form/core\";\r\nimport { \r\n  VXFormFieldText,\r\n  VXFormFieldTextI18n,\r\n  VXFormFieldTextArea,\r\n  VXFormFieldNumber,\r\n  VXFormFieldPassWord,\r\n  VXFormFieldRadio,\r\n  VXFormFieldRadioGroup,\r\n  VXFormFieldCheckbox,\r\n  VXFormFieldCheckboxGroup,\r\n  VXFormFieldSelect,\r\n  VXFormFieldDateTime,\r\n  VXFormFieldImage,\r\n  VXFormFieldUpload,\r\n  VXFormFieldLookUp,\r\n  VXFormFieldHTML,\r\n  VXFormFieldLine\r\n\r\n} from \"./types/types\";\r\nimport { VXFormWrapperFormField } from \"./wrappers/wrappers\";\r\nimport { VXFormFieldGroup } from \"./templates/group\";\r\nimport { VXFormFieldRepeat } from \"./templates/repeat\";\r\n\r\nexport const FIELD_TYPE_COMPONENTS = [\r\n  // types\r\n  VXFormFieldText,\r\n  VXFormFieldTextI18n,\r\n  VXFormFieldTextArea,\r\n  VXFormFieldNumber,\r\n  VXFormFieldPassWord,\r\n  VXFormFieldRadio,\r\n  VXFormFieldRadioGroup,\r\n  VXFormFieldCheckbox,\r\n  VXFormFieldCheckboxGroup,\r\n  VXFormFieldSelect,\r\n  VXFormFieldDateTime,\r\n  VXFormFieldImage,\r\n  VXFormFieldUpload,\r\n  VXFormFieldLookUp,\r\n  VXFormFieldHTML,\r\n  VXFormFieldLine,\r\n\r\n  //templates\r\n  VXFormFieldGroup,\r\n  VXFormFieldRepeat,\r\n\r\n  // wrappers\r\n  VXFormWrapperFormField\r\n];\r\n\r\nexport const BOOTSTRAP_VXFORM_CONFIG: ConfigOption = {\r\n  types: [\r\n    {\r\n      name: \"text\",\r\n      component: VXFormFieldText,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"texti18n\",\r\n      component: VXFormFieldTextI18n,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"textarea\",\r\n      component: VXFormFieldTextArea,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"number\",\r\n      component: VXFormFieldNumber,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"password\",\r\n      component: VXFormFieldPassWord,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"radio\",\r\n      component: VXFormFieldRadio,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"radiogroup\",\r\n      component: VXFormFieldRadioGroup,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"checkbox\",\r\n      component: VXFormFieldCheckbox,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"checkboxgroup\",\r\n      component: VXFormFieldCheckboxGroup,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"select\",\r\n      component: VXFormFieldSelect,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"datetime\",\r\n      component: VXFormFieldDateTime,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"image\",\r\n      component: VXFormFieldImage,\r\n      wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"upload\",\r\n      component: VXFormFieldUpload,\r\n      wrappers: [\"form-field\"]\r\n    }, \r\n    {\r\n      name: \"lookup\",\r\n      component: VXFormFieldLookUp,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"html\",\r\n      component: VXFormFieldHTML,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    {\r\n      name: \"line\",\r\n      component: VXFormFieldLine,\r\n      wrappers: [\"form-field\"]\r\n    },\r\n    { name: \"group\", component: VXFormFieldGroup },\r\n    { name: \"repeat\", component: VXFormFieldRepeat }\r\n  ],\r\n  wrappers: [{ name: \"form-field\", component: VXFormWrapperFormField }]\r\n};\r\n","import { VXFormFieldConfig } from \"@vx-form/core\";\r\nimport * as _ from \"lodash\";\r\nexport function getFieldPro(field: VXFormFieldConfig, key: string) {\r\n  return _.get(field, \"templateOptions.\" + key + \"\");\r\n}\r\nexport function requiredValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}ä¸è½ä¸ºç©º`;\r\n}\r\nexport function minlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"minLength\"\r\n  )}`;\r\n}\r\nexport function maxlengthValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§é¿åº¦ä¸º${getFieldPro(\r\n    field,\r\n    \"maxLength\"\r\n  )}`;\r\n}\r\nexport function minValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå°å¼ä¸º${getFieldPro(field, \"min\")}`;\r\n}\r\nexport function maxValidationMessage(err: any, field: VXFormFieldConfig) {\r\n  return `${getFieldPro(field, \"label\")}æå¤§å¼ä¸º${getFieldPro(field, \"max\")}`;\r\n}\r\n\r\nexport let validationConfig = {\r\n  validationMessages: [\r\n    { name: \"required\", message: requiredValidationMessage },\r\n    { name: \"null\", message: \"ä¸è½ä¸ºNULL\" },\r\n    { name: \"minlength\", message: minlengthValidationMessage },\r\n    { name: \"maxlength\", message: maxlengthValidationMessage },\r\n    { name: \"min\", message: minValidationMessage },\r\n    { name: \"max\", message: maxValidationMessage },\r\n    { name: \"multipleOf\", message: \"ssss\" },\r\n    { name: \"exclusiveMinimum\", message: \"ssss\" },\r\n    { name: \"exclusiveMaximum\", message: \"ssss\" },\r\n    { name: \"minItems\", message: \"ssss\" },\r\n    { name: \"maxItems\", message: \"ssss\" },\r\n    { name: \"uniqueItems\", message: \"should NOT have duplicate items\" },\r\n    { name: \"const\", message: \"ssss\" },\r\n    { name: \"pattern\", message: \"ä¸æ»¡è¶³è¿åè¡¨è¾¾å¼\" }\r\n  ],\r\n  types: [\r\n    // { name: \"string\", extends: \"input\" },\r\n    // {\r\n    //   name: \"number\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // {\r\n    //   name: \"integer\",\r\n    //   extends: \"input\",\r\n    //   defaultOptions: {\r\n    //     templateOptions: {\r\n    //       type: \"number\"\r\n    //     }\r\n    //   }\r\n    // },\r\n    // { name: \"boolean\", extends: \"checkbox\" },\r\n    // { name: \"enum\", extends: \"select\" },\r\n     { name: \"array\", extends: \"array\" },\r\n     { name: \"object\", extends: \"object\" }\r\n  ]\r\n};\r\n","import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig } from \"@vx-form/core\";\r\n\r\n@Injectable()\r\nexport class VXToFormFieldService {\r\n  constructor() { }\r\n\r\n  getVXFiledFunction(tableField: VXTableFieldConfig) {\r\n    let field: VXFormFieldConfig = {};\r\n    let fun: any;\r\n    switch (tableField.datatype) {\r\n      case \"text\":\r\n        field = this.text(tableField); \r\n        break;\r\n      case \"texti18n\":\r\n        field = this.textI18N(tableField);\r\n        break;\r\n      case \"textarea\":\r\n        field = this.textArea(tableField);\r\n        break;\r\n      case \"number\":\r\n        field = this.number(tableField);\r\n        break;\r\n      case \"password\":\r\n        field = this.passWord(tableField);\r\n        break;\r\n      case \"radio\":\r\n        field = this.radio(tableField);\r\n        break;\r\n      case \"checkbox\":\r\n        field = this.checkbox(tableField);\r\n        break;\r\n      case \"select\":\r\n        field = this.select(tableField);\r\n        break;\r\n      case \"datetime\":\r\n        field = this.datetime(tableField);\r\n        break;\r\n      case \"image\":\r\n        field = this.image(tableField);\r\n        break;\r\n      case \"upload\":\r\n        field = this.upload(tableField);\r\n        break;\r\n      case \"lookup\":\r\n        field = this.lookup(tableField);\r\n        break;\r\n      case \"html\":\r\n        field = this.html(tableField);\r\n        break;\r\n\r\n    }\r\n    /*if (tableField.refdatasourcetype === \"directinput\") {\r\n      fun = tableField.refdatasourcetype + \"_\" + tableField.datatype;\r\n      switch (fun) {\r\n        case \"directinput_nvarchar\":\r\n          field = this.directinput_nvarchar(tableField);\r\n          break;\r\n        case \"directinput_multilinetext\":\r\n          field = this.directinput_multilinetext(tableField);\r\n          break;\r\n        case \"directinput_int\":\r\n          field = this.directinput_int(tableField);\r\n          break;\r\n        case \"directinput_float\":\r\n          field = this.directinput_float(tableField);\r\n          break;\r\n        case \"directinput_datetime\":\r\n          field = this.directinput_datetime(tableField);\r\n          break;\r\n        case \"directinput_date\":\r\n          field = this.directinput_date(tableField);\r\n          break;\r\n        case \"directinput_month\":\r\n          field = this.directinput_month(tableField);\r\n          break;\r\n        case \"directinput_year\":\r\n          field = this.directinput_year(tableField);\r\n          break;\r\n        case \"directinput_time\":\r\n          field = this.directinput_time(tableField);\r\n          break;\r\n        case \"directinput_attachment\":\r\n          field = this.directinput_attachment(tableField);\r\n          break;\r\n        case \"directinput_image\":\r\n          field = this.directinput_image(tableField);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      fun = tableField.refdatasourcetype;\r\n      switch (fun) {\r\n        case \"refparameters\":\r\n          field = this.refparameters(tableField);\r\n          break;\r\n        case \"treeparameters\":\r\n          field = this.treeparameters(tableField);\r\n          break;\r\n        case \"systemcontrol\":\r\n          field = this.systemcontrol(tableField);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    */\r\n    return field;\r\n  }\r\n\r\n  //1ãå­ç¬¦ä¸²\r\n  text(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"text\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n        refdatasourcetype: \"directinput\",\r\n        datatype: \"nvarchar\"\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //2ãå¤è¯­è¨\r\n  textI18N(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"text\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //3ãå¤è¡ææ¬\r\n  textArea(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"textarea\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //4ãæ°å­\r\n  number(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"number\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        max: field.max,\r\n        min: field.min,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern,\r\n        precision: field.precision\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //5ãå¯ç \r\n  passWord(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"password\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        maxLength: field.maxlength,\r\n        minLength: field.minlength,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //6ãåé\r\n  radio(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"radio\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //7ãå¤é\r\n  checkbox(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"checkbox\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //8ãä¸æ\r\n  select(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"select\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: field.showtype,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        selecttype: field.selecttype,\r\n        parameterid: field.parameterid,\r\n        options: field.parameterdata,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //9ãæ¥æ\r\n  datetime(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"datetime\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        type: \"datetime\",\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern,\r\n        format: field.format\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //10ãå¾ç\r\n  image(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"image\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //11ãéä»¶\r\n  upload(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"upload\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      templateOptions: {\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        attachment: {\r\n          size: field.attachmentsize,\r\n          type: field.attachmenttype,\r\n          limit: field.attachmentlimit\r\n        },\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n\r\n    return config;\r\n  }\r\n\r\n  //12ãå¼¹æ¡\r\n  lookup(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"lookup\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultValue: field.defaultvalue,\r\n      defaultText: field.defaulttext,\r\n      templateOptions: {\r\n        type: field.controlid,\r\n        label: field.fieldname,\r\n        required: field.allownull,\r\n        controlid: field.controlid,\r\n        placeholder: field.placeholder,\r\n        isbutintin: field.isbutintin,\r\n        tips: field.tips,\r\n        pattern: field.pattern\r\n      },\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  //13ãhtml\r\n  html(field: VXTableFieldConfig) {\r\n    let config: VXFormFieldConfig = {\r\n      type: \"html\",\r\n      tablecode: field.tablecode,\r\n      key: field.fieldcode,\r\n      origin: {\r\n      },\r\n      defaultText: field.defaulttext,\r\n      status: 1\r\n    };\r\n    return config;\r\n  }\r\n\r\n  // //ç´æ¥è¾å¥-1ãå­ç¬¦\r\n  // directinput_nvarchar(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"input\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"nvarchar\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       maxLength: field.maxlength,\r\n  //       minLength: field.minlength,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-2ãå¤è¡ææ¬\r\n  // directinput_multilinetext(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"textarea\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"multilinetext\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       maxLength: field.maxlength,\r\n  //       minLength: field.minlength,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-3ãæ´æ°\r\n  // directinput_int(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"inputnumber\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"int\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       max: field.max,\r\n  //       min: field.min,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-4ãæµ®ç¹\r\n  // directinput_float(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"inputnumber\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"float\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       max: field.max,\r\n  //       min: field.min,\r\n  //       precision: field.precision,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-5ãæ¥æï¼å¹´ææ¥æ¶åï¼\r\n  // directinput_datetime(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"datetime\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"datetime\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-6ãæ¥æï¼å¹´ææ¥ï¼\r\n  // directinput_date(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"date\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"date\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-7ãæ¥æï¼å¹´æï¼\r\n  // directinput_month(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"month\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"month\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-8ãæ¥æï¼å¹´ï¼\r\n  // directinput_year(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"year\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"year\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-9ãæ¥æï¼æ¶åç§ï¼\r\n  // directinput_time(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"datepicker\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"time\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: \"time\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-10ãéä»¶\r\n  // directinput_attachment(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"upload\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"attachment\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       attachment: {\r\n  //         size: field.attachmentsize,\r\n  //         type: field.attachmenttype,\r\n  //         limit: field.attachmentlimit\r\n  //       },\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç´æ¥è¾å¥-11ãå¾ç\r\n  // directinput_image(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"image\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"directinput\",\r\n  //       datatype: \"image\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //å¸¸ç¨åæ°\r\n  // refparameters(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"select\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"refparameters\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     templateOptions: {\r\n  //       type: field.showtype,\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       selecttype: field.selecttype,\r\n  //       parameterid: field.parameterid,\r\n  //       options: field.parameterdata,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //æ å½¢åæ°\r\n  // treeparameters(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"lookup\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"treeparameters\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     defaultText: field.defaulttext,\r\n  //     templateOptions: {\r\n  //       type: \"tree\",\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       selecttype: field.selecttype,\r\n  //       treeid: field.treeid,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n\r\n  // //ç³»ç»æ§ä»¶\r\n  // systemcontrol(field: VXTableFieldConfig) {\r\n  //   let config: VXFormFieldConfig = {\r\n  //     type: \"lookup\",\r\n  //     tablecode: field.tablecode,\r\n  //     key: field.fieldcode,\r\n  //     origin: {\r\n  //       refdatasourcetype: \"systemcontrol\"\r\n  //     },\r\n  //     defaultValue: field.defaultvalue,\r\n  //     defaultText: field.defaulttext,\r\n  //     templateOptions: {\r\n  //       type: field.controlid,\r\n  //       label: field.fieldname,\r\n  //       required: field.allownull,\r\n  //       controlid: field.controlid,\r\n  //       placeholder: field.placeholder,\r\n  //       isbutintin: field.isbutintin,\r\n  //       tips: field.tips,\r\n  //       pattern: field.pattern\r\n  //     },\r\n  //     status: 1\r\n  //   };\r\n  //   return config;\r\n  // }\r\n}\r\n","import { Injectable, EventEmitter, Inject, forwardRef } from \"@angular/core\";\r\nimport { VXTableFieldConfig, VXFormFieldConfig, clone } from \"@vx-form/core\";\r\nimport { VXTableBusiness } from \"./util\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\nimport { min } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class VXAntCommonService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  private findFieldConfig: any = {};\r\n  //æ ¹æ®Guidè·åField\r\n  getFormFieldByGuid(formFieldConfig: VXFormFieldConfig[], guid: string) {\r\n    if (formFieldConfig.length) {\r\n      formFieldConfig.forEach((item, index, object) => {\r\n        if (item.guid === guid) {\r\n          this.findFieldConfig = item;\r\n        }\r\n        if (item.type === \"repeat\") {\r\n          if (\r\n            item.fieldArray &&\r\n            item.fieldArray &&\r\n            item.fieldArray.fieldGroup &&\r\n            item.fieldArray.fieldGroup.length > 0\r\n          ) {\r\n            this.getFormFieldByGuid(item.fieldArray.fieldGroup, guid);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return this.findFieldConfig;\r\n  }\r\n}\r\n","import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  VXTableFieldConfig,\r\n  VXFormFieldConfig,\r\n  Guid,\r\n  clone\r\n} from \"@vx-form/core\";\r\nimport { FormLayout, ICheckedField, IBusinessTable } from \"./util\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Injectable()\r\nexport class VXTransferService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  transferLineToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[]\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldLineInfo();\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferLabelToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[]\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldRemarkInfo();\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferGroupToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[],\r\n    tableCode: string\r\n  ) {\r\n    let obj: VXFormFieldConfig = this.getFieldGroupInfo();\r\n    obj.tablecode = tableCode;\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      form_fields.splice(checkedField.index + 1, 0, obj);\r\n    } else {\r\n      form_fields.push(obj);\r\n    }\r\n  }\r\n\r\n  transferSelectFieldToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    checkedFields: ICheckedField[],\r\n    businessTable: IBusinessTable,\r\n    obj: any\r\n  ) {\r\n    let selectFields: any = [];\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    let addFields: VXFormFieldConfig[] = [];\r\n    let beginIndex: number = 0;\r\n    Object.getOwnPropertyNames(obj).forEach(item => {\r\n      if (obj[item]) {\r\n        selectFields.push(item);\r\n      }\r\n    });\r\n    if (!selectFields || selectFields.length < 1) return; \r\n    tableFields = this.getTableFiledList(businessTable);\r\n\r\n    if (!tableFields || tableFields.length < 1) return;\r\n\r\n    if (form_fields && form_fields.length > 0) {\r\n      beginIndex = form_fields.length;\r\n    }\r\n\r\n    selectFields.forEach((key: any) => {\r\n      let tableField: VXTableFieldConfig = this.getTableFiledInfo(\r\n        key,\r\n        tableFields\r\n      );\r\n      if (tableField != null) {\r\n        let formField: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n          tableField\r\n        );\r\n        if (formField && formField != null) {\r\n          addFields.push(formField);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      beginIndex = checkedField.index + 1;\r\n    }\r\n    addFields.forEach((item: any, index: any, object: any) => {\r\n      form_fields.splice(beginIndex + index, 0, item);\r\n    });\r\n  }\r\n\r\n  groupFieldMoveUpOrDown(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig,\r\n    type: string\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (checkedFields) {\r\n      if (type === \"up\") {\r\n        checkedFields.forEach((item: any) => {\r\n          if (item.index > 0) {\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(item.index, 1);\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n              item.index - 1,\r\n              0,\r\n              item.field\r\n            );\r\n          }\r\n        });\r\n      } else if (type === \"down\") {\r\n        checkedFields.reverse().forEach((item: any) => {\r\n          if (\r\n            item.index <\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").length - 1\r\n          ) {\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(item.index, 1);\r\n            _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n              item.index + 1,\r\n              0,\r\n              item.field\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferLineToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let obj = this.getFieldLineInfo();\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (!cloneField) return null;\r\n    if (\r\n      !cloneField.fieldArray ||\r\n      !cloneField.fieldArray.fieldGroup ||\r\n      cloneField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      _.get(checkedField, \"checked\", true);\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n        checkedField.index + 1,\r\n        0,\r\n        obj\r\n      );\r\n    } else {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").push(obj);\r\n    }\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferRemarkToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    this.clearGroupChecked(field);\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n\r\n    let obj = this.getFieldRemarkInfo();\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(cloneField);\r\n    if (!cloneField) return null;\r\n    if (\r\n      !cloneField.fieldArray ||\r\n      !cloneField.fieldArray.fieldGroup ||\r\n      cloneField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      _.get(checkedField, \"checked\", true);\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").splice(\r\n        checkedField.index + 1,\r\n        0,\r\n        obj\r\n      );\r\n    } else {\r\n      _.get(cloneField, \"fieldArray.fieldGroup\").push(obj);\r\n    }\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneField.guid) {\r\n        item.fieldArray = cloneField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferSelectFieldToForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    groupField: VXFormFieldConfig,\r\n    checkedFields: ICheckedField[],\r\n    businessTable: IBusinessTable,\r\n    obj: any\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneGroupField: VXFormFieldConfig = clone(groupField);\r\n    let selectFields: any = [];\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    let addFields: VXFormFieldConfig[] = [];\r\n    let beginIndex: number = 0;\r\n    Object.getOwnPropertyNames(obj).forEach((item: any) => {\r\n      if (obj[item]) {\r\n        selectFields.push(item);\r\n      }\r\n    });\r\n    if (!selectFields || selectFields.length < 1) return;\r\n\r\n    tableFields = this.getTableFiledList(businessTable);\r\n\r\n    if (!tableFields || tableFields.length < 1) return;\r\n\r\n    if (cloneFields && cloneFields.length > 0) {\r\n      beginIndex = cloneFields.length - 1;\r\n    }\r\n    if (\r\n      !cloneGroupField.fieldArray ||\r\n      !cloneGroupField.fieldArray.fieldGroup ||\r\n      cloneGroupField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\", []);\r\n    }\r\n\r\n    selectFields.forEach((key: any) => {\r\n      let tableField: VXTableFieldConfig = this.getTableFiledInfo(\r\n        key,\r\n        tableFields\r\n      );\r\n      if (tableField != null) {\r\n        let formField: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n          tableField\r\n        );\r\n        if (formField && formField != null) {\r\n          addFields.push(formField);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (checkedFields && checkedFields.length > 0) {\r\n      let checkedField = checkedFields[checkedFields.length - 1];\r\n      beginIndex = checkedField.index + 1;\r\n    }\r\n\r\n    addFields.forEach((item: any, index: any, object: any) => {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\").splice(\r\n        beginIndex + index,\r\n        0,\r\n        item\r\n      );\r\n    });\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneGroupField.guid) {\r\n        item.fieldArray = cloneGroupField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  groupTransferDeleteForm(\r\n    form_fields: VXFormFieldConfig[],\r\n    groupField: VXFormFieldConfig\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneGroupField: VXFormFieldConfig = clone(groupField);\r\n\r\n    let checkedFields: ICheckedField[] = this.getGroupCheckFields(\r\n      cloneGroupField\r\n    );\r\n    if (!checkedFields || checkedFields == null || checkedFields.length < 1) {\r\n      return;\r\n    }\r\n    if (\r\n      !cloneGroupField.fieldArray ||\r\n      !cloneGroupField.fieldArray.fieldGroup ||\r\n      cloneGroupField.fieldArray.fieldGroup.length < 1\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    checkedFields.forEach((item: any) => {\r\n      _.get(cloneGroupField, \"fieldArray.fieldGroup\").forEach(\r\n        (field: any, index: any, object: any) => {\r\n          if (\r\n            field.key === item.field.key &&\r\n            field.templateOptions.isbutintin != true\r\n          ) {\r\n            object.splice(index, 1);\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    cloneFields.forEach((item: any, index: any, object: any) => {\r\n      if (item.guid === cloneGroupField.guid) {\r\n        item.fieldArray = cloneGroupField.fieldArray;\r\n      }\r\n      if (item.hasOwnProperty(\"fieldGroup\")) {\r\n        delete item.fieldGroup;\r\n      }\r\n    });\r\n    return cloneFields;\r\n  }\r\n\r\n  editFormFieldInfo(\r\n    form_fields: VXFormFieldConfig[],\r\n    new_field: VXFormFieldConfig\r\n  ) {\r\n    if (!form_fields) return;\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let groupKey: string = \"\";\r\n    cloneFields.forEach((field: any, index: any, object: any) => {\r\n     if (field.type === \"repeat\") {\r\n        if (\r\n          field.fieldArray &&\r\n          field.fieldArray.fieldGroup &&\r\n          field.fieldArray.fieldGroup.length > 0\r\n        ) {\r\n          _.get(field, \"fieldArray.fieldGroup\").forEach(\r\n            (groupField: any, groupIndex: any, groupObject: any) => {\r\n              if (groupField.key === new_field.key) {\r\n                groupKey = field.key;\r\n                groupObject.splice(groupIndex, 1);\r\n                groupObject.splice(groupIndex, 0, new_field);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      } else {\r\n        if (field.key === new_field.key) {\r\n          object.splice(index, 1);\r\n          object.splice(index, 0, new_field);\r\n        }\r\n      }\r\n    });\r\n    if (groupKey != null && groupKey != \"\") {\r\n      cloneFields.forEach((item: any, index: any, object: any) => {\r\n        if (item.hasOwnProperty(\"fieldGroup\")) {\r\n          delete item.fieldGroup;\r\n        }\r\n      });\r\n    }\r\n    return {\r\n      groupKey: groupKey,\r\n      formFileds: cloneFields\r\n    };\r\n  }\r\n\r\n  deleteFormFieldInfo(\r\n    form_fields: VXFormFieldConfig[],\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    let cloneFields: VXFormFieldConfig[] = clone(form_fields);\r\n    let cloneField: VXFormFieldConfig = clone(field);\r\n    let groupKey: any;\r\n\r\n    if (\r\n      cloneFields != undefined &&\r\n      cloneFields != null &&\r\n      cloneField != undefined &&\r\n      cloneField != null &&\r\n      cloneFields.length > 0\r\n    ) {\r\n      if (cloneField.key != undefined && cloneField.key != null) {\r\n        cloneFields.forEach((item: any, index: any, object: any) => {\r\n          if (item.key === cloneField.key) {\r\n            object.splice(index, 1);\r\n          }\r\n          if (\r\n            item.fieldArray != undefined &&\r\n            item.fieldArray != null &&\r\n            item.fieldArray.fieldGroup != undefined &&\r\n            item.fieldArray.fieldGroup != null\r\n          ) {\r\n            let res = this.deleteGroupFormFieldInfo(item, field);\r\n            if (res != null && res != \"\") {\r\n              groupKey = res;\r\n              if (item.hasOwnProperty(\"fieldGroup\")) {\r\n                delete item.fieldGroup;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      groupKey: groupKey,\r\n      formFileds: cloneFields\r\n    };\r\n  }\r\n\r\n  private deleteGroupFormFieldInfo(\r\n    fields: VXFormFieldConfig,\r\n    field: VXFormFieldConfig\r\n  ) {\r\n    let form_fields: VXFormFieldConfig[] = [];\r\n    let groupKey: string = \"\";\r\n    if (\r\n      fields.fieldArray != undefined &&\r\n      fields.fieldArray != null &&\r\n      fields.fieldArray.fieldGroup != undefined &&\r\n      fields.fieldArray.fieldGroup != null\r\n    ) {\r\n      form_fields = fields.fieldArray.fieldGroup;\r\n\r\n      if (\r\n        form_fields != undefined &&\r\n        form_fields != null &&\r\n        field != undefined &&\r\n        field != null &&\r\n        form_fields.length > 0\r\n      ) {\r\n        if (field.key != undefined && field.key != null) {\r\n          form_fields.forEach((item: any, index: any, object: any) => {\r\n            if (item.key === field.key) {\r\n              if (fields.key != undefined && fields.key != null) {\r\n                groupKey = fields.key;\r\n                object.splice(index, 1);\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return groupKey;\r\n  }\r\n\r\n  private getFieldLineInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"line\",\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  private getFieldRemarkInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"html\",\r\n      templateOptions: {\r\n        description: \"çæ®µææ¬æè¿°\"\r\n      },\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  private getFieldGroupInfo() {\r\n    let obj: VXFormFieldConfig = {\r\n      key: Guid.create()[\"value\"],\r\n      guid: Guid.create()[\"value\"],\r\n      type: \"repeat\",\r\n      fieldArray: {\r\n        fieldGroup: []\r\n      },\r\n      tablecode: \"\",\r\n      status: 1\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  //æ¸ç©ºéä¸­\r\n  private clearGroupChecked(field: VXFormFieldConfig) {\r\n    if (\r\n      !field ||\r\n      !field.fieldArray ||\r\n      !field.fieldArray.fieldGroup ||\r\n      !field.fieldGroup\r\n    )\r\n      return;\r\n    field.fieldArray.fieldGroup.forEach((item: any, index: any) => {\r\n      item.checked = false;\r\n    });\r\n  }\r\n\r\n  //è·åéä¸­\r\n  private getGroupCheckFields(field: VXFormFieldConfig) {\r\n    let checkedField: ICheckedField[] = [];\r\n    if (\r\n      !field ||\r\n      !field.fieldArray ||\r\n      !field.fieldArray.fieldGroup ||\r\n      !field.fieldGroup ||\r\n      field.fieldGroup.length < 1\r\n    ) {\r\n      return checkedField;\r\n    }\r\n    _.get(field, \"fieldGroup[0].fieldGroup\").forEach(\r\n      (item: any, index: any) => {\r\n        if (item.checked) {\r\n          checkedField.push({ index: index, field: item });\r\n          _.get(field, \"fieldArray.fieldGroup\")[index].checked = true;\r\n        }\r\n      }\r\n    );\r\n    return checkedField;\r\n  }\r\n\r\n  private getTableFiledList(businessTable: IBusinessTable) {\r\n    let tableFields: VXTableFieldConfig[] = [];\r\n    if (businessTable) {\r\n      if (\r\n        businessTable.primary &&\r\n        businessTable.primary != null &&\r\n        businessTable.primary.tablefields &&\r\n        businessTable.primary.tablefields != null &&\r\n        businessTable.primary.tablefields.length > 0\r\n      ) {\r\n        if (businessTable.primary.tablefields) {\r\n          tableFields = tableFields.concat(businessTable.primary.tablefields);\r\n        }\r\n      }\r\n      if (businessTable.child && businessTable.child != null) {\r\n        if (\r\n          businessTable.child.single &&\r\n          businessTable.child.single != null &&\r\n          businessTable.child.single.length > 0\r\n        ) {\r\n          businessTable.child.single.forEach((item: any) => {\r\n            if (item.tablefields) {\r\n              tableFields = tableFields.concat(item.tablefields);\r\n            }\r\n          });\r\n        }\r\n        if (\r\n          businessTable.child.multiple &&\r\n          businessTable.child.multiple != null &&\r\n          businessTable.child.multiple.length > 0\r\n        ) {\r\n          businessTable.child.multiple.forEach((item: any) => {\r\n            if (item.tablefields) {\r\n              tableFields = tableFields.concat(item.tablefields);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return tableFields;\r\n  }\r\n\r\n  private getTableFiledInfo(key: string, tableFields: VXTableFieldConfig[]) {\r\n    let resValue: VXTableFieldConfig = {};\r\n    if (key && tableFields && tableFields.length > 0) {\r\n      let filterFiled = tableFields.filter((item: any) => {\r\n        return item[\"fieldcode\"] === key;\r\n      });\r\n      if (filterFiled && filterFiled.length > 0) {\r\n        return filterFiled[0];\r\n      }\r\n      return resValue;\r\n    }\r\n    return resValue;\r\n  }\r\n}\r\n","import { Injectable, EventEmitter, Inject } from \"@angular/core\";\r\nimport {\r\n  VXTableFieldConfig,\r\n  VXFormFieldConfig,\r\n  VXTableConfig,\r\n  clone\r\n} from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"./util\";\r\nimport * as _ from \"lodash\";\r\nimport { VXToFormFieldService } from \"./formFieldService\";\r\n\r\n@Injectable()\r\nexport class VXDesginToFormService {\r\n  constructor(\r\n    @Inject(VXToFormFieldService)\r\n    private toFormField: VXToFormFieldService\r\n  ) {}\r\n\r\n  initTableStatus(tables: IBusinessTable, fields: VXFormFieldConfig[]) {\r\n    this.initTableFields(tables);\r\n    if (fields && fields != null && fields.length > 0) {\r\n      fields.forEach((field: any, index: any, object: any) => {\r\n        this.setTableStatus(tables, field);\r\n      });\r\n    }\r\n  }\r\n\r\n  initFormFieldByTables(tables: IBusinessTable, fields: VXFormFieldConfig[]) {\r\n    if (\r\n      tables != undefined &&\r\n      tables != null &&\r\n      tables.primary != undefined &&\r\n      tables.primary != null &&\r\n      tables.primary.tablefields != undefined &&\r\n      tables.primary.tablefields != null\r\n    ) {\r\n      let tableFileds: VXTableFieldConfig[] = tables.primary.tablefields.filter(\r\n        (item: any) => {\r\n          return item.isbutintin === true;\r\n        }\r\n      );\r\n      if (tableFileds != null) {\r\n        tableFileds.forEach((item: any) => {\r\n          if (!this.checkVXFormFieldConfig(item.fieldcode, fields)) {\r\n            this.addVXFormFieldConfig(item, fields);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private initTableFields(tables: IBusinessTable) {\r\n    if (!tables) {\r\n      return;\r\n    }\r\n\r\n    if (tables.primary) {\r\n      tables.primary.tablequote = false;\r\n      if (tables.primary.tablefields) {\r\n        tables.primary.tablefields.forEach((field: any) => {\r\n          field.fieldquote = false;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (tables.child) {\r\n      if (tables.child.single) {\r\n        tables.child.single.forEach((table: any) => {\r\n          table.tablequote = false;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((field: any) => {\r\n              field.fieldquote = false;\r\n            });\r\n          }\r\n        });\r\n      }\r\n      if (tables.child.multiple) {\r\n        tables.child.multiple.forEach((table: any) => {\r\n          table.tablequote = false;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((field: any) => {\r\n              field.fieldquote = false;\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTableStatus(tables: IBusinessTable, field: VXFormFieldConfig) {\r\n    if (tables) {\r\n      if (tables.primary) {\r\n        this.setTablePrimary(tables.primary, field);\r\n      }\r\n\r\n      if (tables.child) {\r\n        if (tables.child.single) {\r\n          this.setTableSingle(tables.child.single, field);\r\n        }\r\n        if (tables.child.multiple) {\r\n          this.setTableMultiple(tables.child.multiple, field);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTablePrimary(table: VXTableConfig, field: VXFormFieldConfig) {\r\n    if (field.tablecode === table.tablecode) {\r\n      table.tablequote = true;\r\n      if (table.tablefields) {\r\n        table.tablefields.forEach((item: any) => {\r\n          if (item.fieldcode === field.key) {\r\n            item.fieldquote = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private setTableSingle(tables: VXTableConfig[], field: VXFormFieldConfig) {\r\n    if (tables && tables != null && tables.length > 0) {\r\n      tables.forEach(table => {\r\n        if (table.tablecode === field.tablecode) {\r\n          table.tablequote = true;\r\n          if (table.tablefields) {\r\n            table.tablefields.forEach((item: any) => {\r\n              if (item.fieldcode === field.key) {\r\n                item.fieldquote = true;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private setTableMultiple(\r\n    tables: VXTableConfig[],\r\n    groupField: VXFormFieldConfig\r\n  ) {\r\n    if (tables && tables != null && tables.length > 0) {\r\n      tables.forEach(table => {\r\n        if (table.tablecode === groupField.tablecode) {\r\n          table.tablequote = true;\r\n          if (\r\n            groupField.fieldArray &&\r\n            groupField.fieldArray.fieldGroup &&\r\n            groupField.fieldArray.fieldGroup.length > 0\r\n          ) {\r\n            if (table.tablefields) {\r\n              table.tablefields.forEach((item: any) => {\r\n                _.get(groupField, \"fieldArray.fieldGroup\").forEach(\r\n                  (field: any) => {\r\n                    if (item.fieldcode === field.key) {\r\n                      item.fieldquote = true;\r\n                    }\r\n                  }\r\n                );\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private checkVXFormFieldConfig(code: string, fields: VXFormFieldConfig[]) {\r\n    let result = false;\r\n    if (fields != undefined && fields != null && fields != []) {\r\n      result = fields.some((item: any) => {\r\n        return item.key === code;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private addVXFormFieldConfig(\r\n    tableField: VXTableFieldConfig,\r\n    fields: VXFormFieldConfig[]\r\n  ) {\r\n    let field: VXFormFieldConfig = this.toFormField.getVXFiledFunction(\r\n      tableField\r\n    );\r\n    if (fields == undefined || fields == null) {\r\n      fields = [];\r\n    }\r\n    fields.push(field);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { FieldWrapper, VXFormFieldConfig, clone } from \"@vx-form/core\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-field\",\r\n  templateUrl: \"./field.component.html\",\r\n  styleUrls: [\"./field.component.less\"]\r\n})\r\nexport class VXFormDesignField implements OnInit, OnChanges {\r\n  formField: any = {\r\n    key: \"\",\r\n    type:\"text\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\",\r\n      parameterid: \"\",\r\n      treeid: \"\",\r\n      controlid: \"\",\r\n      maxLength: 50,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\"\r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  };\r\n  lang: any[] = [\r\n    { languagetype: \"chinese\", resvalue: \"chinesechinese\" },\r\n    { languagetype: \"english\", resvalue: \"englishenglish\" },\r\n    { languagetype: \"english2\", resvalue: \"english2\" }\r\n  ];\r\n  @Input() set field(value: VXFormFieldConfig) { \r\n    this.formField = { ...this.formField, ...value }; \r\n  }\r\n\r\n  constructor(\r\n    public message: NzMessageService) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  checkSave(){\r\n    let type = this.formField.type;\r\n    if(type==\"text\" || type==\"textarea\"){\r\n      if(this.formField.templateOptions.minLength>=this.formField.templateOptions.maxLength){\r\n        this.message.error(\"æå¤§é¿åº¦å¿é¡»å¤§äºæå°é¿åº¦\");\r\n        return false;\r\n      }\r\n    }\r\n    if(type==\"number\"){\r\n      if(this.formField.templateOptions.min>=this.formField.templateOptions.max){\r\n        this.message.error(\"æå¤§å¼å¿é¡»å¤§äºæå°å¼\");\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output } from \"@angular/core\";\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from \"@angular/forms\";\r\nimport {\r\n  FieldWrapper,\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig,\r\n  clone\r\n} from \"@vx-form/core\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-fieldlabel\",\r\n  templateUrl: \"./field.component.html\",\r\n  styleUrls: [\"./field.component.less\"]\r\n})\r\nexport class VXFormDesignFieldLabel implements OnInit {\r\n  formField: any = {\r\n    key: \"\",\r\n    type:\"html\",\r\n    templateOptions: {\r\n      label: \"\",\r\n      description: \"\",\r\n      parameterid: \"\",\r\n      treeid: \"\",\r\n      controlid: \"\",\r\n      maxLength: 50,\r\n      minLength: 0,\r\n      max: 0,\r\n      min: 0,\r\n      precision: 0,\r\n      placeholder: \"\",\r\n      required: false,\r\n      tips: \"\",\r\n      pattern: \"\"\r\n    },\r\n    origin: {\r\n      refdatasourcetype: \"\",\r\n      datatype: \"\"\r\n    }\r\n  }; \r\n  @Input() set field(value: VXFormFieldConfig) {\r\n    this.formField = { ...this.formField, ...value }; \r\n    console.log(this.formField);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  submitForm() {}\r\n\r\n  checkSave(){\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-table\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormDesignTable implements OnInit, OnChanges, OnDestroy {\r\n  @Input() tableType: string = \"\";\r\n  @Input() businessTable: IBusinessTable = {\r\n    primary: {},\r\n    child: {\r\n      single: [],\r\n      multiple: []\r\n    }\r\n  };\r\n  @Input() fieldConfig: VXFormFieldConfig = {};\r\n\r\n  tableData = [];\r\n\r\n  mapOfCheckedId: { [key: string]: boolean } = {};\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  initTableData() {\r\n    this.tableData = [];\r\n    this.mapOfCheckedId = {};\r\n    let business = clone(this.businessTable);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n    if (this.tableType === \"single\") {\r\n      if (business.primary && business.primary != null) {\r\n        tables = [...tables, business.primary];\r\n      }\r\n      if (\r\n        business.child &&\r\n        business.child != null &&\r\n        business.child.single &&\r\n        business.child.single != null &&\r\n        business.child.single.length > 0\r\n      ) {\r\n        tables = tables.concat(business.child.single);\r\n      }\r\n    } else if (this.tableType === \"multiple\") {\r\n      if (\r\n        business.child &&\r\n        business.child != null &&\r\n        business.child.multiple &&\r\n        business.child.multiple != null &&\r\n        business.child.multiple.length > 0\r\n      ) {\r\n        business.child.multiple.forEach((table: any) => {\r\n          if (table.tablecode === this.fieldConfig.tablecode) {\r\n            tables = [table];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    this.tableData = tables;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-design-tables\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.less\"],\r\n  providers: [DataService]\r\n})\r\nexport class VXFormDesignTables implements OnInit, OnChanges, OnDestroy {\r\n  @Input() businessTable: IBusinessTable = {\r\n    primary: {},\r\n    child: {\r\n      single: [],\r\n      multiple: []\r\n    }\r\n  };\r\n  radioValue = \"\";\r\n  tableData = [];\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  initTableData() {\r\n    this.tableData = [];\r\n    let business = clone(this.businessTable);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.multiple &&\r\n      business.child.multiple != null &&\r\n      business.child.multiple.length > 0\r\n    ) {\r\n      this.tableData = business.child.multiple;\r\n    }\r\n    console.log(this.tableData);\r\n  }\r\n\r\n  selectOK(table: any) {}\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { FormGroup } from \"@angular/forms\";\r\nimport {\r\n  VXFormFieldConfig,\r\n  VXTableFieldConfig,\r\n  VXFormInfo,\r\n  clone,\r\n  VXTableConfig,\r\n  VXFormCommonService\r\n} from \"@vx-form/core\";\r\nimport { NzModalService } from \"ng-zorro-antd/modal\";\r\nimport { NzMessageService } from \"ng-zorro-antd/message\";\r\nimport * as _ from \"lodash\";\r\nimport { VXFormAntService } from \"../../tools/service\";\r\nimport {\r\n  FormLayout,\r\n  LayoutPanel,\r\n  LayoutColumn,\r\n  VXTableBusiness,\r\n  ICheckedField,\r\n  IBusinessTable,\r\n  Itable,\r\n  IDesignFormAPI\r\n} from \"../../tools/util\";\r\nimport {\r\n  CdkDragDrop,\r\n  moveItemInArray,\r\n  transferArrayItem\r\n} from \"@angular/cdk/drag-drop\";\r\nimport { VXDialogService } from \"../../service/dialog.service\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport { VXAntCommonService } from \"../../tools/commonService\";\r\nimport { VXTransferService } from \"../../tools/transferService\";\r\nimport { VXDesginToFormService } from \"../../tools/tableFieldService\";\r\nimport { VXFormDesignField } from \"../field/field.component\";\r\nimport { VXFormDesignFieldLabel } from \"../field-label/field.component\";\r\nimport { VXFormDesignTable } from \"../table/table.component\";\r\nimport { VXFormDesignTables } from \"../tables/table.component\";\r\nimport { group } from \"@angular/animations\";\r\nimport { filter } from \"rxjs/operators\";\r\n\r\n\r\n@Component({\r\n  selector: \"vxform-design-detail\",\r\n  templateUrl: \"./detail.component.html\",\r\n  styleUrls: [\"./detail.component.less\"],\r\n  providers: [DataService, VXAntCommonService, VXTransferService]\r\n})\r\nexport class VXFormDesignDetail implements OnInit, OnChanges, OnDestroy {\r\n  @Input() formCode: string = \"\";\r\n  @Input() api: IDesignFormAPI = {\r\n    tables: { url: \"assets/mockData/business.json\" },\r\n    form: { url: \"assets/mockData/formInfo.json\" }\r\n  };\r\n  @Output() saveEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() cancelEvent: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() previewEvent: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  pageStatus: number = 1;\r\n\r\n  form_model: any = {};\r\n  form_group = new FormGroup({});\r\n  form_fields: VXFormFieldConfig[] = [];\r\n\r\n  vxFormInfo: VXFormInfo = {};\r\n\r\n  business_tables: IBusinessTable = {\r\n    primary: {},\r\n    child: { single: [], multiple: [] }\r\n  };\r\n\r\n  layout_column: string = \"layout-column-3\";\r\n  layout_row: string = \"layout-row-1\";\r\n\r\n  table_Data: Itable[] = [];\r\n\r\n  constructor(\r\n    private message: NzMessageService,\r\n    private modalService: NzModalService,\r\n    private vxFormAntService: VXFormAntService,\r\n    public vxDialogService: VXDialogService,\r\n    public dataService: DataService,\r\n    public vxAntCommonService: VXAntCommonService,\r\n    public vxTransferService: VXTransferService,\r\n    public vxDesginToFormService: VXDesginToFormService,\r\n    public vxFormCommonService: VXFormCommonService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.vxFormAntService.btnEvent.subscribe((res: any) => {\r\n      switch (res[\"type\"]) {\r\n        case \"delete\":\r\n          this.modalService.confirm({\r\n            nzTitle: \"æç¤º\",\r\n            nzContent: \"æ¨ç¡®å®è¦å é¤éä¸­çå­æ®µï¼\",\r\n            nzOnOk: () => {\r\n              this.groupBtnDeleteFields(res[\"field\"]);\r\n            }\r\n          });\r\n          break;\r\n        case \"up\":\r\n        case \"down\":\r\n          this.groupBtnMoveUpOrDown(res[\"field\"], res[\"type\"]);\r\n          break;\r\n        case \"item\":\r\n          this.groupBtnTableFields(res[\"field\"]);\r\n          break;\r\n        case \"remark\":\r\n        case \"line\":\r\n          this.groupBtnAddLineRemark(res[\"field\"], res[\"type\"]);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    this.vxFormAntService.fieldEvent.subscribe((res: any) => {\r\n      let sign = res[\"sign\"];\r\n      if (sign == \"edit\") {\r\n        this.editFormFieldConfig(res[\"field\"]);\r\n      } else if (sign == \"delete\") {\r\n        this.modalService.confirm({\r\n          nzTitle: \"æç¤º\",\r\n          nzContent: \"æ¨ç¡®å®è¦å é¤è¯¥å­æ®µï¼\",\r\n          nzOnOk: () => {\r\n            this.deleteFormFieldConfig(res[\"field\"]);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.formCode) {\r\n      this.initTablesInfo();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() { }\r\n\r\n  /*æé®åºå---begin*/\r\n\r\n  btnSave() {\r\n    this.vxFormInfo.fields = clone(this.form_fields);\r\n    if (\r\n      this.vxFormInfo.fields !== null &&\r\n      this.vxFormInfo.fields !== undefined\r\n    ) {\r\n      this.vxFormCommonService.initFormFieldProperty(this.vxFormInfo.fields);\r\n    }\r\n    console.log(JSON.stringify(this.vxFormInfo));\r\n    this.saveEvent.emit(JSON.stringify(this.vxFormInfo));\r\n  }\r\n\r\n  btnCancel() { }\r\n\r\n  btnPreview() {\r\n    this.vxFormInfo.fields = clone(this.form_fields);\r\n    if (\r\n      this.vxFormInfo.fields !== null &&\r\n      this.vxFormInfo.fields !== undefined\r\n    ) {\r\n      this.vxFormCommonService.initFormFieldProperty(this.vxFormInfo.fields);\r\n    }\r\n    this.previewEvent.emit(JSON.stringify(this.vxFormInfo));\r\n  }\r\n\r\n  btnDelete() {\r\n    this.modalService.confirm({\r\n      nzTitle: \"æç¤º\",\r\n      nzContent: \"æ¨ç¡®å®è¦å é¤éä¸­çå­æ®µï¼\",\r\n      nzOnOk: () => {\r\n        this.getCheckFields().forEach((item: any) => {\r\n          this.form_fields.forEach((field, index, object) => {\r\n            if (\r\n              field.key === item.field.key &&\r\n              _.get(field, \"templateOptions.isbutintin\") != true\r\n            ) {\r\n              object.splice(index, 1);\r\n            }\r\n          });\r\n        });\r\n\r\n        this.initTableFieldStatus();\r\n      }\r\n    });\r\n  }\r\n\r\n  btnMoveUp() {\r\n    this.getCheckFields().forEach((item: any) => {\r\n      if (item.index > 0) {\r\n        this.form_fields.splice(item.index, 1);\r\n        this.form_fields.splice(item.index - 1, 0, item.field);\r\n      }\r\n    });\r\n  }\r\n\r\n  btnMoveDown() {\r\n    this.getCheckFields()\r\n      .reverse()\r\n      .forEach(item => {\r\n        if (item.index < this.form_fields.length - 1) {\r\n          this.form_fields.splice(item.index, 1);\r\n          this.form_fields.splice(item.index + 1, 0, item.field);\r\n        }\r\n      });\r\n  }\r\n\r\n  btnAddFields() {\r\n    this.selectTableFields();\r\n  }\r\n\r\n  btnAddRemark() {\r\n    this.vxTransferService.transferLabelToForm(\r\n      this.form_fields,\r\n      this.getCheckFields()\r\n    );\r\n  }\r\n\r\n  btnAddLine() {\r\n    this.vxTransferService.transferLineToForm(\r\n      this.form_fields,\r\n      this.getCheckFields()\r\n    );\r\n  }\r\n\r\n  btnAddGroup() {\r\n    let tablecode = this.getTableMultipleCode();\r\n    if (tablecode == null || tablecode == \"\") {\r\n      this.message.warning(\r\n        \"å½åä¸å¡è¡¨æ²¡æç¸å³èçå¤è¡¨åè®°å½ï¼æä¸è½æ·»å å¤è®°å½åºåï¼\"\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.business_tables &&\r\n      this.business_tables.child &&\r\n      this.business_tables.child.multiple &&\r\n      this.business_tables.child.multiple.length > 0\r\n    ) {\r\n      if (\r\n        this.business_tables.child.multiple.some((item: any) => {\r\n          return item.tablequote !== true;\r\n        })\r\n      ) {\r\n        this.vxDialogService.CreateModelDialog(\r\n          {\r\n            nzTitle: \"ç¼è¾\",\r\n            size: \"large\",\r\n            nzContent: VXFormDesignTables\r\n          },\r\n          { businessTable: this.business_tables, tableType: \"single\" },\r\n          (instance: any, modal: any) => {\r\n            modal.destroy();\r\n\r\n            this.vxTransferService.transferGroupToForm(\r\n              this.form_fields,\r\n              this.getCheckFields(),\r\n              instance.radioValue\r\n            );\r\n\r\n            this.initTableFieldStatus();\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  btnColumn(type: number) {\r\n    this.vxFormInfo.column = `layout-column-${type}`;\r\n    this.layout_column = this.vxFormInfo.column;\r\n  }\r\n\r\n  btnRow(type: number) {\r\n    this.vxFormInfo.row = `layout-row-${type}`;\r\n    this.layout_row = this.vxFormInfo.row;\r\n  }\r\n\r\n  getCheckFields() {\r\n    let checkedField: ICheckedField[] = [];\r\n    this.form_fields.forEach((item, index) => {\r\n      if (item.checked) {\r\n        checkedField.push({ index: index, field: item });\r\n      }\r\n    });\r\n    return checkedField;\r\n  }\r\n\r\n  /*æé®åºå---end*/\r\n\r\n  groupBtnMoveUpOrDown(groupField: VXFormFieldConfig, type: string) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      groupField.fieldArray = {\r\n        fieldGroup: []\r\n      };\r\n    }\r\n    let res = this.vxTransferService.groupFieldMoveUpOrDown(\r\n      this.form_fields,\r\n      groupField,\r\n      type\r\n    );\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n  }\r\n\r\n  groupBtnAddLineRemark(groupField: VXFormFieldConfig, type: string) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      groupField.fieldArray = {\r\n        fieldGroup: []\r\n      };\r\n    }\r\n    let res = null;\r\n    if (type === \"line\") {\r\n      res = this.vxTransferService.groupTransferLineToForm(\r\n        this.form_fields,\r\n        groupField\r\n      );\r\n    } else if (type === \"remark\") {\r\n      res = this.vxTransferService.groupTransferRemarkToForm(\r\n        this.form_fields,\r\n        groupField\r\n      );\r\n    }\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n  }\r\n\r\n  groupBtnTableFields(groupField: VXFormFieldConfig) {\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXFormDesignTable\r\n      },\r\n      {\r\n        businessTable: this.business_tables,\r\n        tableType: \"multiple\",\r\n        fieldConfig: groupField\r\n      },\r\n      (instance: any, modal: any) => {\r\n        modal.destroy();\r\n        let res = this.vxTransferService.groupTransferSelectFieldToForm(\r\n          this.form_fields,\r\n          groupField,\r\n          this.getCheckFields(),\r\n          this.business_tables,\r\n          instance.mapOfCheckedId\r\n        );\r\n        if (res != null) {\r\n          this.form_fields = res;\r\n          if (groupField.key !== null && groupField.key !== undefined) {\r\n            this.form_model[groupField.key] = [{}];\r\n          }\r\n        }\r\n\r\n        this.initTableFieldStatus();\r\n      }\r\n    );\r\n  }\r\n\r\n  groupBtnDeleteFields(groupField: VXFormFieldConfig) {\r\n    if (\r\n      !_.get(groupField, \"fieldArray.fieldGroup\") ||\r\n      _.get(groupField, \"fieldArray.fieldGroup\").length < 1\r\n    ) {\r\n      return;\r\n    }\r\n    let res = this.vxTransferService.groupTransferDeleteForm(\r\n      this.form_fields,\r\n      groupField\r\n    );\r\n    if (res != null) {\r\n      this.form_fields = res;\r\n      if (groupField.key !== null && groupField.key !== undefined) {\r\n        this.form_model[groupField.key] = [{}];\r\n      }\r\n    }\r\n    this.initTableFieldStatus();\r\n  }\r\n\r\n  initTablesInfo() {\r\n    this.business_tables;\r\n    this.dataService\r\n      .getBusinessTables(this.api.tables.url, { formcode: this.formCode })\r\n      .subscribe(res => {\r\n        if (res != null) {\r\n          this.business_tables = res;\r\n          this.initFormInfo();\r\n        }\r\n      });\r\n  }\r\n\r\n  initFormInfo() {\r\n    this.dataService.getFormInfo(this.api.form.url, { formcode: this.formCode }).subscribe(res => {\r\n      this.vxFormInfo = {\r\n        code: res.code,\r\n        name: res.name,\r\n        type: res.type,\r\n        fields: res.fields\r\n      };\r\n      if (\r\n        this.vxFormInfo.fields !== null &&\r\n        this.vxFormInfo.fields !== undefined\r\n      ) {\r\n\r\n      this.vxFormCommonService.initFormFieldModel(this.vxFormInfo.fields, this.form_model);\r\n\r\n        this.form_fields = this.vxFormInfo.fields;\r\n      }\r\n      if (res.column != undefined && res.column != null && res.column != \"\") {\r\n        this.vxFormInfo.column = res.column;\r\n      } else {\r\n        this.vxFormInfo.column = \"layout-column-3\";\r\n      }\r\n      if (res.row != undefined && res.row != null && res.row != \"\") {\r\n        this.vxFormInfo.row = res.row;\r\n      } else {\r\n        this.vxFormInfo.row = \"layout-row-1\";\r\n      }\r\n      if (\r\n        this.vxFormInfo.column != undefined &&\r\n        this.vxFormInfo.column != null &&\r\n        this.vxFormInfo.row != undefined &&\r\n        this.vxFormInfo.row != null\r\n      ) {\r\n        this.layout_column = this.vxFormInfo.column;\r\n        this.layout_row = this.vxFormInfo.row;\r\n        //debugger\r\n        this.vxDesginToFormService.initFormFieldByTables(\r\n          this.business_tables,\r\n          this.form_fields\r\n        );\r\n        this.initTableFieldStatus();\r\n      }\r\n    });\r\n  }\r\n\r\n  initTableFieldStatus() {\r\n    this.vxDesginToFormService.initTableStatus(\r\n      this.business_tables,\r\n      this.form_fields\r\n    );\r\n    this.initTablesData();\r\n  }\r\n\r\n  initTablesData() {\r\n    this.table_Data = [];\r\n    let business = clone(this.business_tables);\r\n    let tables: any = [];\r\n    if (!business) return;\r\n\r\n    if (business.primary && business.primary != null) {\r\n      tables = [\r\n        {\r\n          tabletype: \"primary\",\r\n          tablelabel: \"ä¸»è¡¨\",\r\n          tablecode: business.primary[\"tablecode\"],\r\n          tablename: business.primary[\"tablename\"],\r\n          tablefields: business.primary[\"tablefields\"]\r\n        }\r\n      ];\r\n    }\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.single &&\r\n      business.child.single != null &&\r\n      business.child.single.length > 0\r\n    ) {\r\n      if (Array.isArray(business.child.single)) {\r\n        business.child.single.forEach((item: any) => {\r\n          tables.push({\r\n            tabletype: \"single\",\r\n            tablelabel: \"åè®°å½å­è¡¨\",\r\n            tablecode: item[\"tablecode\"],\r\n            tablename: item[\"tablename\"],\r\n            tablefields: item[\"tablefields\"]\r\n          });\r\n        });\r\n      }\r\n    }\r\n    if (\r\n      business.child &&\r\n      business.child != null &&\r\n      business.child.multiple &&\r\n      business.child.multiple != null &&\r\n      business.child.multiple.length > 0\r\n    ) {\r\n      if (Array.isArray(business.child.multiple)) {\r\n        business.child.multiple.forEach((item: any) => {\r\n          tables.push({\r\n            tabletype: \"multiple\",\r\n            tablelabel: \"å¤è®°å½å­è¡¨\",\r\n            tablecode: item[\"tablecode\"],\r\n            tablename: item[\"tablename\"],\r\n            tablefields: item[\"tablefields\"]\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.table_Data = tables;\r\n  }\r\n\r\n  //è¡¨åéæ©\r\n  selectTableFields() {\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: \"ç¼è¾\",\r\n        size: \"large\",\r\n        nzContent: VXFormDesignTable\r\n      },\r\n      { businessTable: this.business_tables, tableType: \"single\" },\r\n      (instance: any, modal: any) => {\r\n        modal.destroy();\r\n        this.vxTransferService.transferSelectFieldToForm(\r\n          this.form_fields,\r\n          this.getCheckFields(),\r\n          this.business_tables,\r\n          instance.mapOfCheckedId\r\n        );\r\n        console.log(JSON.stringify(this.form_fields))\r\n        this.initTableFieldStatus();\r\n      }\r\n    );\r\n  }\r\n\r\n  getTableMultipleCode() {\r\n    let resTableCode = \"\";\r\n    if (\r\n      this.business_tables &&\r\n      this.business_tables.child &&\r\n      this.business_tables.child.multiple &&\r\n      this.business_tables.child.multiple.length > 0\r\n    ) {\r\n      this.business_tables.child.multiple.forEach((item: any) => {\r\n        if (item.tablequote !== true && resTableCode == \"\") {\r\n          resTableCode = item.tablecode;\r\n        }\r\n      });\r\n    }\r\n    return resTableCode;\r\n  }\r\n\r\n  //ä¿®æ¹Field\r\n  editFormFieldConfig(field: VXFormFieldConfig) {\r\n    let content: any;\r\n    let title = \"\";\r\n    if (field.type === \"html\") {\r\n      title = \"ç¼è¾çæ®µææ¬æè¿°\";\r\n      content = VXFormDesignFieldLabel;\r\n    } else {\r\n      title = \"ç¼è¾å­æ®µ - \" + _.get(field, \"templateOptions.label\");\r\n      content = VXFormDesignField;\r\n    }\r\n    this.vxDialogService.CreateModelDialog(\r\n      {\r\n        nzTitle: title,\r\n        size: \"large\",\r\n        nzContent: content\r\n      },\r\n      { field: clone(field) },\r\n      (instance: any, modal: any) => { \r\n        if (instance.checkSave()) {\r\n          let result = this.vxTransferService.editFormFieldInfo(\r\n            this.form_fields,\r\n            instance.formField\r\n          );\r\n\r\n          if (result != null) {\r\n            this.form_fields = result.formFileds;\r\n            if (result.groupKey != null && result.groupKey != \"\") {\r\n              this.form_model[result.groupKey] = [{}];\r\n            }\r\n          }\r\n          modal.destroy();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  //å é¤Field\r\n  deleteFormFieldConfig(field: VXFormFieldConfig) {\r\n    let result = this.vxTransferService.deleteFormFieldInfo(\r\n      this.form_fields,\r\n      field\r\n    );\r\n\r\n    if (result != null) {\r\n      this.form_fields = result.formFileds;\r\n      if (result.groupKey != null && result.groupKey != \"\") {\r\n        this.form_model[result.groupKey] = [{}];\r\n      }\r\n\r\n      this.initTableFieldStatus();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  forwardRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { clone, VXFormFieldConfig } from \"@vx-form/core\";\r\nimport { IBusinessTable } from \"../../tools/util\";\r\nimport { DataService } from \"../../service/data.service\";\r\nimport * as _ from \"lodash\";\r\n\r\n@Component({\r\n  selector: \"vxform-drawer\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"],\r\n  host: {\r\n    \"[class.setting-drawer]\": \"true\"\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => VXFormDrawerComponent), // replace name as appropriate\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class VXFormDrawerComponent implements OnInit, OnChanges, OnDestroy {\r\n  visible = false;\r\n\r\n  tableData = [];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    //this.initTableData();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n\r\n  ngOnDestroy() {}\r\n\r\n  close(): void {\r\n    this.visible = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.visible = !this.visible;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    if (value != undefined && value != null) {\r\n      this.tableData = value;\r\n    }\r\n  }\r\n\r\n  onChange(_: any) {}\r\n  onTouched() {}\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from \"@angular/core\";\r\nimport { NzTreeComponent } from \"ng-zorro-antd/tree\";\r\nimport { NzFormatEmitEvent } from \"ng-zorro-antd/core\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport {\r\n  ISelectedNode,\r\n  ITreeData,\r\n  ICheckedTree,\r\n  ITreeEvent\r\n} from \"../../../tools/util\";\r\n\r\n@Component({\r\n  selector: \"vxform-private-tree\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXFormPrivateTree implements OnInit, OnChanges {\r\n  //æ¯å¦æ¾ç¤ºTag\r\n  @Input() tag: boolean = true;\r\n\r\n  //åéï¼å¤é\r\n  @Input() selectType: \"single\" | \"multiple\" = \"single\";\r\n\r\n  @Input() expandAll:boolean = true;\r\n\r\n  //éä¸­èç¹\r\n  @Input() selectData: ICheckedTree[] = [];\r\n\r\n  //æ æ°æ®\r\n  @Input() data: ITreeData[] = [];\r\n\r\n  @Output() treeChangeEvent = new EventEmitter<ITreeEvent>();\r\n\r\n  @ViewChild(\"nzTreeComponent\", { static: false })\r\n  nzTreeComponent: NzTreeComponent | undefined;\r\n\r\n  selectedKey: any[] = [];\r\n\r\n  //éæ©èç¹\r\n  selectedNode: ISelectedNode[] = [];\r\n\r\n  skeletonStatus: number = 0;\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.selectData) {\r\n      this.treeChecked(this.selectData);\r\n    }\r\n    if (changes.data) {\r\n      //setTimeout(() => {\r\n      this.skeletonStatus = 1;\r\n      //}, 100);\r\n    }\r\n  }\r\n\r\n  nzClick(event: NzFormatEmitEvent) {\r\n    if (this.selectType != \"multiple\") {\r\n      this.selectData.forEach((item: any, index, object) => {\r\n        if (\r\n          item != undefined &&\r\n          item != null &&\r\n          item.value != undefined &&\r\n          item.value != null &&\r\n          event != undefined &&\r\n          event != null &&\r\n          event.node != undefined &&\r\n          event.node != null &&\r\n          event.node.key != undefined &&\r\n          event.node.key != null &&\r\n          event.node.title != undefined &&\r\n          event.node.title != null &&\r\n          item.value !== event.node.key\r\n        ) {\r\n          object.splice(index, 1);\r\n        }\r\n      });\r\n      if (this.selectData.length < 1) {\r\n        if (\r\n          event != undefined &&\r\n          event != null &&\r\n          event.node != undefined &&\r\n          event.node != null &&\r\n          event.node.key != undefined &&\r\n          event.node.key != null &&\r\n          event.node.title != undefined &&\r\n          event.node.title != null\r\n        ) {\r\n          this.selectData.push({\r\n            label: event.node.title,\r\n            value: event.node.key\r\n          });\r\n        }\r\n      }\r\n      this.treeChangeEvent.emit({ checkData: this.selectData });\r\n    }\r\n  }\r\n\r\n  //ç¹å»å¤éæ¡è§¦å\r\n  nzCheck(event: NzFormatEmitEvent): void {\r\n    if (\r\n      event != undefined &&\r\n      event != null &&\r\n      event.keys != undefined &&\r\n      event.keys != null &&\r\n      event.node != undefined &&\r\n      event.node != null &&\r\n      event.node.key != undefined &&\r\n      event.node.key != null &&\r\n      event.node.title != undefined &&\r\n      event.node.title != null\r\n    ) {\r\n      let isAdd: boolean = event.keys.some((key: any) => {\r\n        return key === _.get(event, \"node.key\");\r\n      });\r\n      if (isAdd == true) {\r\n        this.selectData.push({\r\n          label: event.node.title,\r\n          value: event.node.key\r\n        });\r\n      } else {\r\n        this.selectData.forEach((item, index, object) => {\r\n          if (item.value === _.get(event, \"node.key\")) {\r\n            object.splice(index, 1);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    this.treeChecked(this.selectData);\r\n\r\n    this.treeChangeEvent.emit({ checkData: this.selectData });\r\n  }\r\n\r\n  //éç½®éä¸­èç¹\r\n  treeChecked(items: any) {\r\n    if (items != null && items.length > 0) {\r\n      this.selectedKey = items.map((item: any) => {\r\n        return item.value;\r\n      });\r\n    } else {\r\n      this.selectedKey = [];\r\n    }\r\n  }\r\n\r\n  //å é¤éä¸­èç¹\r\n  selectClearById(node: any) {\r\n    this.selectData.forEach((item, index, object) => {\r\n      if (item.value === node) {\r\n        object.splice(index, 1);\r\n      }\r\n    });\r\n    this.treeChecked(this.selectData);\r\n    this.treeChangeEvent.emit({ checkData: this.selectData, delete: node });\r\n  }\r\n\r\n  selectAllClear(){  \r\n    //this.selectData =[];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  ChangeDetectionStrategy\r\n} from \"@angular/core\";\r\n\r\nexport interface ITableQuery {\r\n  total: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  sortName?: string;\r\n  sortValue?: string;\r\n  parameter?: any;\r\n  keyWord:string;\r\n}\r\nexport interface ITableHeader {\r\n  key?: any;\r\n  name?: string;\r\n  //pop?: string;\r\n  width?: number;\r\n  minWidth?: number;\r\n  filterList?: any;\r\n  checkboxable?: boolean;\r\n  sortable: boolean;\r\n  hiden?: boolean,\r\n  action?: boolean;\r\n  [additionalProperties: string]: any;\r\n}\r\n\r\nexport interface ITableButton {\r\n  type?: string;\r\n  text?: string;\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: \"vxform-private-table\",\r\n  templateUrl: \"./index.component.html\",\r\n  styleUrls: [\"./index.component.less\"]\r\n})\r\nexport class VXFormPrivateTable  implements OnInit, OnChanges, OnDestroy {\r\n   \r\n  @Input() set tableIndex(value:number){\r\n    this.query.pageIndex=value;\r\n  }\r\n  get tableIndex(){\r\n    return this.query.pageIndex;\r\n  }\r\n  \r\n  @Input() set tableSize(value:number){\r\n    this.query.pageSize=value;\r\n  }\r\n  get tableSize(){\r\n    return this.query.pageSize;\r\n  }\r\n  \r\n  @Input() set tableTotal(value:number){\r\n    this.query.total=value;\r\n  }\r\n  get tableTotal(){\r\n    return this.query.total;\r\n  }\r\n\r\n  //tableId\r\n  @Input() id: string=\"\";\r\n\r\n  //æ¯å¦è¦å¤é\r\n  @Input() check = false;\r\n\r\n  //æ¯å¦ææä½å0 æ²¡ææä½åï¼1 å¤ä¸ªæä½æé® 2 éæ©\r\n  @Input() action = 0;\r\n\r\n  //table å¤´é¨ä¿¡æ¯\r\n  @Input()\r\n  set header(value: ITableHeader[]) {\r\n    if (value != null && value.length > 0) {\r\n      value.forEach(item => {\r\n        item.prop = item.key;\r\n        if (item.checkboxable) {\r\n          item.name=\"\";\r\n          item.width=50;\r\n          item.canAutoResize = false;\r\n          item.resizeable = false;\r\n          item.frozenLeft = true;\r\n          item.checkboxable = true;\r\n          item.headerCheckboxable = true;\r\n        }\r\n        if(item.action){ \r\n          item.frozenRight=true;\r\n          item.canAutoResize=false;\r\n          item.resizeable=false;\r\n        }\r\n        this._headerData.push(item);\r\n      });\r\n    }\r\n  }\r\n  get header() {\r\n    return this._headerData;\r\n  }\r\n\r\n  //table è¡æ°æ®\r\n  @Input()\r\n  set body(value: any[]) {\r\n    this.listData = value;\r\n    if(this.listData==null || this.listData.length==0){\r\n      this.tableScroll.y=\"0px\";\r\n    }else{\r\n      this.tableScroll.y=\"332px\";\r\n    }\r\n  }\r\n\r\n  //æé®åè¡¨\r\n  @Input() buttonlist: ITableButton[] = [];\r\n\r\n  //é»è®¤éä¸­Id\r\n  @Input()\r\n  set checkid(value: any[]) {\r\n    this.listDataSelectedList=[];\r\n    if (value != null && value.length > 0) {\r\n      value.forEach(item => {\r\n        this.listDataCheckedId[item.id] = true;\r\n        this.listDataSelectedList.push(item);\r\n      });\r\n    }\r\n  }\r\n\r\n  //éä¸­äºä»¶\r\n  @Output() checkChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //ç¿»é¡µäºä»¶\r\n  @Output() pageIndexEvent: EventEmitter<any> = new EventEmitter();\r\n  //æåºäºä»¶\r\n  @Output() orderChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //è¿æ»¤äºä»¶\r\n  @Output() filterChangeEvent: EventEmitter<any> = new EventEmitter();\r\n  //æä½äºä»¶\r\n  @Output() buttonAction: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  checkIds: string[] = [];\r\n  _headerData:any[] = [];\r\n\r\n  isAllChecked = false;\r\n  isIndeterminate = false; \r\n\r\n  listData: any[] = [];\r\n  listDataCheckedId: { [key: string]: boolean } = {};\r\n  listDataSelectedList: any[] = [];\r\n\r\n  query: ITableQuery = {\r\n    total: 0,\r\n    pageIndex:1,\r\n    pageSize: 15,\r\n    sortName: \"\",\r\n    sortValue: \"\",\r\n    keyWord:\"\"\r\n  }\r\n  tableScroll = {\r\n    y: '332px'\r\n  };\r\n \r\n  constructor() {}\r\n \r\n\r\n  ngOnChanges(changes: SimpleChanges) {}\r\n \r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n\r\n  //å¨é|å¨ä¸é\r\n  setCheckAll(value: boolean): void {\r\n    this.listData.forEach(item => (this.listDataCheckedId[item.id] = value));\r\n    this.setCheckStatus();\r\n  }\r\n\r\n  //è®¾ç½®æä¸ªéæ©|åæ¶éä¸­\r\n  setCheckStatus(): void { \r\n    this.isAllChecked = this.listData.every(item => this.listDataCheckedId[item.id]);\r\n    this.isIndeterminate = this.listData.some(item => this.listDataCheckedId[item.id]) && !this.isAllChecked;\r\n    this.saveSelected();\r\n  }\r\n  \r\n \r\n  //ç¹å»æ¥è¯¢\r\n  queryChange()\r\n  {\r\n    this.pageIndexEvent.emit(this.query);  \r\n  }\r\n\r\n  //ç¹å»ç¿»é¡µ\r\n  pageIndexChange(e:number) {\r\n    this.query.pageIndex = e;\r\n    this.pageIndexEvent.emit(this.query);\r\n  }\r\n\r\n  //ç¹å»æåº\r\n  tableSort(sort: { key: string; value: string }): void {\r\n    this.query.sortName = sort.key;\r\n    this.query.sortValue = sort.value;\r\n    this.orderChangeEvent.emit(this.query);\r\n  } \r\n\r\n  //åå»éä¸­\r\n  itemSelectChange(event:any){\r\n    this.listDataSelectedList.shift();\r\n    this.listDataSelectedList.push({\r\n      \"id\":event.id,\r\n      \"name\":event.name\r\n    });\r\n    this.checkChangeEvent.emit(this.listDataSelectedList);\r\n  }\r\n \r\n  //ä¿å­éä¸­\r\n  saveSelected(){ \r\n    Object.keys(this.listDataCheckedId).forEach(id => {\r\n      let value = this.listDataCheckedId[id];\r\n        if(value){\r\n         if(!this.listDataSelectedList.some(item=>{return item.id==id})){\r\n          this.listData.forEach((item,index,object)=>{\r\n            if(item.id==id){\r\n              this.listDataSelectedList.push({\r\n                id:item.id,\r\n                name:item.name\r\n              });\r\n            }\r\n          });\r\n         }\r\n        }\r\n        else{\r\n          this.listDataSelectedList.forEach((item,index,object)=>{\r\n            if(item.id==id){\r\n              object.splice(index,1);\r\n            }\r\n          });\r\n        }\r\n    });\r\n    \r\n    this.checkChangeEvent.emit(this.listDataSelectedList); \r\n  }\r\n  \r\n  selectAllClear(){\r\n    this.isAllChecked = false;\r\n    this.isIndeterminate = false; \r\n    this.listDataCheckedId={};\r\n    this.listDataSelectedList=[]; \r\n  }\r\n\r\n  selectClearById(id:any){\r\n    this.listDataCheckedId[id]=false;\r\n    this.setCheckStatus();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\n\r\n@Pipe({ name: \"replaceLine\" })\r\nexport class ReplaceLinePipe implements PipeTransform {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n  transform(value: string): string {\r\n    return value.replace(/\\n/g, \"<br/>\");\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule, registerLocaleData } from \"@angular/common\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpModule } from \"@angular/http\";\r\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\r\nimport {\r\n  HttpClient,\r\n  HTTP_INTERCEPTORS,\r\n  HttpClientModule\r\n} from \"@angular/common/http\";\r\nimport { TranslateLoader, TranslateModule } from \"@ngx-translate/core\";\r\nimport { OverlayModule } from \"@angular/cdk/overlay\";\r\nimport { NgZorroAntdModule, NZ_I18N, zh_CN, NZ_ICONS } from \"ng-zorro-antd\";\r\nimport {\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n} from \"@ant-design/icons-angular/icons\";\r\n\r\nimport zh from \"@angular/common/locales/zh\"; \r\n\r\nimport { VXFormModule } from \"@vx-form/core\";\r\nimport {\r\n  BOOTSTRAP_VXFORM_CONFIG,\r\n  FIELD_TYPE_COMPONENTS\r\n} from \"./bootstrap.config\";\r\n\r\nimport { validationConfig } from \"./validation.config\";\r\nimport { VXFormDesignDetail } from \"./design/detail/detail.component\";\r\nimport { VXFormDesignField } from \"./design/field/field.component\";\r\nimport { VXFormDesignFieldLabel } from \"./design/field-label/field.component\";\r\nimport { VXFormDesignTable } from \"./design/table/table.component\";\r\nimport { VXFormDesignTables } from \"./design/tables/table.component\";\r\nimport { VXFormDrawerComponent } from \"./design/drawer/index.component\";\r\n\r\nimport { VXFormPrivateTree } from \"./components/private/tree/index.component\";\r\nimport { VXFormPrivateTable } from \"./components/private/table/index.component\";\r\n\r\nimport { VXFormTree } from \"./components/tree/index.component\";\r\nimport { VXFormEmployee } from \"./components/employee/index.component\";\r\nimport { VXFormOrg } from \"./components/org/index.component\";\r\nimport { VXFormPostion } from \"./components/postion/index.component\";\r\nimport { VXFormArea } from \"./components/area/index.component\";\r\n\r\n// import { VXLanguageComponent } from \"./components/public/lang/index.component\";\r\n// import { VXFormEmployeeComponent } from \"./components/public/employee/index.component\";\r\n// import { VXFormOrgComponent } from \"./components/public/org/index.component\";\r\n// import { VXFormPostionComponent } from \"./components/public/postion/index.component\";\r\n// import { VXFormAreaComponent } from \"./components/public/area/index.component\";\r\n// import { VXCardSelfComponent } from \"./components/public/card/card-self/index.component\";\r\n// import { VXCardSubComponent } from \"./components/public/card/card-sub/index.component\";\r\n// import { VXCardEmpComponent } from \"./components/public/card/card-emp/index.component\";\r\n// import { VXCardLimitComponent } from \"./components/public/card/card-limit/index.component\";\r\n\r\nimport { VXFormAntService } from \"./tools/service\";\r\nimport { VXToFormFieldService } from \"./tools/formFieldService\";\r\nimport { VXDesginToFormService } from \"./tools/tableFieldService\";\r\n\r\nimport { VXDialogService } from \"./service/dialog.service\"; \r\nimport { ReplaceLinePipe } from \"./tools/replaceLinePipe\"; \r\nimport { _HttpClient } from \"./net/http.client\";\r\n\r\nconst icons = [\r\n  MenuFoldOutline,\r\n  MenuUnfoldOutline,\r\n  FormOutline,\r\n  DashboardOutline,\r\n  MinusSquareFill,\r\n  MinusSquareOutline,\r\n  MinusSquareTwoTone,\r\n  MinusOutline,\r\n  InboxOutline\r\n];\r\nregisterLocaleData(zh);\r\n\r\n//ç§æç\r\nconst entryComponent = [\r\n  VXFormDesignField,\r\n  VXFormDesignFieldLabel,\r\n  VXFormDesignTable,\r\n  VXFormDesignTables,\r\n  VXFormDrawerComponent,\r\n\r\n  VXFormPrivateTree,\r\n  VXFormPrivateTable,\r\n  \r\n\r\n  \r\n  VXFormTree,\r\n  VXFormEmployee,\r\n  VXFormEmployee,\r\n  VXFormOrg,\r\n  VXFormPostion,\r\n  VXFormArea\r\n];\r\n\r\n//å¬å¼ç\r\nconst publicComponent = [\r\n  VXFormDesignDetail,\r\n  // VXLanguageComponent,\r\n  // VXFormEmployeeComponent,\r\n  // VXFormOrgComponent,\r\n  // VXFormPostionComponent,\r\n  // VXFormAreaComponent,\r\n  // VXCardSelfComponent,\r\n  // VXCardSubComponent,\r\n  // VXCardEmpComponent,\r\n  // VXCardLimitComponent,\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FIELD_TYPE_COMPONENTS,\r\n    entryComponent,\r\n    publicComponent,\r\n    ReplaceLinePipe\r\n  ],\r\n  imports: [\r\n    HttpModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    DragDropModule,\r\n    OverlayModule,\r\n    NgZorroAntdModule,\r\n    VXFormModule.forChild(BOOTSTRAP_VXFORM_CONFIG),\r\n    VXFormModule.forRoot(validationConfig)\r\n  ],\r\n  entryComponents: [entryComponent],\r\n  exports: [TranslateModule, publicComponent],\r\n  providers: [ \r\n    { provide: NZ_I18N, useValue: zh_CN },\r\n    { provide: NZ_ICONS, useValue: icons }, \r\n    _HttpClient, \r\n    VXFormAntService,\r\n    VXDialogService,\r\n    VXToFormFieldService,\r\n    VXDesginToFormService\r\n  ]\r\n})\r\nexport class VXFormAntModule {}\r\n"]}